From 9ad00c3f4424d13acce3c39413cb2cdb1bbe2591 Mon Sep 17 00:00:00 2001
From: Mario Limonciello <mario.limonciello@amd.com>
Date: Thu, 29 Jun 2023 08:54:54 -0500
Subject: [PATCH 6/6] cpufreq: amd-pstate: Add sysfs file for base frequency

Some applications may want to query the base frequency to tell when
a processor is operating in boost.

Tested-by: Wyes Karny <wyes.karny@amd.com>
Reviewed-by: Wyes Karny <wyes.karny@amd.com>
Co-developed-by: Perry Yuan <perry.yuan@amd.com>
Signed-off-by: Perry Yuan <perry.yuan@amd.com>
Signed-off-by: Mario Limonciello <mario.limonciello@amd.com>
---
 Documentation/admin-guide/pm/amd-pstate.rst |  4 ++++
 drivers/cpufreq/amd-pstate.c                | 15 +++++++++++++++
 2 files changed, 19 insertions(+)

diff --git a/Documentation/admin-guide/pm/amd-pstate.rst b/Documentation/admin-guide/pm/amd-pstate.rst
index 1cf40f692..e68267857 100644
--- a/Documentation/admin-guide/pm/amd-pstate.rst
+++ b/Documentation/admin-guide/pm/amd-pstate.rst
@@ -281,6 +281,10 @@ integer values defined between 0 to 255 when EPP feature is enabled by platform
 firmware, if EPP feature is disabled, driver will ignore the written value
 This attribute is read-write.
 
+``base_frequency``
+	Shows the base frequency of the CPU. Frequencies above this will be in the
+  ``boost`` range. This attribute is read-only.
+
 Other performance and frequency values can be read back from
 ``/sys/devices/system/cpu/cpuX/acpi_cppc/``, see :ref:`cppc_sysfs`.
 
diff --git a/drivers/cpufreq/amd-pstate.c b/drivers/cpufreq/amd-pstate.c
index 81fba0dcb..0fec66b3f 100644
--- a/drivers/cpufreq/amd-pstate.c
+++ b/drivers/cpufreq/amd-pstate.c
@@ -1037,6 +1037,19 @@ static ssize_t store_status(struct kobject *a, struct kobj_attribute *b,
 	return ret < 0 ? ret : count;
 }
 
+static ssize_t show_base_frequency(struct cpufreq_policy *policy, char *buf)
+{
+	struct amd_cpudata *cpudata = policy->driver_data;
+	u32 nominal_freq;
+
+	nominal_freq = amd_get_nominal_freq(cpudata);
+	if (nominal_freq < 0)
+		return nominal_freq;
+
+	return sysfs_emit(buf, "%d\n", nominal_freq);
+}
+
+cpufreq_freq_attr_ro(base_frequency);
 cpufreq_freq_attr_ro(amd_pstate_max_freq);
 cpufreq_freq_attr_ro(amd_pstate_lowest_nonlinear_freq);
 
@@ -1049,6 +1062,7 @@ static struct freq_attr *amd_pstate_attr[] = {
 	&amd_pstate_max_freq,
 	&amd_pstate_lowest_nonlinear_freq,
 	&amd_pstate_highest_perf,
+	&base_frequency,
 	NULL,
 };
 
@@ -1058,6 +1072,7 @@ static struct freq_attr *amd_pstate_epp_attr[] = {
 	&amd_pstate_highest_perf,
 	&energy_performance_preference,
 	&energy_performance_available_preferences,
+	&base_frequency,
 	NULL,
 };
 
-- 
2.41.0.159.g0bfa463d37

