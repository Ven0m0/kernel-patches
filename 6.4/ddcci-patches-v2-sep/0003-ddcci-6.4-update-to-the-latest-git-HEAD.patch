From bbc8d4193e955c5f8bd617c6f41a9ea1cb990701 Mon Sep 17 00:00:00 2001
From: Oleksandr Natalenko <oleksandr@natalenko.name>
Date: Fri, 18 Aug 2023 22:06:41 +0200
Subject: [PATCH 3/3] ddcci-6.4: update to the latest git HEAD

Signed-off-by: Oleksandr Natalenko <oleksandr@natalenko.name>
---
 drivers/char/ddcci.c  | 87 +++++++++++++++++++++++--------------------
 include/linux/ddcci.h |  8 +++-
 2 files changed, 53 insertions(+), 42 deletions(-)

diff --git a/drivers/char/ddcci.c b/drivers/char/ddcci.c
index 129aede43..f771d81dd 100644
--- a/drivers/char/ddcci.c
+++ b/drivers/char/ddcci.c
@@ -12,7 +12,7 @@
  */
 
 #define pr_fmt(fmt) KBUILD_MODNAME ": " fmt
-#include <asm-generic/fcntl.h>
+#include <linux/fcntl.h>
 #include <linux/cdev.h>
 #include <linux/delay.h>
 #include <linux/device.h>
@@ -21,7 +21,6 @@
 #include <linux/module.h>
 #include <linux/mutex.h>
 #include <linux/rwsem.h>
-#include <linux/sem.h>
 #include <linux/slab.h>
 #include <linux/uaccess.h>
 #include <linux/version.h>
@@ -36,14 +35,14 @@ static unsigned int delay = 60;
 static unsigned short autoprobe_addrs[127] = {0xF0, 0xF2, 0xF4, 0xF6, 0xF8};
 static int autoprobe_addr_count = 5;
 
+static bool module_initialized = false;
 static dev_t ddcci_cdev_first;
 static dev_t ddcci_cdev_next;
 static dev_t ddcci_cdev_end;
-static DEFINE_SEMAPHORE(core_lock, 1);
+static DEFINE_MUTEX(core_lock);
 
 struct bus_type ddcci_bus_type;
 EXPORT_SYMBOL_GPL(ddcci_bus_type);
-static bool ddcci_bus_registered;
 
 /* Assert neccessary string array sizes  */
 #ifndef sizeof_field
@@ -59,7 +58,7 @@ static_assert(sizeof_field(struct ddcci_device, module) > 8);
 struct ddcci_bus_drv_data {
 	unsigned long quirks;
 	struct i2c_client *i2c_dev;
-	struct semaphore sem;
+	struct mutex lock;
 	unsigned char recv_buffer[DDCCI_RECV_BUFFER_SIZE];
 };
 
@@ -167,7 +166,7 @@ static int __ddcci_write_block(struct i2c_client *client, unsigned char addr,
 /*
  * Write a message to the DDC/CI bus.
  *
- * You must hold the bus semaphore when calling this function.
+ * You must hold the bus mutex when calling this function.
  */
 static int ddcci_write(struct i2c_client *client, unsigned char addr,
 		       bool p_flag, const unsigned char *data,
@@ -273,7 +272,7 @@ static int __ddcci_read(struct i2c_client *client, unsigned char addr,
 /*
  * Read a response from the DDC/CI bus
  *
- * You must hold the bus semaphore when calling this function.
+ * You must hold the bus mutex when calling this function.
  */
 static int ddcci_read(struct i2c_client *client, unsigned char addr,
 		      bool p_flag, unsigned char *buf, unsigned char len)
@@ -610,10 +609,10 @@ static ssize_t ddcci_cdev_read(struct file *filp, char __user *buffer,
 
 	/* Lock mutex */
 	if (nonblocking) {
-		if (down_trylock(&dev->bus_drv_data->sem))
+		if (mutex_trylock(&dev->bus_drv_data->lock))
 			return -EAGAIN;
 	} else {
-		if (down_interruptible(&dev->bus_drv_data->sem))
+		if (mutex_lock_interruptible(&dev->bus_drv_data->lock))
 			return -ERESTARTSYS;
 	}
 
@@ -630,7 +629,7 @@ static ssize_t ddcci_cdev_read(struct file *filp, char __user *buffer,
 	}
 
 out:
-	up(&dev->bus_drv_data->sem);
+	mutex_unlock(&dev->bus_drv_data->lock);
 	return ret;
 }
 
@@ -652,10 +651,10 @@ static ssize_t ddcci_cdev_write(struct file *filp, const char __user *buffer,
 
 	/* Lock mutex */
 	if (nonblocking) {
-		if (down_trylock(&dev->bus_drv_data->sem))
+		if (mutex_trylock(&dev->bus_drv_data->lock))
 			return -EAGAIN;
 	} else {
-		if (down_interruptible(&dev->bus_drv_data->sem))
+		if (mutex_lock_interruptible(&dev->bus_drv_data->lock))
 			return -ERESTARTSYS;
 	}
 
@@ -673,12 +672,12 @@ static ssize_t ddcci_cdev_write(struct file *filp, const char __user *buffer,
 
 	if (ret >= 0) {
 		msleep(delay);
-		up(&dev->bus_drv_data->sem);
+		mutex_unlock(&dev->bus_drv_data->lock);
 		return count;
 	}
 
 err_out:
-	up(&dev->bus_drv_data->sem);
+	mutex_unlock(&dev->bus_drv_data->lock);
 	return ret;
 }
 
@@ -932,7 +931,7 @@ ATTRIBUTE_GROUPS(ddcci_char_device);
 
 /* DDC/CI bus */
 
-static int ddcci_device_uevent(const struct device *dev, struct kobj_uevent_env *env)
+static int ddcci_device_uevent(CSTRUCT device *dev, struct kobj_uevent_env *env)
 {
 	struct ddcci_device	*device = to_ddcci_device(dev);
 	char model[ARRAY_SIZE(device->model)];
@@ -996,11 +995,11 @@ static void ddcci_device_release(struct device *dev)
 
 	/* Teardown chardev */
 	if (dev->devt) {
-		down(&core_lock);
+		mutex_lock(&core_lock);
 		if (device->cdev.dev == ddcci_cdev_next-1)
 			ddcci_cdev_next--;
 		cdev_del(&device->cdev);
-		up(&core_lock);
+		mutex_unlock(&core_lock);
 	}
 
 	/* Free capability string */
@@ -1012,7 +1011,7 @@ static void ddcci_device_release(struct device *dev)
 	kfree(device);
 }
 
-static char *ddcci_devnode(const struct device *dev,
+static char *ddcci_devnode(CSTRUCT device *dev,
 			 umode_t *mode, kuid_t *uid, kgid_t *gid)
 {
 	struct ddcci_device *device;
@@ -1022,7 +1021,7 @@ static char *ddcci_devnode(const struct device *dev,
 			 device->i2c_client->adapter->nr);
 }
 
-static char *ddcci_dependent_devnode(const struct device *dev,
+static char *ddcci_dependent_devnode(CSTRUCT device *dev,
 			 umode_t *mode, kuid_t *uid, kgid_t *gid)
 {
 	struct ddcci_device *device;
@@ -1066,7 +1065,7 @@ static struct device_type ddcci_dependent_type = {
  * ddcci_verify_device - return parameter as ddcci_device, or NULL
  * @dev: device, probably from some driver model iterator
  */
-struct ddcci_device *ddcci_verify_device(struct device *dev)
+struct ddcci_device *ddcci_verify_device(CSTRUCT device *dev)
 {
 	if (unlikely(!dev))
 		return NULL;
@@ -1101,7 +1100,7 @@ int ddcci_register_driver(struct module *owner, struct ddcci_driver *driver)
 	int ret;
 
 	/* Can't register until after driver model init */
-	if (unlikely(WARN_ON(!ddcci_bus_registered)))
+	if (unlikely(WARN_ON(!smp_load_acquire(&module_initialized))))
 		return -EAGAIN;
 
 	pr_debug("registering driver [%s]\n", driver->driver.name);
@@ -1148,12 +1147,12 @@ int ddcci_device_write(struct ddcci_device *dev, bool p_flag,
 {
 	int ret;
 
-	if (down_interruptible(&dev->bus_drv_data->sem))
+	if (mutex_lock_interruptible(&dev->bus_drv_data->lock))
 		return -EAGAIN;
 
 	ret = ddcci_write(dev->bus_drv_data->i2c_dev, dev->inner_addr, p_flag, data, length);
 	msleep(delay);
-	up(&dev->bus_drv_data->sem);
+	mutex_unlock(&dev->bus_drv_data->lock);
 	return ret;
 }
 EXPORT_SYMBOL(ddcci_device_write);
@@ -1170,11 +1169,11 @@ int ddcci_device_read(struct ddcci_device *dev, bool p_flag,
 {
 	int ret;
 
-	if (down_interruptible(&dev->bus_drv_data->sem))
+	if (mutex_lock_interruptible(&dev->bus_drv_data->lock))
 		return -EAGAIN;
 
 	ret = ddcci_read(dev->bus_drv_data->i2c_dev, dev->inner_addr, p_flag, buffer, length);
-	up(&dev->bus_drv_data->sem);
+	mutex_unlock(&dev->bus_drv_data->lock);
 	return ret;
 }
 EXPORT_SYMBOL(ddcci_device_read);
@@ -1196,7 +1195,7 @@ int ddcci_device_writeread(struct ddcci_device *dev, bool p_flag,
 {
 	int ret;
 
-	if (down_interruptible(&dev->bus_drv_data->sem))
+	if (mutex_lock_interruptible(&dev->bus_drv_data->lock))
 		return -EAGAIN;
 
 	ret = ddcci_write(dev->bus_drv_data->i2c_dev, dev->inner_addr, p_flag, buffer, length);
@@ -1205,7 +1204,7 @@ int ddcci_device_writeread(struct ddcci_device *dev, bool p_flag,
 	msleep(delay);
 	ret = ddcci_read(dev->bus_drv_data->i2c_dev, dev->inner_addr, p_flag, buffer, maxlength);
 err:
-	up(&dev->bus_drv_data->sem);
+	mutex_unlock(&dev->bus_drv_data->lock);
 	return ret;
 }
 EXPORT_SYMBOL(ddcci_device_writeread);
@@ -1468,7 +1467,7 @@ static int ddcci_detect_device(struct i2c_client *client, unsigned char addr,
 	struct ddcci_bus_drv_data *drv_data = i2c_get_clientdata(client);
 	struct ddcci_device *device = NULL;
 
-	down(&drv_data->sem);
+	mutex_lock(&drv_data->lock);
 
 	/* Allocate buffer big enough for any capability string */
 	buffer = kmalloc(16384, GFP_KERNEL);
@@ -1582,14 +1581,14 @@ static int ddcci_detect_device(struct i2c_client *client, unsigned char addr,
 	}
 
 	/* Setup chardev */
-	down(&core_lock);
+	mutex_lock(&core_lock);
 	ret = ddcci_setup_char_device(device);
-	up(&core_lock);
+	mutex_unlock(&core_lock);
 	if (ret)
 		goto err_free;
 
-	/* Release semaphore and add device to the tree */
-	up(&drv_data->sem);
+	/* Release mutex and add device to the tree */
+	mutex_unlock(&drv_data->lock);
 	pr_debug("found device at %d:%02x:%02x\n", client->adapter->nr, outer_addr, addr);
 	ret = device_add(&device->dev);
 	if (ret)
@@ -1599,7 +1598,7 @@ static int ddcci_detect_device(struct i2c_client *client, unsigned char addr,
 err_free:
 	put_device(&device->dev);
 err_end:
-	up(&drv_data->sem);
+	mutex_unlock(&drv_data->lock);
 end:
 	kfree(buffer);
 	return ret;
@@ -1673,9 +1672,14 @@ static int ddcci_detect(struct i2c_client *client, struct i2c_board_info *info)
 }
 
 /* I2C probe function */
+#if LINUX_VERSION_CODE >= KERNEL_VERSION(6, 3, 0)
 static int ddcci_probe(struct i2c_client *client)
 {
 	const struct i2c_device_id *id = i2c_client_get_device_id(client);
+#else
+static int ddcci_probe(struct i2c_client *client, const struct i2c_device_id *id)
+{
+#endif
 	int i, ret = -ENODEV, tmp;
 	unsigned char main_addr, addr;
 	struct ddcci_bus_drv_data *drv_data;
@@ -1685,7 +1689,7 @@ static int ddcci_probe(struct i2c_client *client)
 	if (!drv_data)
 		return -ENOMEM;
 	drv_data->i2c_dev = client;
-	sema_init(&drv_data->sem, 1);
+	mutex_init(&drv_data->lock);
 
 	/* Set i2c client data */
 	i2c_set_clientdata(client, drv_data);
@@ -1774,7 +1778,7 @@ static int ddcci_remove(struct i2c_client *client)
 	struct ddcci_bus_drv_data *drv_data = i2c_get_clientdata(client);
 	struct device *dev;
 
-	down(&drv_data->sem);
+	mutex_lock(&drv_data->lock);
 	while (1) {
 		dev = bus_find_device(&ddcci_bus_type, NULL, client,
 				      ddcci_remove_helper);
@@ -1783,7 +1787,7 @@ static int ddcci_remove(struct i2c_client *client)
 		device_unregister(dev);
 		put_device(dev);
 	}
-	up(&drv_data->sem);
+	mutex_unlock(&drv_data->lock);
 	return 0;
 }
 
@@ -1815,11 +1819,11 @@ static struct i2c_driver ddcci_driver = {
 
 	.id_table	= ddcci_idtable,
 	.probe		= ddcci_probe,
-#if LINUX_VERSION_CODE >= KERNEL_VERSION(6, 1, 0)
+	#if LINUX_VERSION_CODE >= KERNEL_VERSION(6, 1, 0)
 	.remove		= ddcci_remove_void,
-#else
+	#else
 	.remove		= ddcci_remove,
-#endif
+	#endif
 	.class		= I2C_CLASS_DDC,
 	.detect		= ddcci_detect,
 	.address_list	= I2C_ADDRS(
@@ -1851,7 +1855,6 @@ static int __init ddcci_module_init(void)
 		pr_err("failed to register bus 'ddcci'\n");
 		goto err_busreg;
 	}
-	ddcci_bus_registered = true;
 
 	/* Register I2C driver */
 	ret = i2c_add_driver(&ddcci_driver);
@@ -1861,6 +1864,7 @@ static int __init ddcci_module_init(void)
 	}
 
 	pr_debug("ddcci driver initialized\n");
+	smp_store_release(&module_initialized, true);
 
 	return 0;
 
@@ -1878,6 +1882,7 @@ static int __init ddcci_module_init(void)
 static void __exit ddcci_module_exit(void)
 {
 	struct device *dev;
+	smp_store_release(&module_initialized, false);
 
 	while (1) {
 		dev = bus_find_device(&ddcci_bus_type, NULL, NULL, ddcci_remove_helper);
@@ -1905,5 +1910,5 @@ MODULE_PARM_DESC(autoprobe_addrs, "internal dependent device addresses to autopr
 /* Module description */
 MODULE_AUTHOR("Christoph Grenz");
 MODULE_DESCRIPTION("DDC/CI bus driver");
-MODULE_VERSION("0.4.2");
+MODULE_VERSION("0.4.3");
 MODULE_LICENSE("GPL");
diff --git a/include/linux/ddcci.h b/include/linux/ddcci.h
index a219f031e..f847c2279 100644
--- a/include/linux/ddcci.h
+++ b/include/linux/ddcci.h
@@ -17,6 +17,12 @@
 #include <linux/mod_devicetable.h>
 #include <linux/device.h>
 #include <linux/cdev.h>
+#include <linux/version.h>
+#if LINUX_VERSION_CODE >= KERNEL_VERSION(6, 2, 0)
+#define CSTRUCT const struct
+#else
+#define CSTRUCT struct
+#endif
 
 #define DDCCI_MODULE_PREFIX "ddcci:"
 
@@ -132,7 +138,7 @@ int ddcci_register_driver(struct module *owner, struct ddcci_driver *driver);
 	ddcci_register_driver(THIS_MODULE, driver)
 void ddcci_del_driver(struct ddcci_driver *driver);
 
-struct ddcci_device *ddcci_verify_device(struct device *dev);
+struct ddcci_device *ddcci_verify_device(CSTRUCT device *dev);
 
 #define module_ddcci_driver(__ddcci_driver) \
 	module_driver(__ddcci_driver, ddcci_add_driver, \
-- 
2.42.0.rc0.25.ga82fb66fed

