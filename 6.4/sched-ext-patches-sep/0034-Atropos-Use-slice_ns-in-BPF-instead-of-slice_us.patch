From 857f2af715bdb9c625088d8bae1243a13bce1fc7 Mon Sep 17 00:00:00 2001
From: David Vernet <void@manifault.com>
Date: Thu, 13 Apr 2023 18:10:39 -0500
Subject: [PATCH 34/39] Atropos: Use slice_ns in BPF instead of slice_us

Atropos takes a slice_us command line parameter to tune the scheduler's
slice length. This value is passed directly to BPF, where we always
multiply the value by 1000. To simplify the BPF code, we can just make
the variable slice_ns in BPF, and multiply it by 1000 in rust when the
program is first opened.

Signed-off-by: David Vernet <void@manifault.com>
---
 tools/sched_ext/atropos/src/bpf/atropos.bpf.c | 10 +++++-----
 tools/sched_ext/atropos/src/main.rs           |  2 +-
 2 files changed, 6 insertions(+), 6 deletions(-)

diff --git a/tools/sched_ext/atropos/src/bpf/atropos.bpf.c b/tools/sched_ext/atropos/src/bpf/atropos.bpf.c
index 3905a403e..18df15ab1 100644
--- a/tools/sched_ext/atropos/src/bpf/atropos.bpf.c
+++ b/tools/sched_ext/atropos/src/bpf/atropos.bpf.c
@@ -66,7 +66,7 @@ const volatile bool switch_partial;
 const volatile __u32 greedy_threshold;
 
 /* base slice duration */
-const volatile __u64 slice_us = 20000;
+const volatile __u64 slice_ns = SCX_SLICE_DFL;
 
 /*
  * Exit info
@@ -340,12 +340,12 @@ void BPF_STRUCT_OPS(atropos_enqueue, struct task_struct *p, u32 enq_flags)
 
 	if (task_ctx->dispatch_local) {
 		task_ctx->dispatch_local = false;
-		scx_bpf_dispatch(p, SCX_DSQ_LOCAL, slice_us * 1000, enq_flags);
+		scx_bpf_dispatch(p, SCX_DSQ_LOCAL, slice_ns, enq_flags);
 		return;
 	}
 
 	if (fifo_sched) {
-		scx_bpf_dispatch(p, task_ctx->dom_id, slice_us * 1000,
+		scx_bpf_dispatch(p, task_ctx->dom_id, slice_ns,
 				 enq_flags);
 	} else {
 		u64 vtime = p->scx.dsq_vtime;
@@ -362,8 +362,8 @@ void BPF_STRUCT_OPS(atropos_enqueue, struct task_struct *p, u32 enq_flags)
 		 * Limit the amount of budget that an idling task can accumulate
 		 * to one slice.
 		 */
-		if (vtime_before(vtime, domc->vtime_now - slice_us * 1000))
-			vtime = domc->vtime_now - slice_us * 1000;
+		if (vtime_before(vtime, domc->vtime_now - slice_ns))
+			vtime = domc->vtime_now - slice_ns;
 
 		scx_bpf_dispatch_vtime(p, task_ctx->dom_id, SCX_SLICE_DFL, vtime,
 				       enq_flags);
diff --git a/tools/sched_ext/atropos/src/main.rs b/tools/sched_ext/atropos/src/main.rs
index 0d313662f..ebf8ba35c 100644
--- a/tools/sched_ext/atropos/src/main.rs
+++ b/tools/sched_ext/atropos/src/main.rs
@@ -658,7 +658,7 @@ impl<'a> Scheduler<'a> {
             );
         }
 
-        skel.rodata().slice_us = opts.slice_us;
+        skel.rodata().slice_ns = opts.slice_us * 1000;
         skel.rodata().kthreads_local = opts.kthreads_local;
         skel.rodata().fifo_sched = opts.fifo_sched;
         skel.rodata().switch_partial = opts.partial;
-- 
2.41.0

