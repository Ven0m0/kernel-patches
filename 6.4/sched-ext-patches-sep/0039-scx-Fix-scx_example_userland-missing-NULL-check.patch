From 19e63f4ce3128e7d39237803b4d215582387bb9c Mon Sep 17 00:00:00 2001
From: David Vernet <void@manifault.com>
Date: Thu, 11 May 2023 10:28:33 -0500
Subject: [PATCH 39/39] scx: Fix scx_example_userland missing NULL check

In commit d02c48fa1139 ("bpf: Make struct task_struct an RCU-safe
type"), bpf_task_acquire() was updated to be KF_RET_NULL. Eishun pointed
out that the userland example scheduler no longer loads, and it's
because the usersched_task() helper function in scx_example_userland
originally used bpf_get_current_task_btf() to avoid having to do a NULL
check in the caller, but this no longer works due to bpf_task_acquire()
being NULL-able. Let's just remove that weird logic that used
bpf_get_current_task_btf(). When bpf_assert() lands, we can just use
that to simplify instead.

Fixes issue #9

Signed-off-by: David Vernet <void@manifault.com>
---
 tools/sched_ext/scx_example_userland.bpf.c | 17 +++++------------
 1 file changed, 5 insertions(+), 12 deletions(-)

diff --git a/tools/sched_ext/scx_example_userland.bpf.c b/tools/sched_ext/scx_example_userland.bpf.c
index a089bc6bb..c28c1099d 100644
--- a/tools/sched_ext/scx_example_userland.bpf.c
+++ b/tools/sched_ext/scx_example_userland.bpf.c
@@ -97,17 +97,8 @@ static struct task_struct *usersched_task(void)
 	 * Should never happen -- the usersched task should always be managed
 	 * by sched_ext.
 	 */
-	if (!p) {
+	if (!p)
 		scx_bpf_error("Failed to find usersched task %d", usersched_pid);
-		/*
-		 * We should never hit this path, and we error out of the
-		 * scheduler above just in case, so the scheduler will soon be
-		 * be evicted regardless. So as to simplify the logic in the
-		 * caller to not have to check for NULL, return an acquired
-		 * reference to the current task here rather than NULL.
-		 */
-		return bpf_task_acquire(bpf_get_current_task_btf());
-	}
 
 	return p;
 }
@@ -147,8 +138,10 @@ static void dispatch_user_scheduler(void)
 
 	usersched_needed = false;
 	p = usersched_task();
-	scx_bpf_dispatch(p, SCX_DSQ_GLOBAL, SCX_SLICE_DFL, 0);
-	bpf_task_release(p);
+	if (p) {
+		scx_bpf_dispatch(p, SCX_DSQ_GLOBAL, SCX_SLICE_DFL, 0);
+		bpf_task_release(p);
+	}
 }
 
 static void enqueue_task_in_user_space(struct task_struct *p, u64 enq_flags)
-- 
2.41.0

