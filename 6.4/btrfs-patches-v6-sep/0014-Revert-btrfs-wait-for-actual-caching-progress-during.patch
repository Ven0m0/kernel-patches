From 6687eb289dd5b250875dfde9d4b8d66714099dfc Mon Sep 17 00:00:00 2001
From: Piotr Gorski <lucjan.lucjanov@gmail.com>
Date: Tue, 8 Aug 2023 16:11:59 +0200
Subject: [PATCH 14/15] Revert "btrfs: wait for actual caching progress during
 allocation"

This reverts commit 1a1e98b41ab3bfd18ce65caae25fb742680d8587.

Signed-off-by: Piotr Gorski <lucjan.lucjanov@gmail.com>
---
 fs/btrfs/block-group.c | 17 ++---------------
 fs/btrfs/block-group.h |  2 --
 2 files changed, 2 insertions(+), 17 deletions(-)

diff --git a/fs/btrfs/block-group.c b/fs/btrfs/block-group.c
index 939bfd036..152b3ec91 100644
--- a/fs/btrfs/block-group.c
+++ b/fs/btrfs/block-group.c
@@ -441,23 +441,13 @@ void btrfs_wait_block_group_cache_progress(struct btrfs_block_group *cache,
 					   u64 num_bytes)
 {
 	struct btrfs_caching_control *caching_ctl;
-	int progress;
 
 	caching_ctl = btrfs_get_caching_control(cache);
 	if (!caching_ctl)
 		return;
 
-	/*
-	 * We've already failed to allocate from this block group, so even if
-	 * there's enough space in the block group it isn't contiguous enough to
-	 * allow for an allocation, so wait for at least the next wakeup tick,
-	 * or for the thing to be done.
-	 */
-	progress = atomic_read(&caching_ctl->progress);
-
 	wait_event(caching_ctl->wait, btrfs_block_group_done(cache) ||
-		   (progress != atomic_read(&caching_ctl->progress) &&
-		    (cache->free_space_ctl->free_space >= num_bytes)));
+		   (cache->free_space_ctl->free_space >= num_bytes));
 
 	btrfs_put_caching_control(caching_ctl);
 }
@@ -799,10 +789,8 @@ static int load_extent_tree_free(struct btrfs_caching_control *caching_ctl)
 
 			if (total_found > CACHING_CTL_WAKE_UP) {
 				total_found = 0;
-				if (wakeup) {
-					atomic_inc(&caching_ctl->progress);
+				if (wakeup)
 					wake_up(&caching_ctl->wait);
-				}
 			}
 		}
 		path->slots[0]++;
@@ -910,7 +898,6 @@ int btrfs_cache_block_group(struct btrfs_block_group *cache, bool wait)
 	init_waitqueue_head(&caching_ctl->wait);
 	caching_ctl->block_group = cache;
 	refcount_set(&caching_ctl->count, 2);
-	atomic_set(&caching_ctl->progress, 0);
 	btrfs_init_work(&caching_ctl->work, caching_thread, NULL, NULL);
 
 	spin_lock(&cache->lock);
diff --git a/fs/btrfs/block-group.h b/fs/btrfs/block-group.h
index 6cd238955..cc0e4b37d 100644
--- a/fs/btrfs/block-group.h
+++ b/fs/btrfs/block-group.h
@@ -85,8 +85,6 @@ struct btrfs_caching_control {
 	wait_queue_head_t wait;
 	struct btrfs_work work;
 	struct btrfs_block_group *block_group;
-	/* Track progress of caching during allocation. */
-	atomic_t progress;
 	refcount_t count;
 };
 
-- 
2.42.0.rc0.25.ga82fb66fed

