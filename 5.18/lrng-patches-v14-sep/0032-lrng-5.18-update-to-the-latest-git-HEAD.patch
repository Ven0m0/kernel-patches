From db249a9ead434da3ed8485d4c060870e0f47b586 Mon Sep 17 00:00:00 2001
From: Piotr Gorski <lucjan.lucjanov@gmail.com>
Date: Wed, 15 Jun 2022 21:21:42 +0200
Subject: [PATCH 32/39] lrng-5.18: update to the latest git HEAD

Signed-off-by: Piotr Gorski <lucjan.lucjanov@gmail.com>
---
 drivers/char/lrng/lrng_drng_atomic.c          |  5 +-
 drivers/char/lrng/lrng_drng_mgr.c             | 74 ++++++++++++++++---
 drivers/char/lrng/lrng_drng_mgr.h             |  4 +-
 drivers/char/lrng/lrng_es_mgr.c               |  7 +-
 drivers/char/lrng/lrng_es_mgr.h               |  3 +-
 drivers/char/lrng/lrng_interface_dev_common.c | 12 +--
 drivers/char/lrng/lrng_interface_dev_common.h |  5 +-
 .../char/lrng/lrng_interface_random_user.c    |  4 +-
 drivers/char/lrng/lrng_switch.c               | 39 +++++++---
 include/linux/lrng.h                          | 27 +++++++
 10 files changed, 143 insertions(+), 37 deletions(-)

diff --git a/drivers/char/lrng/lrng_drng_atomic.c b/drivers/char/lrng/lrng_drng_atomic.c
index e3a8fece9..8395b00b0 100644
--- a/drivers/char/lrng/lrng_drng_atomic.c
+++ b/drivers/char/lrng/lrng_drng_atomic.c
@@ -72,7 +72,7 @@ void lrng_drng_atomic_seed_drng(struct lrng_drng *regular_drng)
 	 * thus can use the lrng_drng_get function to get random numbers from
 	 * the just freshly seeded DRNG.
 	 */
-	ret = lrng_drng_get(regular_drng, seedbuf, sizeof(seedbuf));
+	ret = lrng_drng_get(regular_drng, seedbuf, sizeof(seedbuf), false);
 
 	if (ret < 0) {
 		pr_warn("Error generating random numbers for atomic DRNG: %d\n",
@@ -121,7 +121,8 @@ void lrng_drng_atomic_seed_es(void)
 	lrng_fill_seed_buffer(&seedbuf, requested_bits);
 	spin_lock_irqsave(&drng->spin_lock, flags);
 	lrng_drng_inject(&lrng_drng_atomic, (u8 *)&seedbuf, sizeof(seedbuf),
-			 lrng_fully_seeded_eb(drng->fully_seeded, &seedbuf),
+			 lrng_fully_seeded(drng->fully_seeded,
+					   lrng_entropy_rate_eb(&seedbuf)),
 			 "atomic");
 	spin_unlock_irqrestore(&drng->spin_lock, flags);
 	lrng_init_ops(&seedbuf);
diff --git a/drivers/char/lrng/lrng_drng_mgr.c b/drivers/char/lrng/lrng_drng_mgr.c
index 4c31cbfc7..d92559177 100644
--- a/drivers/char/lrng/lrng_drng_mgr.c
+++ b/drivers/char/lrng/lrng_drng_mgr.c
@@ -215,24 +215,37 @@ void lrng_drng_inject(struct lrng_drng *drng, const u8 *inbuf, u32 inbuflen,
 	}
 }
 
-/* Perform the seeding of the DRNG with data from entropy source */
-static void lrng_drng_seed_es(struct lrng_drng *drng)
+/*
+ * Perform the seeding of the DRNG with data from entropy source.
+ * The function returns the entropy injected into the DRNG in bits.
+ */
+static u32 lrng_drng_seed_es_unlocked(struct lrng_drng *drng)
 {
 	struct entropy_buf seedbuf __aligned(LRNG_KCAPI_ALIGN);
+	u32 collected_entropy;
 
 	lrng_fill_seed_buffer(&seedbuf,
 			      lrng_get_seed_entropy_osr(drng->fully_seeded));
 
-	mutex_lock(&drng->lock);
+	collected_entropy = lrng_entropy_rate_eb(&seedbuf);
 	lrng_drng_inject(drng, (u8 *)&seedbuf, sizeof(seedbuf),
-			 lrng_fully_seeded_eb(drng->fully_seeded, &seedbuf),
+			 lrng_fully_seeded(drng->fully_seeded,
+					   collected_entropy),
 			 "regular");
-	mutex_unlock(&drng->lock);
 
 	/* Set the seeding state of the LRNG */
 	lrng_init_ops(&seedbuf);
 
 	memzero_explicit(&seedbuf, sizeof(seedbuf));
+
+	return collected_entropy;
+}
+
+static void lrng_drng_seed_es(struct lrng_drng *drng)
+{
+	mutex_lock(&drng->lock);
+	lrng_drng_seed_es_unlocked(drng);
+	mutex_unlock(&drng->lock);
 }
 
 static void lrng_drng_seed(struct lrng_drng *drng)
@@ -346,12 +359,15 @@ static bool lrng_drng_must_reseed(struct lrng_drng *drng)
  * @drng: DRNG instance
  * @outbuf: buffer for storing random data
  * @outbuflen: length of outbuf
+ * @pr: operate the DRNG with prediction resistance (i.e. reseed from the
+ *	entropy sources and only return the amount bytes for which we have
+ *	received fresh entropy)
  *
  * Return:
  * * < 0 in error case (DRNG generation or update failed)
  * * >=0 returning the returned number of bytes
  */
-int lrng_drng_get(struct lrng_drng *drng, u8 *outbuf, u32 outbuflen)
+int lrng_drng_get(struct lrng_drng *drng, u8 *outbuf, u32 outbuflen, bool pr)
 {
 	u32 processed = 0;
 
@@ -382,6 +398,33 @@ int lrng_drng_get(struct lrng_drng *drng, u8 *outbuf, u32 outbuflen)
 		}
 
 		mutex_lock(&drng->lock);
+
+		/*
+		 * Handle the prediction resistance: force a reseed and
+		 * only generate the amount of data that was seeded. Note,
+		 * esdm_drng_seed_es returns the entropy amount in bits, but
+		 * we operate here in bytes.
+		 */
+		if (pr) {
+			u32 collected_entropy_bits;
+
+			/* If ESDM is not operational, PR is not possible. */
+			if (!lrng_state_operational()) {
+				mutex_unlock(&drng->lock);
+				goto out;
+			}
+
+			collected_entropy_bits =
+				lrng_drng_seed_es_unlocked(drng);
+
+			/* If no new entropy was received, stop now. */
+			if (!collected_entropy_bits) {
+				mutex_unlock(&drng->lock);
+				goto out;
+			}
+
+			todo = min_t(u32, todo, collected_entropy_bits >> 3);
+		}
 		ret = drng->drng_cb->drng_generate(drng->drng,
 						   outbuf + processed, todo);
 		mutex_unlock(&drng->lock);
@@ -392,12 +435,16 @@ int lrng_drng_get(struct lrng_drng *drng, u8 *outbuf, u32 outbuflen)
 		}
 		processed += ret;
 		outbuflen -= ret;
+
+		if (pr && outbuflen)
+			cond_resched();
 	}
 
+out:
 	return processed;
 }
 
-int lrng_drng_get_sleep(u8 *outbuf, u32 outbuflen)
+int lrng_drng_get_sleep(u8 *outbuf, u32 outbuflen, bool pr)
 {
 	struct lrng_drng **lrng_drng = lrng_drng_instances();
 	struct lrng_drng *drng = &lrng_drng_init;
@@ -412,7 +459,7 @@ int lrng_drng_get_sleep(u8 *outbuf, u32 outbuflen)
 	if (ret)
 		return ret;
 
-	return lrng_drng_get(drng, outbuf, outbuflen);
+	return lrng_drng_get(drng, outbuf, outbuflen, pr);
 }
 
 /* Reset LRNG such that all existing entropy is gone */
@@ -473,13 +520,20 @@ int lrng_drng_sleep_while_non_min_seeded(void)
 void lrng_get_random_bytes_full(void *buf, int nbytes)
 {
 	lrng_drng_sleep_while_nonoperational(0);
-	lrng_drng_get_sleep((u8 *)buf, (u32)nbytes);
+	lrng_drng_get_sleep((u8 *)buf, (u32)nbytes, false);
 }
 EXPORT_SYMBOL(lrng_get_random_bytes_full);
 
 void lrng_get_random_bytes_min(void *buf, int nbytes)
 {
 	lrng_drng_sleep_while_non_min_seeded();
-	lrng_drng_get_sleep((u8 *)buf, (u32)nbytes);
+	lrng_drng_get_sleep((u8 *)buf, (u32)nbytes, false);
 }
 EXPORT_SYMBOL(lrng_get_random_bytes_min);
+
+int lrng_get_random_bytes_pr(void *buf, int nbytes)
+{
+	lrng_drng_sleep_while_nonoperational(0);
+	return lrng_drng_get_sleep((u8 *)buf, (u32)nbytes, true);
+}
+EXPORT_SYMBOL(lrng_get_random_bytes_pr);
diff --git a/drivers/char/lrng/lrng_drng_mgr.h b/drivers/char/lrng/lrng_drng_mgr.h
index 34ca5913d..3eb20e705 100644
--- a/drivers/char/lrng/lrng_drng_mgr.h
+++ b/drivers/char/lrng/lrng_drng_mgr.h
@@ -62,10 +62,10 @@ bool lrng_get_available(void);
 void lrng_drng_reset(struct lrng_drng *drng);
 void lrng_drng_inject(struct lrng_drng *drng, const u8 *inbuf, u32 inbuflen,
 		      bool fully_seeded, const char *drng_type);
-int lrng_drng_get(struct lrng_drng *drng, u8 *outbuf, u32 outbuflen);
+int lrng_drng_get(struct lrng_drng *drng, u8 *outbuf, u32 outbuflen, bool pr);
 int lrng_drng_sleep_while_nonoperational(int nonblock);
 int lrng_drng_sleep_while_non_min_seeded(void);
-int lrng_drng_get_sleep(u8 *outbuf, u32 outbuflen);
+int lrng_drng_get_sleep(u8 *outbuf, u32 outbuflen, bool pr);
 void lrng_drng_seed_work(struct work_struct *dummy);
 void lrng_drng_force_reseed(void);
 
diff --git a/drivers/char/lrng/lrng_es_mgr.c b/drivers/char/lrng/lrng_es_mgr.c
index 7e644bf04..510c35a02 100644
--- a/drivers/char/lrng/lrng_es_mgr.c
+++ b/drivers/char/lrng/lrng_es_mgr.c
@@ -170,20 +170,19 @@ static void lrng_init_wakeup(void)
 	lrng_init_wakeup_dev();
 }
 
-static bool lrng_fully_seeded(bool fully_seeded, u32 collected_entropy)
+bool lrng_fully_seeded(bool fully_seeded, u32 collected_entropy)
 {
 	return (collected_entropy >= lrng_get_seed_entropy_osr(fully_seeded));
 }
 
-/* Policy to check whether entropy buffer contains full seeded entropy */
-bool lrng_fully_seeded_eb(bool fully_seeded, struct entropy_buf *eb)
+u32 lrng_entropy_rate_eb(struct entropy_buf *eb)
 {
 	u32 i, collected_entropy = 0;
 
 	for_each_lrng_es(i)
 		collected_entropy += eb->e_bits[i];
 
-	return lrng_fully_seeded(fully_seeded, collected_entropy);
+	return collected_entropy;
 }
 
 /* Mark one DRNG as not fully seeded */
diff --git a/drivers/char/lrng/lrng_es_mgr.h b/drivers/char/lrng/lrng_es_mgr.h
index 30b81a570..877698dba 100644
--- a/drivers/char/lrng/lrng_es_mgr.h
+++ b/drivers/char/lrng/lrng_es_mgr.h
@@ -40,7 +40,8 @@ int lrng_pool_trylock(void);
 void lrng_pool_unlock(void);
 void lrng_pool_all_numa_nodes_seeded(bool set);
 
-bool lrng_fully_seeded_eb(bool fully_seeded, struct entropy_buf *eb);
+bool lrng_fully_seeded(bool fully_seeded, u32 collected_entropy);
+u32 lrng_entropy_rate_eb(struct entropy_buf *eb);
 void lrng_unset_fully_seeded(struct lrng_drng *drng);
 void lrng_fill_seed_buffer(struct entropy_buf *eb, u32 requested_bits);
 void lrng_init_ops(struct entropy_buf *eb);
diff --git a/drivers/char/lrng/lrng_interface_dev_common.c b/drivers/char/lrng/lrng_interface_dev_common.c
index da4258749..c366b29fe 100644
--- a/drivers/char/lrng/lrng_interface_dev_common.c
+++ b/drivers/char/lrng/lrng_interface_dev_common.c
@@ -79,7 +79,7 @@ void lrng_state_exseed_allow_all(void)
 
 /************************ LRNG user output interfaces *************************/
 
-ssize_t lrng_read_common(char __user *buf, size_t nbytes)
+ssize_t lrng_read_common(char __user *buf, size_t nbytes, bool pr)
 {
 	ssize_t ret = 0;
 	u8 tmpbuf[LRNG_DRNG_BLOCKSIZE] __aligned(LRNG_KCAPI_ALIGN);
@@ -117,7 +117,7 @@ ssize_t lrng_read_common(char __user *buf, size_t nbytes)
 			schedule();
 		}
 
-		rc = lrng_drng_get_sleep(tmp, todo);
+		rc = lrng_drng_get_sleep(tmp, todo, pr);
 		if (rc <= 0) {
 			if (rc < 0)
 				ret = rc;
@@ -142,7 +142,8 @@ ssize_t lrng_read_common(char __user *buf, size_t nbytes)
 	return ret;
 }
 
-ssize_t lrng_read_common_block(int nonblock, char __user *buf, size_t nbytes)
+ssize_t lrng_read_common_block(int nonblock, int pr,
+			       char __user *buf, size_t nbytes)
 {
 	int ret;
 
@@ -153,13 +154,14 @@ ssize_t lrng_read_common_block(int nonblock, char __user *buf, size_t nbytes)
 	if (ret)
 		return ret;
 
-	return lrng_read_common(buf, nbytes);
+	return lrng_read_common(buf, nbytes, !!pr);
 }
 
 ssize_t lrng_drng_read_block(struct file *file, char __user *buf, size_t nbytes,
 			     loff_t *ppos)
 {
-	return lrng_read_common_block(file->f_flags & O_NONBLOCK, buf, nbytes);
+	return lrng_read_common_block(file->f_flags & O_NONBLOCK,
+				      file->f_flags & O_SYNC, buf, nbytes);
 }
 
 __poll_t lrng_random_poll(struct file *file, poll_table *wait)
diff --git a/drivers/char/lrng/lrng_interface_dev_common.h b/drivers/char/lrng/lrng_interface_dev_common.h
index 87cf50464..2f1aa8567 100644
--- a/drivers/char/lrng/lrng_interface_dev_common.h
+++ b/drivers/char/lrng/lrng_interface_dev_common.h
@@ -38,10 +38,11 @@ ssize_t lrng_drng_write(struct file *file, const char __user *buffer,
 ssize_t lrng_drng_write_common(const char __user *buffer, size_t count,
 			       u32 entropy_bits);
 __poll_t lrng_random_poll(struct file *file, poll_table *wait);
-ssize_t lrng_read_common_block(int nonblock, char __user *buf, size_t nbytes);
+ssize_t lrng_read_common_block(int nonblock, int pr,
+			       char __user *buf, size_t nbytes);
 ssize_t lrng_drng_read_block(struct file *file, char __user *buf, size_t nbytes,
 			     loff_t *ppos);
-ssize_t lrng_read_common(char __user *buf, size_t nbytes);
+ssize_t lrng_read_common(char __user *buf, size_t nbytes, bool pr);
 bool lrng_need_entropy(void);
 
 extern struct wait_queue_head lrng_write_wait;
diff --git a/drivers/char/lrng/lrng_interface_random_user.c b/drivers/char/lrng/lrng_interface_random_user.c
index 7e45f41b7..0565ba7a3 100644
--- a/drivers/char/lrng/lrng_interface_random_user.c
+++ b/drivers/char/lrng/lrng_interface_random_user.c
@@ -24,7 +24,7 @@ static ssize_t lrng_drng_read(struct file *file, char __user *buf,
 		pr_debug_ratelimited("%s - use of not fully seeded DRNG (%zu bytes read)\n",
 				     current->comm, nbytes);
 
-	return lrng_read_common(buf, nbytes);
+	return lrng_read_common(buf, nbytes, false);
 }
 
 const struct file_operations random_fops = {
@@ -66,5 +66,5 @@ SYSCALL_DEFINE3(getrandom, char __user *, buf, size_t, count,
 	if (flags & GRND_INSECURE)
 		return lrng_drng_read(NULL, buf, count, NULL);
 
-	return lrng_read_common_block(flags & GRND_NONBLOCK, buf, count);
+	return lrng_read_common_block(flags & GRND_NONBLOCK, 0, buf, count);
 }
diff --git a/drivers/char/lrng/lrng_switch.c b/drivers/char/lrng/lrng_switch.c
index 5ffc0286a..2efffcb5f 100644
--- a/drivers/char/lrng/lrng_switch.c
+++ b/drivers/char/lrng/lrng_switch.c
@@ -174,6 +174,32 @@ static int lrng_switch(const void *cb,
 	return 0;
 }
 
+/* Reset LRNG such that all existing entropy is gone */
+static const struct lrng_drng_cb *lrng_drng_cb = NULL;
+static void lrng_set_drng_cb_workfn(struct work_struct *work)
+{
+	if (!lrng_drng_cb)
+		return;
+
+	/*
+	 * Wait until the LRNG becomes operational. The reason is that
+	 * an SP800-90A DRBG shall be fully initialized with full entropy.
+	 * This is only present when the LRNG is fully initialized.
+	 */
+	lrng_drng_sleep_while_nonoperational(0);
+	lrng_switch(lrng_drng_cb, lrng_drng_switch);
+
+	/* The swtich may imply new entropy due to larger DRNG sec strength. */
+	if (!lrng_switch(lrng_drng_cb, lrng_drng_switch))
+		lrng_es_add_entropy();
+
+	lrng_drng_cb = NULL;
+
+	mutex_unlock(&lrng_crypto_cb_update);
+}
+
+static DECLARE_WORK(lrng_set_drng_cb_work, lrng_set_drng_cb_workfn);
+
 /*
  * lrng_set_drng_cb - Register new cryptographic callback functions for DRNG
  * The registering implies that all old DRNG states are replaced with new
@@ -211,17 +237,12 @@ int lrng_set_drng_cb(const struct lrng_drng_cb *drng_cb)
 	if ((drng_cb != lrng_default_drng_cb) &&
 	    (lrng_drng_init->drng_cb != lrng_default_drng_cb)) {
 		pr_warn("disallow setting new DRNG callbacks, unload the old callbacks first!\n");
-		ret = -EINVAL;
-		goto out;
+		mutex_unlock(&lrng_crypto_cb_update);
+		return -EINVAL;
 	}
 
-	ret = lrng_switch(drng_cb, lrng_drng_switch);
-	/* The swtich may imply new entropy due to larger DRNG sec strength. */
-	if (!ret)
-		lrng_es_add_entropy();
-
-out:
-	mutex_unlock(&lrng_crypto_cb_update);
+	lrng_drng_cb = drng_cb;
+	schedule_work(&lrng_set_drng_cb_work);
 	return ret;
 }
 EXPORT_SYMBOL(lrng_set_drng_cb);
diff --git a/include/linux/lrng.h b/include/linux/lrng.h
index 32873352c..8ec50ac7d 100644
--- a/include/linux/lrng.h
+++ b/include/linux/lrng.h
@@ -147,4 +147,31 @@ void lrng_get_random_bytes_full(void *buf, int nbytes);
 void lrng_get_random_bytes_min(void *buf, int nbytes);
 #endif
 
+/*
+ * lrng_get_random_bytes_pr() - Provider of cryptographic strong
+ * random numbers for kernel-internal usage from a fully initialized LRNG and
+ * requiring a reseed from the entropy sources before.
+ *
+ * This function will always return random numbers from a fully seeded and
+ * fully initialized LRNG.
+ *
+ * This function is appropriate only for non-atomic use cases as this
+ * function may sleep. It provides access to the full functionality of LRNG
+ * including the switchable DRNG support, that may support other DRNGs such
+ * as the SP800-90A DRBG.
+ *
+ * This call only returns no more data than entropy was pulled from the
+ * entropy sources. Thus, it is likely that this call returns less data
+ * than requested by the caller. Also, the caller MUST be prepared that this
+ * call returns 0 bytes, i.e. it did not generate data.
+ *
+ * @buf: buffer to store the random bytes
+ * @nbytes: size of the buffer
+ *
+ * @return: positive number indicates amount of generated bytes, < 0 on error
+ */
+#ifdef CONFIG_LRNG
+int lrng_get_random_bytes_pr(void *buf, int nbytes);
+#endif
+
 #endif /* _LRNG_H */
-- 
2.37.0.rc0.15.g3b9a5a33c2

