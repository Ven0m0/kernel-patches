From 944e97ae9e3e5b435a22c4db6a80c3ef3ddb46d3 Mon Sep 17 00:00:00 2001
From: Piotr Gorski <lucjan.lucjanov@gmail.com>
Date: Sun, 3 Jul 2022 11:53:50 +0200
Subject: [PATCH 39/39] lrng-5.18: merge changes from dev tree

Signed-off-by: Piotr Gorski <lucjan.lucjanov@gmail.com>
---
 drivers/char/lrng/lrng_drng_mgr.c | 13 ++++++++++++-
 1 file changed, 12 insertions(+), 1 deletion(-)

diff --git a/drivers/char/lrng/lrng_drng_mgr.c b/drivers/char/lrng/lrng_drng_mgr.c
index 78739ef94..54f346ae8 100644
--- a/drivers/char/lrng/lrng_drng_mgr.c
+++ b/drivers/char/lrng/lrng_drng_mgr.c
@@ -458,7 +458,18 @@ int lrng_drng_get(struct lrng_drng *drng, u8 *outbuf, u32 outbuflen, bool pr)
 
 		/*
 		 * In FIPS mode according to IG 7.19, force a reseed after
-		 * generating data as conditioning component.
+		 * generating data as conditioning component. When setting
+		 * ->force_reseed = true, it is possible that the subsequent
+		 * reseed may fail if insufficient entropy is available but yet
+		 * random bits are generated. We accept this potential issue
+		 * as bullet-proof solution would be to invoke
+		 * lrng_unset_fully_seeded(drng) which is an easy DoS vector.
+		 * This function would then imply that the respective DRNG
+		 * instance is not usable until a reseed happened. If this is
+		 * the initial DRNG, the entire LRNG goes back to
+		 * non-operational mode, which is the DoS. The other solution
+		 * would be to instantiate a separate DRNG for PR, which is
+		 * a waste.
 		 */
 		if (pr && lrng_sp80090c_compliant())
 			drng->force_reseed = true;
-- 
2.37.0.rc0.15.g3b9a5a33c2

