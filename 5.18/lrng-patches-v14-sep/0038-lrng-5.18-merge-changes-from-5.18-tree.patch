From fecab60fecba568c9feef81c31b1981f10494c73 Mon Sep 17 00:00:00 2001
From: Piotr Gorski <lucjan.lucjanov@gmail.com>
Date: Thu, 30 Jun 2022 09:11:25 +0200
Subject: [PATCH 38/39] lrng-5.18: merge changes from 5.18 tree

Signed-off-by: Piotr Gorski <lucjan.lucjanov@gmail.com>
---
 drivers/char/lrng/lrng_drng_mgr.c | 21 ++++++---------------
 drivers/char/lrng/lrng_switch.c   | 13 ++++++++++---
 2 files changed, 16 insertions(+), 18 deletions(-)

diff --git a/drivers/char/lrng/lrng_drng_mgr.c b/drivers/char/lrng/lrng_drng_mgr.c
index eec738740..78739ef94 100644
--- a/drivers/char/lrng/lrng_drng_mgr.c
+++ b/drivers/char/lrng/lrng_drng_mgr.c
@@ -225,7 +225,7 @@ void lrng_drng_inject(struct lrng_drng *drng, const u8 *inbuf, u32 inbuflen,
  * Perform the seeding of the DRNG with data from entropy source.
  * The function returns the entropy injected into the DRNG in bits.
  */
-static u32 lrng_drng_seed_es_unlocked(struct lrng_drng *drng)
+static u32 lrng_drng_seed_es_nolock(struct lrng_drng *drng)
 {
 	struct entropy_buf seedbuf __aligned(LRNG_KCAPI_ALIGN);
 	u32 collected_entropy;
@@ -250,7 +250,7 @@ static u32 lrng_drng_seed_es_unlocked(struct lrng_drng *drng)
 static void lrng_drng_seed_es(struct lrng_drng *drng)
 {
 	mutex_lock(&drng->lock);
-	lrng_drng_seed_es_unlocked(drng);
+	lrng_drng_seed_es_nolock(drng);
 	mutex_unlock(&drng->lock);
 }
 
@@ -394,7 +394,8 @@ int lrng_drng_get(struct lrng_drng *drng, u8 *outbuf, u32 outbuflen, bool pr)
 		u32 todo = min_t(u32, outbuflen, LRNG_DRNG_MAX_REQSIZE);
 		int ret;
 
-		if (lrng_drng_must_reseed(drng)) {
+		/* In normal operation, check whether to reseed */
+		if (!pr && lrng_drng_must_reseed(drng)) {
 			if (lrng_pool_trylock()) {
 				drng->force_reseed = true;
 			} else {
@@ -426,8 +427,7 @@ int lrng_drng_get(struct lrng_drng *drng, u8 *outbuf, u32 outbuflen, bool pr)
 				continue;
 			}
 
-			collected_entropy_bits =
-				lrng_drng_seed_es_unlocked(drng);
+			collected_entropy_bits = lrng_drng_seed_es_nolock(drng);
 
 			lrng_pool_unlock();
 
@@ -472,17 +472,8 @@ int lrng_drng_get(struct lrng_drng *drng, u8 *outbuf, u32 outbuflen, bool pr)
 		processed += ret;
 		outbuflen -= ret;
 
-		if (pr && outbuflen) {
-			/*
-			 * In FIPS mode, be compliant to FIPS IG 7.19, at most
-			 * only the security strength bits of data are allowed
-			 * to be generated. Thus the processing stops here.
-			 */
-			if (lrng_sp80090c_compliant())
-				goto out;
-
+		if (pr && outbuflen)
 			cond_resched();
-		}
 	}
 
 out:
diff --git a/drivers/char/lrng/lrng_switch.c b/drivers/char/lrng/lrng_switch.c
index 5ffc0286a..324351d87 100644
--- a/drivers/char/lrng/lrng_switch.c
+++ b/drivers/char/lrng/lrng_switch.c
@@ -11,6 +11,7 @@
 
 #include "lrng_es_aux.h"
 #include "lrng_es_mgr.h"
+#include "lrng_interface_dev_common.h"
 #include "lrng_numa.h"
 
 static int __maybe_unused
@@ -216,7 +217,7 @@ int lrng_set_drng_cb(const struct lrng_drng_cb *drng_cb)
 	}
 
 	ret = lrng_switch(drng_cb, lrng_drng_switch);
-	/* The swtich may imply new entropy due to larger DRNG sec strength. */
+	/* The switch may imply new entropy due to larger DRNG sec strength. */
 	if (!ret)
 		lrng_es_add_entropy();
 
@@ -260,9 +261,15 @@ int lrng_set_hash_cb(const struct lrng_hash_cb *hash_cb)
 	}
 
 	ret = lrng_switch(hash_cb, lrng_hash_switch);
-	/* The swtich may imply new entropy due to larger digest size. */
-	if (!ret)
+	/*
+	 * The switch may imply new entropy due to larger digest size. But
+	 * it may also offer more room in the aux pool which means we ping
+	 * any waiting entropy providers.
+	 */
+	if (!ret) {
 		lrng_es_add_entropy();
+		lrng_writer_wakeup();
+	}
 
 out:
 	mutex_unlock(&lrng_crypto_cb_update);
-- 
2.37.0.rc0.15.g3b9a5a33c2

