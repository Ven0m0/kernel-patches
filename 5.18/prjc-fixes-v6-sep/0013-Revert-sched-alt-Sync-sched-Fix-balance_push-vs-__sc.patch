From 288ec6931e099e6fb9aebbff4b680976c48b189c Mon Sep 17 00:00:00 2001
From: Piotr Gorski <lucjan.lucjanov@gmail.com>
Date: Mon, 20 Jun 2022 21:08:22 +0200
Subject: [PATCH 13/14] Revert "sched/alt: [Sync]: sched: Fix balance_push() vs
 __sched_setscheduler()"

This reverts commit 0195a817aa1a3776c2ec010269381df03aee2642.

Signed-off-by: Piotr Gorski <lucjan.lucjanov@gmail.com>
---
 kernel/sched/alt_core.c | 38 ++++----------------------------------
 1 file changed, 4 insertions(+), 34 deletions(-)

diff --git a/kernel/sched/alt_core.c b/kernel/sched/alt_core.c
index 389ef30c5..6edebf268 100644
--- a/kernel/sched/alt_core.c
+++ b/kernel/sched/alt_core.c
@@ -3361,56 +3361,26 @@ static void do_balance_callbacks(struct rq *rq, struct callback_head *head)
 
 static void balance_push(struct rq *rq);
 
-/*
- * balance_push_callback is a right abuse of the callback interface and plays
- * by significantly different rules.
- *
- * Where the normal balance_callback's purpose is to be ran in the same context
- * that queued it (only later, when it's safe to drop rq->lock again),
- * balance_push_callback is specifically targeted at __schedule().
- *
- * This abuse is tolerated because it places all the unlikely/odd cases behind
- * a single test, namely: rq->balance_callback == NULL.
- */
 struct callback_head balance_push_callback = {
 	.next = NULL,
 	.func = (void (*)(struct callback_head *))balance_push,
 };
 
-static inline struct callback_head *
-__splice_balance_callbacks(struct rq *rq, bool split)
+static inline struct callback_head *splice_balance_callbacks(struct rq *rq)
 {
 	struct callback_head *head = rq->balance_callback;
 
-	if (likely(!head))
-		return NULL;
-
-	lockdep_assert_held(&rq->lock);
-	/*
-	 * Must not take balance_push_callback off the list when
-	 * splice_balance_callbacks() and balance_callbacks() are not
-	 * in the same rq->lock section.
-	 *
-	 * In that case it would be possible for __schedule() to interleave
-	 * and observe the list empty.
-	 */
-	if (split && head == &balance_push_callback)
-		head = NULL;
-	else
+	if (head) {
+		lockdep_assert_held(&rq->lock);
 		rq->balance_callback = NULL;
 	}
 
 	return head;
 }
 
-static inline struct callback_head *splice_balance_callbacks(struct rq *rq)
-{
-	return __splice_balance_callbacks(rq, true);
-}
-
 static void __balance_callbacks(struct rq *rq)
 {
-	do_balance_callbacks(rq, __splice_balance_callbacks(rq, false));
+	do_balance_callbacks(rq, splice_balance_callbacks(rq));
 }
 
 static inline void balance_callbacks(struct rq *rq, struct callback_head *head)
-- 
2.37.0.rc0.15.g3b9a5a33c2

