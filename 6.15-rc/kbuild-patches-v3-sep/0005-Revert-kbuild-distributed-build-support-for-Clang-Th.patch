From c378c09b8d79d608dd11e78ed1e97b82c7dd4f3a Mon Sep 17 00:00:00 2001
From: Eric Naim <dnaim@cachyos.org>
Date: Thu, 22 May 2025 13:43:52 +0800
Subject: [PATCH 5/7] Revert "kbuild: distributed build support for Clang
 ThinLTO"

This reverts commit 46283ff7f83391d121ea4cae5024b7729a540f69.

Signed-off-by: Eric Naim <dnaim@cachyos.org>
---
 .gitignore                        |  2 --
 MAINTAINERS                       |  5 ---
 Makefile                          | 40 +++--------------------
 arch/Kconfig                      | 19 -----------
 scripts/Makefile.build            | 52 +++---------------------------
 scripts/Makefile.lib              |  7 +---
 scripts/Makefile.vmlinux_o        | 16 +++-------
 scripts/Makefile.vmlinux_thinlink | 53 -------------------------------
 scripts/head-object-list.txt      |  1 -
 9 files changed, 15 insertions(+), 180 deletions(-)
 delete mode 100644 scripts/Makefile.vmlinux_thinlink

diff --git a/.gitignore b/.gitignore
index 4ac419503..f2f63e47f 100644
--- a/.gitignore
+++ b/.gitignore
@@ -12,7 +12,6 @@
 #
 .*
 *.a
-*.a.thinlto_native
 *.asn1.[ch]
 *.bin
 *.bz2
@@ -65,7 +64,6 @@ modules.order
 /vmlinux
 /vmlinux.32
 /vmlinux.map
-/vmlinux.thinlink
 /vmlinux.symvers
 /vmlinux.unstripped
 /vmlinux-gdb.py
diff --git a/MAINTAINERS b/MAINTAINERS
index f54090f36..d48dd6726 100644
--- a/MAINTAINERS
+++ b/MAINTAINERS
@@ -5790,11 +5790,6 @@ F:	scripts/Makefile.clang
 F:	scripts/clang-tools/
 K:	\b(?i:clang|llvm)\b
 
-CLANG/LLVM THINLTO DISTRIBUTED BUILD
-M:	Rong Xu <xur@google.com>
-S:	Supported
-F:	scripts/Makefile.vmlinux_thinlink
-
 CLK API
 M:	Russell King <linux@armlinux.org.uk>
 L:	linux-clk@vger.kernel.org
diff --git a/Makefile b/Makefile
index 0cd8118e1..a9edd0303 100644
--- a/Makefile
+++ b/Makefile
@@ -298,8 +298,7 @@ no-dot-config-targets := $(clean-targets) \
 			 outputmakefile rustavailable rustfmt rustfmtcheck
 no-sync-config-targets := $(no-dot-config-targets) %install modules_sign kernelrelease \
 			  image_name
-single-targets := %.a %.i %.ko %.lds %.ll %.lst %.mod %.o %.rsi %.s %.o.thinlto.native \
-	          %.a.thinlto.native %.o.thinlto.bc %/
+single-targets := %.a %.i %.ko %.lds %.ll %.lst %.mod %.o %.rsi %.s %/
 
 config-build	:=
 mixed-build	:=
@@ -992,10 +991,10 @@ export CC_FLAGS_SCS
 endif
 
 ifdef CONFIG_LTO_CLANG
-ifdef CONFIG_LTO_CLANG_FULL
-CC_FLAGS_LTO	:= -flto
-else # for CONFIG_LTO_CLANG_THIN or CONFIG_LTO_CLANG_THIN_DIST
+ifdef CONFIG_LTO_CLANG_THIN
 CC_FLAGS_LTO	:= -flto=thin -fsplit-lto-unit
+else
+CC_FLAGS_LTO	:= -flto
 endif
 CC_FLAGS_LTO	+= -fvisibility=hidden
 
@@ -1214,34 +1213,8 @@ vmlinux.a: $(KBUILD_VMLINUX_OBJS) scripts/head-object-list.txt FORCE
 	$(call if_changed,ar_vmlinux.a)
 
 PHONY += vmlinux_o
-ifdef CONFIG_LTO_CLANG_THIN_DIST
-vmlinux.thinlink: vmlinux.a $(KBUILD_VMLINUX_LIBS) FORCE
-	$(Q)$(MAKE) -f $(srctree)/scripts/Makefile.vmlinux_thinlink
-targets += vmlinux.thinlink
-
-vmlinux.a.thinlto.native := $(patsubst %.a,%.a.thinlto.native,$(KBUILD_VMLINUX_OBJS))
-quiet_cmd_ar_vmlinux.a.thinlto.native = AR      $@
-      cmd_ar_vmlinux.a.thinlto.native = \
-	rm -f $@; \
-	$(AR) cDPrST $@ $(vmlinux.a.thinlto.native); \
-	$(AR) mPiT $$($(AR) t $@ | sed -n 1p) $@ $$($(AR) t $@ | grep -F -f $(srctree)/scripts/head-object-list.txt)
-
-define rule_gen_vmlinux.a.thinlto.native
-	+$(Q)$(MAKE) $(build)=. need-builtin=1 thinlto_final_pass=1 need-modorder=1 built-in.a.thinlto.native
-	$(call cmd_and_savecmd,ar_vmlinux.a.thinlto.native)
-endef
-
-vmlinux.a.thinlto.native: vmlinux.thinlink scripts/head-object-list.txt FORCE
-	$(call if_changed_rule,gen_vmlinux.a.thinlto.native)
-
-targets += vmlinux.a.thinlto.native
-
-vmlinux_o: vmlinux.a.thinlto.native
-	$(Q)$(MAKE) thinlto_final_pass=1 -f $(srctree)/scripts/Makefile.vmlinux_o
-else
 vmlinux_o: vmlinux.a $(KBUILD_VMLINUX_LIBS)
 	$(Q)$(MAKE) -f $(srctree)/scripts/Makefile.vmlinux_o
-endif
 
 vmlinux.o modules.builtin.modinfo modules.builtin: vmlinux_o
 	@:
@@ -1599,8 +1572,7 @@ CLEAN_FILES += vmlinux.symvers modules-only.symvers \
 	       modules.builtin.ranges vmlinux.o.map vmlinux.unstripped \
 	       compile_commands.json rust/test \
 	       rust-project.json .vmlinux.objs .vmlinux.export.c \
-	       .builtin-dtbs-list .builtin-dtb.S \
-	       .vmlinux_thinlto_bc_files vmlinux.thinlink
+               .builtin-dtbs-list .builtin-dtb.S
 
 # Directories & files removed with 'make mrproper'
 MRPROPER_FILES += include/config include/generated          \
@@ -2051,8 +2023,6 @@ clean: $(clean-dirs)
 		-o -name '*.symtypes' -o -name 'modules.order' \
 		-o -name '*.c.[012]*.*' \
 		-o -name '*.ll' \
-		-o -name '*.a.thinlto.native' -o -name '*.o.thinlto.native' \
-		-o -name '*.o.thinlto.bc' \
 		-o -name '*.gcno' \
 		\) -type f -print \
 		-o -name '.tmp_*' -print \
diff --git a/arch/Kconfig b/arch/Kconfig
index 5ed243ded..b0adb6650 100644
--- a/arch/Kconfig
+++ b/arch/Kconfig
@@ -810,25 +810,6 @@ config LTO_CLANG_THIN
 	    https://clang.llvm.org/docs/ThinLTO.html
 
 	  If unsure, say Y.
-
-config LTO_CLANG_THIN_DIST
-	bool "Clang ThinLTO in distributed mode (EXPERIMENTAL)"
-	depends on HAS_LTO_CLANG && ARCH_SUPPORTS_LTO_CLANG_THIN
-	select LTO_CLANG
-	help
-	  This option enables Clang's ThinLTO in distributed build mode.
-	  In this mode, the linker performs the thin-link, generating
-	  ThinLTO index files. Subsequently, the build system explicitly
-	  invokes ThinLTO backend compilation using these index files
-	  and pre-linked IR objects. The resulting native object files
-	  are with the .o.thinlto.native suffix.
-
-	  This build mode offers improved visibility into the ThinLTO
-	  process through explicit subcommand exposure. It also makes
-	  final native object files directly available, benefiting
-	  tools like objtool and kpatch. Additionally, it provides
-	  crucial granular control over back-end options, enabling
-	  module-specific compiler options, and simplifies debugging.
 endchoice
 
 config ARCH_SUPPORTS_AUTOFDO_CLANG
diff --git a/scripts/Makefile.build b/scripts/Makefile.build
index 49ea3934e..13dcd86e7 100644
--- a/scripts/Makefile.build
+++ b/scripts/Makefile.build
@@ -50,23 +50,18 @@ endif
 
 # ===========================================================================
 
-builtin_suffix := $(if $(filter %.a.thinlto.native, $(MAKECMDGOALS)),.a.thinlto.native,.a)
-ifeq ($(thinlto_final_pass),1)
-builtin_suffix :=.a.thinlto.native
-endif
-
 # subdir-builtin and subdir-modorder may contain duplications. Use $(sort ...)
-subdir-builtin := $(sort $(filter %/built-in$(builtin_suffix), $(real-obj-y)))
+subdir-builtin := $(sort $(filter %/built-in.a, $(real-obj-y)))
 subdir-modorder := $(sort $(filter %/modules.order, $(obj-m)))
 
 targets-for-builtin := $(extra-y)
 
 ifneq ($(strip $(lib-y) $(lib-m) $(lib-)),)
-targets-for-builtin += $(obj)/lib$(builtin_suffix)
+targets-for-builtin += $(obj)/lib.a
 endif
 
 ifdef need-builtin
-targets-for-builtin += $(obj)/built-in$(builtin_suffix)
+targets-for-builtin += $(obj)/built-in.a
 endif
 
 targets-for-modules := $(foreach x, o mod, \
@@ -342,10 +337,6 @@ $(obj)/%.o: $(obj)/%.S FORCE
 targets += $(filter-out $(subdir-builtin), $(real-obj-y))
 targets += $(filter-out $(subdir-modorder), $(real-obj-m))
 targets += $(lib-y) $(always-y)
-ifeq ($(builtin_suffix),.a.thinlto.native)
-native_targets = $(patsubst,%.o,%.o.thinlto.native,$(targets))
-targets += $(native_targets)
-endif
 
 # Linker scripts preprocessor (.lds.S -> .lds)
 # ---------------------------------------------------------------------------
@@ -356,24 +347,6 @@ quiet_cmd_cpp_lds_S = LDS     $@
 $(obj)/%.lds: $(src)/%.lds.S FORCE
 	$(call if_changed_dep,cpp_lds_S)
 
-ifdef CONFIG_LTO_CLANG_THIN_DIST
-# Generate .o.thinlto.native (obj) from .o (bitcode) file
-# ---------------------------------------------------------------------------
-quiet_cmd_cc_o_bc = CC $(quiet_modtag) $@
-
-cmd_cc_o_bc      = $(if $(filter bitcode, $(shell file -b $<)),$(CC) \
-		   $(filter-out -Wp% $(LINUXINCLUDE) %.h.gch %.h -D% \
-		   -flto=thin, $(c_flags)) \
-		   -Wno-unused-command-line-argument \
-		   -x ir -fthinlto-index=$<.thinlto.bc -c -o $@ \
-		   $(if $(findstring ../,$<), \
-		   $$(realpath --relative-to=$(srcroot) $<), $<), \
-		   cp $< $@)
-
-$(obj)/%.o.thinlto.native: $(obj)/%.o FORCE
-	$(call if_changed,cc_o_bc)
-endif
-
 # ASN.1 grammar
 # ---------------------------------------------------------------------------
 quiet_cmd_asn1_compiler = ASN.1   $(basename $@).[ch]
@@ -387,7 +360,7 @@ $(obj)/%.asn1.c $(obj)/%.asn1.h: $(src)/%.asn1 $(objtree)/scripts/asn1_compiler
 # ---------------------------------------------------------------------------
 
 # To build objects in subdirs, we need to descend into the directories
-$(subdir-builtin): $(obj)/%/built-in$(builtin_suffix): $(obj)/% ;
+$(subdir-builtin): $(obj)/%/built-in.a: $(obj)/% ;
 $(subdir-modorder): $(obj)/%/modules.order: $(obj)/% ;
 
 #
@@ -404,12 +377,6 @@ quiet_cmd_ar_builtin = AR      $@
 $(obj)/built-in.a: $(real-obj-y) FORCE
 	$(call if_changed,ar_builtin)
 
-ifdef CONFIG_LTO_CLANG_THIN_DIST
-# Rule to compile a set of .o.thinlto.native files into one .a.thinlto.native file.
-$(obj)/built-in.a.thinlto.native: $(patsubst %.o,%.o.thinlto.native,$(real-obj-y)) FORCE
-	$(call if_changed,ar_builtin)
-endif
-
 # This is a list of build artifacts from the current Makefile and its
 # sub-directories. The timestamp should be updated when any of the member files.
 
@@ -427,14 +394,6 @@ $(obj)/modules.order: $(obj-m) FORCE
 $(obj)/lib.a: $(lib-y) FORCE
 	$(call if_changed,ar)
 
-ifdef CONFIG_LTO_CLANG_THIN_DIST
-quiet_cmd_ar_native = AR      $@
-      cmd_ar_native = rm -f $@; $(AR) cDPrsT $@ $(patsubst %.o,%.o.thinlto.native,$(real-prereqs))
-
-$(obj)/lib.a.thinlto.native: $(patsubst %.o,%.o.thinlto.native,$(lib-y)) FORCE
-	$(call if_changed,ar_native)
-endif
-
 quiet_cmd_ld_multi_m = LD [M]  $@
       cmd_ld_multi_m = $(LD) $(ld_flags) -r -o $@ @$< $(cmd_objtool)
 
@@ -500,8 +459,7 @@ $(single-subdir-goals): $(single-subdirs)
 PHONY += $(subdir-ym)
 $(subdir-ym):
 	$(Q)$(MAKE) $(build)=$@ \
-	need-builtin=$(if $(filter $@/built-in$(builtin_suffix), $(subdir-builtin)),1) \
-	thinlto_final_pass=$(if $(filter .a.thinlto.native, $(builtin_suffix)),1) \
+	need-builtin=$(if $(filter $@/built-in.a, $(subdir-builtin)),1) \
 	need-modorder=$(if $(filter $@/modules.order, $(subdir-modorder)),1) \
 	$(filter $@/%, $(single-subdir-goals))
 
diff --git a/scripts/Makefile.lib b/scripts/Makefile.lib
index 8e146367f..2fe73cda0 100644
--- a/scripts/Makefile.lib
+++ b/scripts/Makefile.lib
@@ -34,13 +34,8 @@ else
 obj-m := $(filter-out %/, $(obj-m))
 endif
 
-builtin_suffix := $(if $(filter %.a.thinlto.native, $(MAKECMDGOALS)),.a.thinlto.native,.a)
-ifeq ($(thinlto_final_pass),1)
-        builtin_suffix :=.a.thinlto.native
-endif
-
 ifdef need-builtin
-obj-y		:= $(patsubst %/, %/built-in$(builtin_suffix), $(obj-y))
+obj-y		:= $(patsubst %/, %/built-in.a, $(obj-y))
 else
 obj-y		:= $(filter-out %/, $(obj-y))
 endif
diff --git a/scripts/Makefile.vmlinux_o b/scripts/Makefile.vmlinux_o
index 0ebdc2b22..b024ffb3e 100644
--- a/scripts/Makefile.vmlinux_o
+++ b/scripts/Makefile.vmlinux_o
@@ -9,14 +9,6 @@ include $(srctree)/scripts/Kbuild.include
 # for objtool
 include $(srctree)/scripts/Makefile.lib
 
-ifeq ($(thinlto_final_pass),1)
-vmlinux_a := vmlinux.a.thinlto.native
-vmlinux_libs := $(patsubst %.a,%.a.thinlto.native,$(KBUILD_VMLINUX_LIBS))
-else
-vmlinux_a := vmlinux.a
-vmlinux_libs := $(KBUILD_VMLINUX_LIBS)
-endif
-
 # Generate a linker script to ensure correct ordering of initcalls for Clang LTO
 # ---------------------------------------------------------------------------
 
@@ -26,7 +18,7 @@ quiet_cmd_gen_initcalls_lds = GEN     $@
 	$(PERL) $(real-prereqs) > $@
 
 .tmp_initcalls.lds: $(srctree)/scripts/generate_initcall_order.pl \
-		$(vmlinux_a) $(vmlinux_libs) FORCE
+		vmlinux.a $(KBUILD_VMLINUX_LIBS) FORCE
 	$(call if_changed,gen_initcalls_lds)
 
 targets := .tmp_initcalls.lds
@@ -67,8 +59,8 @@ quiet_cmd_ld_vmlinux.o = LD      $@
 	$(LD) ${KBUILD_LDFLAGS} -r -o $@ \
 	$(vmlinux-o-ld-args-y) \
 	$(addprefix -T , $(initcalls-lds)) \
-	--whole-archive $(vmlinux_a) --no-whole-archive \
-	--start-group $(vmlinux_libs) --end-group \
+	--whole-archive vmlinux.a --no-whole-archive \
+	--start-group $(KBUILD_VMLINUX_LIBS) --end-group \
 	$(cmd_objtool)
 
 define rule_ld_vmlinux.o
@@ -76,7 +68,7 @@ define rule_ld_vmlinux.o
 	$(call cmd,gen_objtooldep)
 endef
 
-vmlinux.o: $(initcalls-lds) $(vmlinux_a) $(vmlinux_libs) FORCE
+vmlinux.o: $(initcalls-lds) vmlinux.a $(KBUILD_VMLINUX_LIBS) FORCE
 	$(call if_changed_rule,ld_vmlinux.o)
 
 targets += vmlinux.o
diff --git a/scripts/Makefile.vmlinux_thinlink b/scripts/Makefile.vmlinux_thinlink
deleted file mode 100644
index 13e4026c7..000000000
--- a/scripts/Makefile.vmlinux_thinlink
+++ /dev/null
@@ -1,53 +0,0 @@
-# SPDX-License-Identifier: GPL-2.0-only
-
-PHONY := __default
-__default: vmlinux.thinlink
-
-include include/config/auto.conf
-include $(srctree)/scripts/Kbuild.include
-
-
-# Generate a linker script to ensure correct ordering of initcalls for Clang LTO
-# ---------------------------------------------------------------------------
-
-quiet_cmd_gen_initcalls_lds = GEN     $@
-      cmd_gen_initcalls_lds = \
-	$(PYTHON3) $(srctree)/scripts/jobserver-exec \
-	$(PERL) $(real-prereqs) > $@
-
-.tmp_initcalls_thinlink.lds: $(srctree)/scripts/generate_initcall_order.pl \
-		vmlinux.a FORCE
-	$(call if_changed,gen_initcalls_lds)
-
-targets := .tmp_initcalls_thinlink.lds
-
-initcalls-lds := .tmp_initcalls_thinlink.lds
-
-quiet_cmd_ld_vmlinux.thinlink = LD      $@
-      cmd_ld_vmlinux.thinlink = \
-	$(AR) t vmlinux.a > .vmlinux_thinlto_bc_files; \
-	$(LD) ${KBUILD_LDFLAGS} -r $(addprefix -T , $(initcalls-lds)) \
-	--thinlto-index-only @.vmlinux_thinlto_bc_files; \
-	touch vmlinux.thinlink
-
-vmlinux.thinlink: vmlinux.a $(initcalls-lds) FORCE
-	$(call if_changed,ld_vmlinux.thinlink)
-
-targets += vmlinux.thinlink
-
-# Add FORCE to the prerequisites of a target to force it to be always rebuilt.
-# ---------------------------------------------------------------------------
-
-PHONY += FORCE
-FORCE:
-
-# Read all saved command lines and dependencies for the $(targets) we
-# may be building above, using $(if_changed{,_dep}). As an
-# optimization, we don't need to read them if the target does not
-# exist, we will rebuild anyway in that case.
-
-existing-targets := $(wildcard $(sort $(targets)))
-
--include $(foreach f,$(existing-targets),$(dir $(f)).$(notdir $(f)).cmd)
-
-.PHONY: $(PHONY)
diff --git a/scripts/head-object-list.txt b/scripts/head-object-list.txt
index 094a4e7c0..7274dfc65 100644
--- a/scripts/head-object-list.txt
+++ b/scripts/head-object-list.txt
@@ -18,7 +18,6 @@ arch/arm/kernel/head.o
 arch/csky/kernel/head.o
 arch/hexagon/kernel/head.o
 arch/loongarch/kernel/head.o
-arch/loongarch/kernel/head.o.thinlto.native
 arch/m68k/68000/head.o
 arch/m68k/coldfire/head.o
 arch/m68k/kernel/head.o
-- 
2.49.0

