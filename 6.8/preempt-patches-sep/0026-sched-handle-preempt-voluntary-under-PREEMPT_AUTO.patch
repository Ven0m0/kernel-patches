From a2ed53be3e741381300bc7330fdeb287160c864f Mon Sep 17 00:00:00 2001
From: Ankur Arora <ankur.a.arora@oracle.com>
Date: Wed, 20 Dec 2023 15:40:31 -0800
Subject: [PATCH 26/30] sched: handle preempt=voluntary under PREEMPT_AUTO

The default preemption policy for voluntary preemption under
PREEMPT_AUTO is to schedule eagerly for tasks of higher scheduling
class, and lazily for well-behaved, non-idle tasks.

This is the same policy as preempt=none, with an eager handling of
higher priority scheduling classes.

So, compare a SCHED_DEADLINE workload (stress-ng --cyclic) with a
background kernel load of 'stress-ng --mmap':

 # stress-ng --mmap 0 &
 # stress-ng --cyclic 1 --timeout 300

 PREEMPT_AUTO, preempt=none
   stress-ng: info:  [8827] setting to a 300 second (5 mins, 0.00 secs) run per stressor
   stress-ng: info:  [8827] dispatching hogs: 1 cyclic
   stress-ng: info:  [8828] cyclic: sched SCHED_DEADLINE: 100000 ns delay, 10000 samples
   stress-ng: info:  [8828] cyclic:   mean: 23829.70 ns, mode: 3317 ns
   stress-ng: info:  [8828] cyclic:   min: 2688 ns, max: 5701735 ns, std.dev. 123502.57
   stress-ng: info:  [8828] cyclic: latency percentiles:
   stress-ng: info:  [8828] cyclic:   25.00%:       6289 ns
   stress-ng: info:  [8828] cyclic:   50.00%:      13945 ns
   stress-ng: info:  [8828] cyclic:   75.00%:      25335 ns
   stress-ng: info:  [8828] cyclic:   90.00%:      34500 ns
   stress-ng: info:  [8828] cyclic:   95.40%:      41470 ns
   stress-ng: info:  [8828] cyclic:   99.00%:      85602 ns
   stress-ng: info:  [8828] cyclic:   99.50%:     301099 ns
   stress-ng: info:  [8828] cyclic:   99.90%:    1798633 ns
   stress-ng: info:  [8828] cyclic:   99.99%:    5701735 ns
   stress-ng: info:  [8827] successful run completed in 300.01s (5 mins, 0.01 secs)

 PREEMPT_AUTO, preempt=voluntary
   stress-ng: info:  [8883] setting to a 300 second (5 mins, 0.00 secs) run per stressor
   stress-ng: info:  [8883] dispatching hogs: 1 cyclic
   stress-ng: info:  [8884] cyclic: sched SCHED_DEADLINE: 100000 ns delay, 10000 samples
   stress-ng: info:  [8884] cyclic:   mean: 14169.08 ns, mode: 3355 ns
   stress-ng: info:  [8884] cyclic:   min: 2570 ns, max: 2234939 ns, std.dev. 66056.95
   stress-ng: info:  [8884] cyclic: latency percentiles:
   stress-ng: info:  [8884] cyclic:   25.00%:       3665 ns
   stress-ng: info:  [8884] cyclic:   50.00%:       5409 ns
   stress-ng: info:  [8884] cyclic:   75.00%:      16009 ns
   stress-ng: info:  [8884] cyclic:   90.00%:      24392 ns
   stress-ng: info:  [8884] cyclic:   95.40%:      28827 ns
   stress-ng: info:  [8884] cyclic:   99.00%:      39153 ns
   stress-ng: info:  [8884] cyclic:   99.50%:     168643 ns
   stress-ng: info:  [8884] cyclic:   99.90%:    1186267 ns
   stress-ng: info:  [8884] cyclic:   99.99%:    2234939 ns
   stress-ng: info:  [8883] successful run completed in 300.01s (5 mins, 0.01 secs)

So, the latency improves significantly -- even at the 25th percentile
threshold.

This configuration also compares quite favourably to voluntary
preemption under PREEMPT_DYNAMIC.

 PREEMPT_DYNAMIC, preempt=voluntary
   stress-ng: info:  [12252] setting to a 300 second (5 mins, 0.00 secs) run per stressor
   stress-ng: info:  [12252] dispatching hogs: 1 cyclic
   stress-ng: info:  [12253] cyclic: sched SCHED_DEADLINE: 100000 ns delay, 10000 samples
   stress-ng: info:  [12253] cyclic:   mean: 19973.46 ns, mode: 3560 ns
   stress-ng: info:  [12253] cyclic:   min: 2541 ns, max: 2751830 ns, std.dev. 68891.71
   stress-ng: info:  [12253] cyclic: latency percentiles:
   stress-ng: info:  [12253] cyclic:   25.00%:       4800 ns
   stress-ng: info:  [12253] cyclic:   50.00%:      12458 ns
   stress-ng: info:  [12253] cyclic:   75.00%:      25220 ns
   stress-ng: info:  [12253] cyclic:   90.00%:      35404 ns
   stress-ng: info:  [12253] cyclic:   95.40%:      43135 ns
   stress-ng: info:  [12253] cyclic:   99.00%:      61053 ns
   stress-ng: info:  [12253] cyclic:   99.50%:      98159 ns
   stress-ng: info:  [12253] cyclic:   99.90%:    1164407 ns
   stress-ng: info:  [12253] cyclic:   99.99%:    2751830 ns
   stress-ng: info:  [12252] successful run completed in 300.01s (5 mins, 0.01 secs)

And, as you would expect, we perform identically to preempt=full
with PREEMPT_DYNAMIC (ignoring the outliers at 99.99%.)

 PREEMPT_DYNAMIC, preempt=full
   stress-ng: info:  [12206] setting to a 300 second (5 mins, 0.00 secs) run per stressor
   stress-ng: info:  [12206] dispatching hogs: 1 cyclic
   stress-ng: info:  [12207] cyclic: sched SCHED_DEADLINE: 100000 ns delay, 10000 samples
   stress-ng: info:  [12207] cyclic:   mean: 16647.05 ns, mode: 3535 ns
   stress-ng: info:  [12207] cyclic:   min: 2548 ns, max: 4093382 ns, std.dev. 116825.95
   stress-ng: info:  [12207] cyclic: latency percentiles:
   stress-ng: info:  [12207] cyclic:   25.00%:       3568 ns
   stress-ng: info:  [12207] cyclic:   50.00%:       4755 ns
   stress-ng: info:  [12207] cyclic:   75.00%:      15187 ns
   stress-ng: info:  [12207] cyclic:   90.00%:      24083 ns
   stress-ng: info:  [12207] cyclic:   95.40%:      29314 ns
   stress-ng: info:  [12207] cyclic:   99.00%:      40102 ns
   stress-ng: info:  [12207] cyclic:   99.50%:     366571 ns
   stress-ng: info:  [12207] cyclic:   99.90%:    2752037 ns
   stress-ng: info:  [12207] cyclic:   99.99%:    4093382 ns
   stress-ng: info:  [12206] successful run completed in 300.01s (5 mins, 0.01 secs)

Cc: Ingo Molnar <mingo@redhat.com>
Cc: Peter Ziljstra <peterz@infradead.org>
Cc: Juri Lelli <juri.lelli@redhat.com>
Cc: Vincent Guittot <vincent.guittot@linaro.org>
Originally-by: Thomas Gleixner <tglx@linutronix.de>
Link: https://lore.kernel.org/lkml/87jzshhexi.ffs@tglx/
Signed-off-by: Ankur Arora <ankur.a.arora@oracle.com>
---
 kernel/sched/core.c  | 12 ++++++++----
 kernel/sched/sched.h |  6 ++++++
 2 files changed, 14 insertions(+), 4 deletions(-)

diff --git a/kernel/sched/core.c b/kernel/sched/core.c
index aaa87d5fe..aa31f23f4 100644
--- a/kernel/sched/core.c
+++ b/kernel/sched/core.c
@@ -1056,6 +1056,9 @@ static resched_t resched_opt_translate(struct task_struct *curr,
 	if (preempt_model_preemptible())
 		return NR_now;
 
+	if (preempt_model_voluntary() && opt == RESCHED_PRIORITY)
+		return NR_now;
+
 	if (is_idle_task(curr))
 		return NR_now;
 
@@ -2297,7 +2300,7 @@ void wakeup_preempt(struct rq *rq, struct task_struct *p, int flags)
 	if (p->sched_class == rq->curr->sched_class)
 		rq->curr->sched_class->wakeup_preempt(rq, p, flags);
 	else if (sched_class_above(p->sched_class, rq->curr->sched_class))
-		resched_curr(rq);
+		resched_curr_priority(rq);
 
 	/*
 	 * A queue event has occurred, and we're going to schedule.  In
@@ -8974,11 +8977,11 @@ static void __sched_dynamic_update(int mode)
 	case preempt_dynamic_none:
 		if (mode != preempt_dynamic_mode)
 			pr_info("%s: none\n", PREEMPT_MODE);
-		preempt_dynamic_mode = mode;
 		break;
 
 	case preempt_dynamic_voluntary:
-		preempt_dynamic_mode = preempt_dynamic_undefined;
+		if (mode != preempt_dynamic_mode)
+			pr_info("%s: voluntary\n", PREEMPT_MODE);
 		break;
 
 	case preempt_dynamic_full:
@@ -8988,9 +8991,10 @@ static void __sched_dynamic_update(int mode)
 
 		if (mode != preempt_dynamic_mode)
 			pr_info("%s: full\n", PREEMPT_MODE);
-		preempt_dynamic_mode = mode;
 		break;
 	}
+
+	preempt_dynamic_mode = mode;
 }
 
 #endif /* CONFIG_PREEMPT_AUTO */
diff --git a/kernel/sched/sched.h b/kernel/sched/sched.h
index c7e7acab1..197c038b8 100644
--- a/kernel/sched/sched.h
+++ b/kernel/sched/sched.h
@@ -2466,6 +2466,7 @@ enum resched_opt {
 	RESCHED_DEFAULT,
 	RESCHED_FORCE,
 	RESCHED_TICK,
+	RESCHED_PRIORITY,
 };
 
 extern void __resched_curr(struct rq *rq, enum resched_opt opt);
@@ -2480,6 +2481,11 @@ static inline void resched_curr_tick(struct rq *rq)
 	__resched_curr(rq, RESCHED_TICK);
 }
 
+static inline void resched_curr_priority(struct rq *rq)
+{
+	__resched_curr(rq, RESCHED_PRIORITY);
+}
+
 extern void resched_cpu(int cpu);
 
 extern struct rt_bandwidth def_rt_bandwidth;
-- 
2.43.0.232.ge79552d197

