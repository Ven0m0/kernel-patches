From 5667ff9c4eca3d87d755d35ce7bccfb3ab09fb91 Mon Sep 17 00:00:00 2001
From: Alexander Potapenko <glider@google.com>
Date: Tue, 13 Sep 2022 11:01:45 +0200
Subject: [PATCH 45/48] Revert "kmsan: unpoison @tlb in arch_tlb_gather_mmu()"

This reverts commit 5b2b30c07b69aa75ad52e67e63e58c5091e43350.

With new strategy of origin tracking, long chains won't be reported,
so we don't need to unpoison @tlb
---
 mm/mmu_gather.c | 10 ----------
 1 file changed, 10 deletions(-)

diff --git a/mm/mmu_gather.c b/mm/mmu_gather.c
index add4244e5..a71924bd3 100644
--- a/mm/mmu_gather.c
+++ b/mm/mmu_gather.c
@@ -1,7 +1,6 @@
 #include <linux/gfp.h>
 #include <linux/highmem.h>
 #include <linux/kernel.h>
-#include <linux/kmsan-checks.h>
 #include <linux/mmdebug.h>
 #include <linux/mm_types.h>
 #include <linux/mm_inline.h>
@@ -266,15 +265,6 @@ void tlb_flush_mmu(struct mmu_gather *tlb)
 static void __tlb_gather_mmu(struct mmu_gather *tlb, struct mm_struct *mm,
 			     bool fullmm)
 {
-	/*
-	 * struct mmu_gather contains 7 1-bit fields packed into a 32-bit
-	 * unsigned int value. The remaining 25 bits remain uninitialized
-	 * and are never used, but KMSAN updates the origin for them in
-	 * zap_pXX_range() in mm/memory.c, thus creating very long origin
-	 * chains. This is technically correct, but consumes too much memory.
-	 * Unpoisoning the whole structure will prevent creating such chains.
-	 */
-	kmsan_unpoison_memory(tlb, sizeof(*tlb));
 	tlb->mm = mm;
 	tlb->fullmm = fullmm;
 
-- 
2.37.3.485.gbe1a02a17e

