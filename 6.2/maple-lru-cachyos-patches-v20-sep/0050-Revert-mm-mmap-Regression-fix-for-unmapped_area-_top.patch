From c3259c690075d0086a83545d93cd86ee1b9e39fd Mon Sep 17 00:00:00 2001
From: Piotr Gorski <lucjan.lucjanov@gmail.com>
Date: Fri, 21 Apr 2023 17:17:30 +0200
Subject: [PATCH 50/57] Revert "mm/mmap: Regression fix for
 unmapped_area{_topdown}"

This reverts commit 12d60e3c59f988dc3e4a40076a78a93146c05dff.

Signed-off-by: Piotr Gorski <lucjan.lucjanov@gmail.com>
---
 mm/mmap.c | 48 +++++-------------------------------------------
 1 file changed, 5 insertions(+), 43 deletions(-)

diff --git a/mm/mmap.c b/mm/mmap.c
index 4c32485ef..c1a09b21a 100644
--- a/mm/mmap.c
+++ b/mm/mmap.c
@@ -1565,8 +1565,7 @@ static inline int accountable_mapping(struct file *file, vm_flags_t vm_flags)
  */
 static unsigned long unmapped_area(struct vm_unmapped_area_info *info)
 {
-	unsigned long length, gap, low_limit;
-	struct vm_area_struct *tmp;
+	unsigned long length, gap;
 
 	MA_STATE(mas, &current->mm->mm_mt, 0, 0);
 
@@ -1575,29 +1574,12 @@ static unsigned long unmapped_area(struct vm_unmapped_area_info *info)
 	if (length < info->length)
 		return -ENOMEM;
 
-	low_limit = info->low_limit;
-retry:
-	if (mas_empty_area(&mas, low_limit, info->high_limit - 1, length))
+	if (mas_empty_area(&mas, info->low_limit, info->high_limit - 1,
+				  length))
 		return -ENOMEM;
 
 	gap = mas.index;
 	gap += (info->align_offset - gap) & info->align_mask;
-	tmp = mas_next(&mas, ULONG_MAX);
-	if (tmp && (tmp->vm_flags & VM_GROWSDOWN)) { /* Avoid prev check if possible */
-		if (vm_start_gap(tmp) < gap + length - 1) {
-			low_limit = tmp->vm_end;
-			mas_reset(&mas);
-			goto retry;
-		}
-	} else {
-		tmp = mas_prev(&mas, 0);
-		if (tmp && vm_end_gap(tmp) > gap) {
-			low_limit = vm_end_gap(tmp);
-			mas_reset(&mas);
-			goto retry;
-		}
-	}
-
 	return gap;
 }
 
@@ -1613,8 +1595,7 @@ static unsigned long unmapped_area(struct vm_unmapped_area_info *info)
  */
 static unsigned long unmapped_area_topdown(struct vm_unmapped_area_info *info)
 {
-	unsigned long length, gap, high_limit, gap_end;
-	struct vm_area_struct *tmp;
+	unsigned long length, gap;
 
 	MA_STATE(mas, &current->mm->mm_mt, 0, 0);
 	/* Adjust search length to account for worst case alignment overhead */
@@ -1622,31 +1603,12 @@ static unsigned long unmapped_area_topdown(struct vm_unmapped_area_info *info)
 	if (length < info->length)
 		return -ENOMEM;
 
-	high_limit = info->high_limit;
-retry:
-	if (mas_empty_area_rev(&mas, info->low_limit, high_limit - 1,
+	if (mas_empty_area_rev(&mas, info->low_limit, info->high_limit - 1,
 				length))
 		return -ENOMEM;
 
 	gap = mas.last + 1 - info->length;
 	gap -= (gap - info->align_offset) & info->align_mask;
-	gap_end = mas.last;
-	tmp = mas_next(&mas, ULONG_MAX);
-	if (tmp && (tmp->vm_flags & VM_GROWSDOWN)) { /* Avoid prev check if possible */
-		if (vm_start_gap(tmp) <= gap_end) {
-			high_limit = vm_start_gap(tmp);
-			mas_reset(&mas);
-			goto retry;
-		}
-	} else {
-		tmp = mas_prev(&mas, 0);
-		if (tmp && vm_end_gap(tmp) > gap) {
-			high_limit = tmp->vm_start;
-			mas_reset(&mas);
-			goto retry;
-		}
-	}
-
 	return gap;
 }
 
-- 
2.40.0.71.g950264636c

