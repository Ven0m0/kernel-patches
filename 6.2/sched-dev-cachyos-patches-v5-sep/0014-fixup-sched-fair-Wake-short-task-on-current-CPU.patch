From b14230372aaa7c74b27ba2e61c0075e8f1b610b6 Mon Sep 17 00:00:00 2001
From: Piotr Gorski <lucjan.lucjanov@gmail.com>
Date: Wed, 22 Feb 2023 21:58:35 +0100
Subject: [PATCH 14/16] fixup! sched/fair: Wake short task on current CPU

Signed-off-by: Piotr Gorski <lucjan.lucjanov@gmail.com>
---
 kernel/sched/fair.c | 14 ++++++++++++--
 1 file changed, 12 insertions(+), 2 deletions(-)

diff --git a/kernel/sched/fair.c b/kernel/sched/fair.c
index b853855a9..f7e733dc6 100644
--- a/kernel/sched/fair.c
+++ b/kernel/sched/fair.c
@@ -6546,11 +6546,14 @@ static int wake_wide(struct task_struct *p)
  *
  * SIS_SHORT tries to wake up the short wakee on current CPU. This
  * aims to avoid race condition among CPUs due to frequent context
- * switch.
+ * switch. Besides, the candidate short task should not be the one
+ * that wakes up more than one tasks, otherwise SIS_SHORT might
+ * stack too many tasks on current CPU.
  */
 static inline int is_short_task(struct task_struct *p)
 {
-	return sched_feat(SIS_SHORT) && p->se.dur_avg &&
+	return sched_feat(SIS_SHORT) && !p->wakee_flips &&
+	       p->se.dur_avg &&
 	       ((p->se.dur_avg * 8) < sysctl_sched_min_granularity);
 }
 
@@ -6970,6 +6973,13 @@ static int select_idle_cpu(struct task_struct *p, struct sched_domain *sd, bool
 			if (nr == 1)
 				return -1;
 
+			/*
+			 * If the scan number suggested by SIS_UTIL is smaller
+			 * than 60% of llc_weight, it indicates a util_avg% higher
+			 * than 50%. System busier than this could lower its bar to
+			 * choose a compromised "idle" CPU. This co-exists with
+			 * !has_idle_core to not stack too many tasks on one CPU.
+			 */
 			if (!has_idle_core && this == target &&
 			    (5 * nr < 3 * sd->span_weight) &&
 			    cpu_rq(target)->nr_running <= 1 &&
-- 
2.40.0.71.g950264636c

