From 0bac7c5487b10708c1a7b5c96262a7901da23c72 Mon Sep 17 00:00:00 2001
From: Stephan Mueller <smueller@chronox.de>
Date: Thu, 12 Jan 2023 19:07:20 +0100
Subject: [PATCH 33/35] lrng: apply forced seeding to atomic DRNG

The forced seeding support was made available to the DRNGs feeding user
space. This patch makes this support available to the atomic DRNG which
feeds kernel space consumers. This implies that as soon as a fast
entropy source becomes available even with less than perfect entropy,
the atomic DRNG is attempted to be fully seeded using the forced seeding
operation.

To achieve that behavior, the following changes are applied:

- adding lrng_get_atomic which makes the atomic DRNG handle available to
  the DRNG manager

- remove lrng_drng_atomic_seed_es considering that the atomic DRNG seeding
  from entropy sources uses the forced reseeding logic implemented in the
  DRNG manager.

- change lrng_drng_seed_es_nolock to only invoke lrng_init_ops when the
  user space DRNGs are seeded as the result of the init_ops call only
  applies to the user space interfaces

- change lrng_drng_seed_es to not call out to the atomic DRNG seeding
  any more

- change __lrng_drng_seed_work to add the atomic DRNG seeding from
  entropy sources in case the LRNG is not yet initialized (and thus
  the user space DRNGs are available to seed the atomic DRNG).

- Fast entropy sources of CPU and Jitter RNG are changed to invoke the
  lrng_force_fully_seeded function to trigger the forced seeding for
  whatever DRNG is available at the time these ES initialize.

In addtion, considering the forced seeding works as designed, it is applied
as soon as the first request to random numbers is received and the respective
DRNG is not yet fully seeded. Thus, the "waiting" for 5 requests for random
numbers is removed. This is considered appropriate because the entropy
sources uses in the forced seeding are defined to provide the entropy
credited to them. Therefore it makes no real sense to wait until slow
entropy sources may have collected entropy in the mean time. Besides, if a
user is not satisfied with the state, it can force a reseeding of the
DRNGs using a write to /dev/random. This change is visible in
lrng_force_fully_seeded which invokes __lrng_drng_seed_work right away.

Signed-off-by: Stephan Mueller <smueller@chronox.de>
---
 drivers/char/lrng/lrng_definitions.h |  7 ---
 drivers/char/lrng/lrng_drng_atomic.c | 52 ++-----------------
 drivers/char/lrng/lrng_drng_atomic.h |  4 +-
 drivers/char/lrng/lrng_drng_mgr.c    | 77 +++++++++++++++++-----------
 drivers/char/lrng/lrng_drng_mgr.h    |  1 +
 drivers/char/lrng/lrng_es_cpu.c      |  8 +--
 drivers/char/lrng/lrng_es_jent.c     |  3 +-
 drivers/char/lrng/lrng_es_mgr.c      |  6 ++-
 8 files changed, 65 insertions(+), 93 deletions(-)

diff --git a/drivers/char/lrng/lrng_definitions.h b/drivers/char/lrng/lrng_definitions.h
index f1059334e..c0d2fcff8 100644
--- a/drivers/char/lrng/lrng_definitions.h
+++ b/drivers/char/lrng/lrng_definitions.h
@@ -121,13 +121,6 @@
  */
 #define LRNG_POOL_SIZE	(sizeof(struct shash_desc) + HASH_MAX_DESCSIZE)
 
-/*
- * How many attempts to reach fully seeded are allowed before trying to force
- * reseed from available entropy (pull data from entropy sources in a repeated
- * fashion allowing to sum up the entropy).
- */
-#define LRNG_FORCE_FULLY_SEEDED_ATTEMPT	5
-
 /****************************** Helper code ***********************************/
 
 static inline u32 lrng_fast_noise_entropylevel(u32 ent_bits, u32 requested_bits)
diff --git a/drivers/char/lrng/lrng_drng_atomic.c b/drivers/char/lrng/lrng_drng_atomic.c
index ce9b5b48d..290d346ea 100644
--- a/drivers/char/lrng/lrng_drng_atomic.c
+++ b/drivers/char/lrng/lrng_drng_atomic.c
@@ -34,6 +34,11 @@ static struct lrng_drng lrng_drng_atomic = {
 	.spin_lock	= __SPIN_LOCK_UNLOCKED(lrng_drng_atomic.spin_lock)
 };
 
+struct lrng_drng *lrng_get_atomic(void)
+{
+	return &lrng_drng_atomic;
+}
+
 void lrng_drng_atomic_reset(void)
 {
 	unsigned long flags;
@@ -88,53 +93,6 @@ void lrng_drng_atomic_seed_drng(struct lrng_drng *regular_drng)
 	memzero_explicit(&seedbuf, sizeof(seedbuf));
 }
 
-void lrng_drng_atomic_seed_es(void)
-{
-	struct entropy_buf seedbuf __aligned(LRNG_KCAPI_ALIGN);
-	struct lrng_drng *drng = &lrng_drng_atomic;
-	unsigned long flags;
-	u32 requested_bits = LRNG_MIN_SEED_ENTROPY_BITS;
-
-	if (lrng_drng_atomic.fully_seeded)
-		return;
-
-	/*
-	 * When the LRNG reached the minimally seeded level, leave 256 bits of
-	 * entropy for the regular DRNG. In addition ensure that additional
-	 * 256 bits are available for the atomic DRNG to get to the fully
-	 * seeded stage of the LRNG.
-	 */
-	if (lrng_state_min_seeded()) {
-		u32 avail_bits = lrng_avail_entropy();
-
-		requested_bits =
-			(avail_bits >= 2 * LRNG_FULL_SEED_ENTROPY_BITS) ?
-			LRNG_FULL_SEED_ENTROPY_BITS : 0;
-
-		if (!requested_bits)
-			return;
-	}
-
-	pr_debug("atomic DRNG seeding attempt to pull %u bits of entropy directly from entropy sources\n",
-		 requested_bits);
-
-	lrng_fill_seed_buffer(&seedbuf, requested_bits, false);
-	spin_lock_irqsave(&drng->spin_lock, flags);
-	lrng_drng_inject(&lrng_drng_atomic, (u8 *)&seedbuf, sizeof(seedbuf),
-			 lrng_fully_seeded(drng->fully_seeded,
-					   lrng_entropy_rate_eb(&seedbuf),
-					   &seedbuf),
-			 "atomic");
-	spin_unlock_irqrestore(&drng->spin_lock, flags);
-	lrng_init_ops(&seedbuf);
-
-	/*
-	 * Do not call lrng_init_ops(seedbuf) here as the atomic DRNG does not
-	 * serve common users.
-	 */
-	memzero_explicit(&seedbuf, sizeof(seedbuf));
-}
-
 static void lrng_drng_atomic_get(u8 *outbuf, u32 outbuflen)
 {
 	struct lrng_drng *drng = &lrng_drng_atomic;
diff --git a/drivers/char/lrng/lrng_drng_atomic.h b/drivers/char/lrng/lrng_drng_atomic.h
index d5d24fc94..220b24daf 100644
--- a/drivers/char/lrng/lrng_drng_atomic.h
+++ b/drivers/char/lrng/lrng_drng_atomic.h
@@ -11,13 +11,13 @@
 #ifdef CONFIG_LRNG_DRNG_ATOMIC
 void lrng_drng_atomic_reset(void);
 void lrng_drng_atomic_seed_drng(struct lrng_drng *drng);
-void lrng_drng_atomic_seed_es(void);
 void lrng_drng_atomic_force_reseed(void);
+struct lrng_drng *lrng_get_atomic(void);
 #else /* CONFIG_LRNG_DRNG_ATOMIC */
 static inline void lrng_drng_atomic_reset(void) { }
 static inline void lrng_drng_atomic_seed_drng(struct lrng_drng *drng) { }
-static inline void lrng_drng_atomic_seed_es(void) { }
 static inline void lrng_drng_atomic_force_reseed(void) { }
+static inline struct lrng_drng *lrng_get_atomic(void) { return NULL }
 #endif /* CONFIG_LRNG_DRNG_ATOMIC */
 
 #endif /* _LRNG_DRNG_ATOMIC_H */
diff --git a/drivers/char/lrng/lrng_drng_mgr.c b/drivers/char/lrng/lrng_drng_mgr.c
index 1b9539eec..6019a3ce7 100644
--- a/drivers/char/lrng/lrng_drng_mgr.c
+++ b/drivers/char/lrng/lrng_drng_mgr.c
@@ -251,7 +251,8 @@ void lrng_drng_inject(struct lrng_drng *drng, const u8 *inbuf, u32 inbuflen,
  * Perform the seeding of the DRNG with data from entropy source.
  * The function returns the entropy injected into the DRNG in bits.
  */
-static u32 lrng_drng_seed_es_nolock(struct lrng_drng *drng)
+static u32 lrng_drng_seed_es_nolock(struct lrng_drng *drng, bool init_ops,
+				    const char *drng_type)
 {
 	struct entropy_buf seedbuf __aligned(LRNG_KCAPI_ALIGN),
 			   collected_seedbuf;
@@ -267,7 +268,8 @@ static u32 lrng_drng_seed_es_nolock(struct lrng_drng *drng)
 		num_es_delivered = 0;
 
 		if (collected_entropy)
-			pr_debug("Force fully seeding level by repeatedly pull entropy from available entropy sources\n");
+			pr_debug("Force fully seeding level for %s DRNG by repeatedly pull entropy from available entropy sources\n",
+				 drng_type);
 
 		lrng_fill_seed_buffer(&seedbuf,
 			lrng_get_seed_entropy_osr(drng->fully_seeded),
@@ -285,10 +287,16 @@ static u32 lrng_drng_seed_es_nolock(struct lrng_drng *drng)
 				 lrng_fully_seeded(drng->fully_seeded,
 						   collected_entropy,
 						   &collected_seedbuf),
-				 "regular");
+				 drng_type);
 
-		/* Set the seeding state of the LRNG */
-		lrng_init_ops(&collected_seedbuf);
+		/*
+		 * Set the seeding state of the LRNG
+		 *
+		 * Do not call lrng_init_ops(seedbuf) here as the atomic DRNG
+		 * does not serve common users.
+		 */
+		if (init_ops)
+			lrng_init_ops(&collected_seedbuf);
 
 	/*
 	 * Emergency reseeding: If we reached the min seed threshold now
@@ -314,7 +322,7 @@ static u32 lrng_drng_seed_es_nolock(struct lrng_drng *drng)
 static void lrng_drng_seed_es(struct lrng_drng *drng)
 {
 	mutex_lock(&drng->lock);
-	lrng_drng_seed_es_nolock(drng);
+	lrng_drng_seed_es_nolock(drng, true, "regular");
 	mutex_unlock(&drng->lock);
 }
 
@@ -323,21 +331,10 @@ static void lrng_drng_seed(struct lrng_drng *drng)
 	BUILD_BUG_ON(LRNG_MIN_SEED_ENTROPY_BITS >
 		     LRNG_DRNG_SECURITY_STRENGTH_BITS);
 
-	if (lrng_get_available()) {
-		/* (Re-)Seed DRNG */
-		lrng_drng_seed_es(drng);
-		/* (Re-)Seed atomic DRNG from regular DRNG */
-		lrng_drng_atomic_seed_drng(drng);
-	} else {
-		/*
-		 * If no-one is waiting for the DRNG, seed the atomic DRNG
-		 * directly from the entropy sources.
-		 */
-		if (!wq_has_sleeper(&lrng_init_wait))
-			lrng_drng_atomic_seed_es();
-		else
-			lrng_init_ops(NULL);
-	}
+	/* (Re-)Seed DRNG */
+	lrng_drng_seed_es(drng);
+	/* (Re-)Seed atomic DRNG from regular DRNG */
+	lrng_drng_atomic_seed_drng(drng);
 }
 
 static void lrng_drng_seed_work_one(struct lrng_drng *drng, u32 node)
@@ -356,9 +353,34 @@ static void lrng_drng_seed_work_one(struct lrng_drng *drng, u32 node)
  */
 static void __lrng_drng_seed_work(bool force)
 {
-	struct lrng_drng **lrng_drng = lrng_drng_instances();
+	struct lrng_drng **lrng_drng;
 	u32 node;
 
+	/*
+	 * If the DRNG is not yet initialized, let us try to seed the atomic
+	 * DRNG.
+	 */
+	if (!lrng_get_available()) {
+		struct lrng_drng *atomic;
+		unsigned long flags;
+
+		if (wq_has_sleeper(&lrng_init_wait)) {
+			lrng_init_ops(NULL);
+			return;
+		}
+		atomic = lrng_get_atomic();
+		if (!atomic || atomic->fully_seeded)
+			return;
+
+		atomic->force_reseed |= force;
+		spin_lock_irqsave(&atomic->spin_lock, flags);
+		lrng_drng_seed_es_nolock(atomic, false, "atomic");
+		spin_unlock_irqrestore(&atomic->spin_lock, flags);
+
+		return;
+	}
+
+	lrng_drng = lrng_drng_instances();
 	if (lrng_drng) {
 		for_each_online_node(node) {
 			struct lrng_drng *drng = lrng_drng[node];
@@ -490,7 +512,8 @@ int lrng_drng_get(struct lrng_drng *drng, u8 *outbuf, u32 outbuflen)
 					continue;
 				}
 
-				coll_ent_bits = lrng_drng_seed_es_nolock(drng);
+				coll_ent_bits = lrng_drng_seed_es_nolock(
+							drng, true, "regular");
 
 				lrng_pool_unlock();
 
@@ -593,20 +616,14 @@ void lrng_reset(void)
 
 /******************* Generic LRNG kernel output interfaces ********************/
 
-static void lrng_force_fully_seeded(void)
+void lrng_force_fully_seeded(void)
 {
-	static unsigned int ctr = 0;
-
 	if (lrng_pool_all_numa_nodes_seeded_get())
 		return;
 
-	if (ctr++ < LRNG_FORCE_FULLY_SEEDED_ATTEMPT)
-		return;
-
 	lrng_pool_lock();
 	__lrng_drng_seed_work(true);
 	lrng_pool_unlock();
-	ctr = 0;
 }
 
 static int lrng_drng_sleep_while_not_all_nodes_seeded(unsigned int nonblock)
diff --git a/drivers/char/lrng/lrng_drng_mgr.h b/drivers/char/lrng/lrng_drng_mgr.h
index b15ec880b..8b1de3827 100644
--- a/drivers/char/lrng/lrng_drng_mgr.h
+++ b/drivers/char/lrng/lrng_drng_mgr.h
@@ -69,6 +69,7 @@ int lrng_drng_sleep_while_non_min_seeded(void);
 int lrng_drng_get_sleep(u8 *outbuf, u32 outbuflen, bool pr);
 void lrng_drng_seed_work(struct work_struct *dummy);
 void lrng_drng_force_reseed(void);
+void lrng_force_fully_seeded(void);
 
 static inline u32 lrng_compress_osr(void)
 {
diff --git a/drivers/char/lrng/lrng_es_cpu.c b/drivers/char/lrng/lrng_es_cpu.c
index 531bee7a4..e52d6b478 100644
--- a/drivers/char/lrng/lrng_es_cpu.c
+++ b/drivers/char/lrng/lrng_es_cpu.c
@@ -43,12 +43,12 @@ static int __init lrng_parse_trust_cpu(char *arg)
 	if (ret)
 		return ret;
 
-	if (trust_cpu) {
+	if (trust_cpu)
 		cpu_entropy = LRNG_ARCHRANDOM_TRUST_CPU_STRENGTH;
-		lrng_es_add_entropy();
-	} else {
+	else
 		cpu_entropy = LRNG_ARCHRANDOM_DEFAULT_STRENGTH;
-	}
+
+	lrng_force_fully_seeded();
 
 	return 0;
 }
diff --git a/drivers/char/lrng/lrng_es_jent.c b/drivers/char/lrng/lrng_es_jent.c
index dbb2fce59..3df99981c 100644
--- a/drivers/char/lrng/lrng_es_jent.c
+++ b/drivers/char/lrng/lrng_es_jent.c
@@ -57,9 +57,8 @@ static int __init lrng_jent_initialize(void)
 	    jent_entropy == CONFIG_LRNG_JENT_ENTROPY_RATE)
 		jent_entropy = LRNG_DRNG_SECURITY_STRENGTH_BITS;
 
-	lrng_drng_force_reseed();
 	if (jent_entropy)
-		lrng_es_add_entropy();
+		lrng_force_fully_seeded();
 
 	return 0;
 }
diff --git a/drivers/char/lrng/lrng_es_mgr.c b/drivers/char/lrng/lrng_es_mgr.c
index 3d6a179fe..c74108c1e 100644
--- a/drivers/char/lrng/lrng_es_mgr.c
+++ b/drivers/char/lrng/lrng_es_mgr.c
@@ -13,6 +13,7 @@
 #include <linux/utsname.h>
 #include <linux/workqueue.h>
 
+#include "lrng_drng_atomic.h"
 #include "lrng_drng_mgr.h"
 #include "lrng_es_aux.h"
 #include "lrng_es_cpu.h"
@@ -102,11 +103,12 @@ void lrng_debug_report_seedlevel(const char *name)
 #ifdef CONFIG_WARN_ALL_UNSEEDED_RANDOM
 	static void *previous = NULL;
 	void *caller = (void *) _RET_IP_;
+	struct lrng_drng *atomic = lrng_get_atomic();
 
 	if (READ_ONCE(previous) == caller)
 		return;
 
-	if (!lrng_state_min_seeded())
+	if (atomic && !atomic->fully_seeded)
 		pr_notice("%pS %s called without reaching minimally seeded level (available entropy %u)\n",
 			  caller, name, lrng_avail_entropy());
 
@@ -395,6 +397,8 @@ void __init lrng_rand_initialize_early(void)
 
 	lrng_pool_insert_aux((u8 *)&seed, sizeof(seed), 0);
 	memzero_explicit(&seed, sizeof(seed));
+
+	lrng_force_fully_seeded();
 }
 
 void __init lrng_rand_initialize(void)
-- 
2.39.2.501.gd9d677b2d8

