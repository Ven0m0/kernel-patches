From 04217f46596d68e9831f7fb8372a7ac44ec181d3 Mon Sep 17 00:00:00 2001
From: Piotr Gorski <lucjan.lucjanov@gmail.com>
Date: Wed, 22 Feb 2023 08:52:58 +0100
Subject: [PATCH 35/35] lrng-6.2: merge changes from dev tree

Signed-off-by: Piotr Gorski <lucjan.lucjanov@gmail.com>
---
 drivers/char/lrng/lrng_drng_mgr.c |  2 +-
 drivers/char/lrng/lrng_es_irq.c   |  7 +++++--
 drivers/char/lrng/lrng_es_jent.c  | 21 +++++++++++++++++++--
 drivers/char/lrng/lrng_es_krng.c  |  2 +-
 drivers/char/lrng/lrng_es_mgr.c   |  2 +-
 drivers/char/lrng/lrng_es_sched.c |  8 ++++++--
 drivers/char/lrng/lrng_health.c   | 15 ++++++++++++++-
 drivers/char/lrng/lrng_switch.c   |  4 ++--
 8 files changed, 49 insertions(+), 12 deletions(-)

diff --git a/drivers/char/lrng/lrng_drng_mgr.c b/drivers/char/lrng/lrng_drng_mgr.c
index 6019a3ce7..3d9ed60a7 100644
--- a/drivers/char/lrng/lrng_drng_mgr.c
+++ b/drivers/char/lrng/lrng_drng_mgr.c
@@ -666,7 +666,7 @@ ssize_t lrng_get_seed(u64 *buf, size_t nbytes, unsigned int flags)
 	int ret;
 
 	/* Ensure buffer is aligned as required */
-	BUILD_BUG_ON(sizeof(buflen) < LRNG_KCAPI_ALIGN);
+	BUILD_BUG_ON(sizeof(buflen) > LRNG_KCAPI_ALIGN);
 	if (nbytes < sizeof(buflen))
 		return -EINVAL;
 
diff --git a/drivers/char/lrng/lrng_es_irq.c b/drivers/char/lrng/lrng_es_irq.c
index 97c5c1d26..7f5060808 100644
--- a/drivers/char/lrng/lrng_es_irq.c
+++ b/drivers/char/lrng/lrng_es_irq.c
@@ -707,13 +707,16 @@ static void lrng_irq_es_state(unsigned char *buf, size_t buflen)
 		 " per-CPU interrupt collection size: %u\n"
 		 " Standards compliance: %s\n"
 		 " High-resolution timer: %s\n"
-		 " Continuous compression: %s\n",
+		 " Continuous compression: %s\n"
+		 " Health test passed: %s\n",
 		 lrng_drng_init->hash_cb->hash_name(),
 		 lrng_irq_avail_entropy(0),
 		 LRNG_DATA_NUM_VALUES,
 		 lrng_sp80090b_compliant(lrng_int_es_irq) ? "SP800-90B " : "",
 		 lrng_highres_timer() ? "true" : "false",
-		 lrng_irq_continuous_compression ? "true" : "false");
+		 lrng_irq_continuous_compression ? "true" : "false",
+		 lrng_sp80090b_startup_complete_es(lrng_int_es_irq) ? "true" :
+								      "false");
 }
 
 struct lrng_es_cb lrng_es_irq = {
diff --git a/drivers/char/lrng/lrng_es_jent.c b/drivers/char/lrng/lrng_es_jent.c
index 3df99981c..7bff23628 100644
--- a/drivers/char/lrng/lrng_es_jent.c
+++ b/drivers/char/lrng/lrng_es_jent.c
@@ -30,6 +30,7 @@ MODULE_PARM_DESC(jent_entropy, "Entropy in bits of 256 data bits from Jitter RNG
 #endif
 
 static bool lrng_jent_initialized = false;
+static u32 lrng_jent_health_test_failure = 0;
 static struct rand_data *lrng_jent_state;
 
 static int __init lrng_jent_initialize(void)
@@ -98,6 +99,20 @@ static void lrng_jent_get(struct entropy_buf *eb, u32 requested_bits,
 
 	ret = jent_read_entropy(lrng_jent_state, eb->e[lrng_ext_es_jitter],
 				requested_bits >> 3);
+
+	/* Check if health test errors are identified */
+	/* RCT failure */
+	if (ret == -2 ||
+	    /* APT failure */
+	    ret == -3 ||
+	    /* Startup health failure */
+	    ret == 9) {
+		lrng_jent_health_test_failure++;
+
+		if (fips_enabled && (lrng_jent_health_test_failure > 1<<10))
+			panic("Jitter RNG had too many health failures\n");
+	} else
+		lrng_jent_health_test_failure = 0;
 	spin_unlock_irqrestore(&lrng_jent_lock, flags);
 
 	if (ret) {
@@ -119,9 +134,11 @@ static void lrng_jent_es_state(unsigned char *buf, size_t buflen)
 {
 	snprintf(buf, buflen,
 		 " Available entropy: %u\n"
-		 " Enabled: %s\n",
+		 " Enabled: %s\n"
+		 " Health test passed: %s\n",
 		 lrng_jent_poolsize(),
-		 lrng_jent_initialized ? "true" : "false");
+		 lrng_jent_initialized ? "true" : "false",
+		 lrng_jent_health_test_failure ? "false" : "true");
 }
 
 struct lrng_es_cb lrng_es_jent = {
diff --git a/drivers/char/lrng/lrng_es_krng.c b/drivers/char/lrng/lrng_es_krng.c
index 8844e8133..519ba640c 100644
--- a/drivers/char/lrng/lrng_es_krng.c
+++ b/drivers/char/lrng/lrng_es_krng.c
@@ -39,7 +39,7 @@ static int lrng_krng_adjust_entropy(void)
 		 entropylevel);
 	lrng_drng_force_reseed();
 	if (entropylevel)
-		lrng_force_fully_seeded();
+		lrng_es_add_entropy();
 	return 0;
 }
 
diff --git a/drivers/char/lrng/lrng_es_mgr.c b/drivers/char/lrng/lrng_es_mgr.c
index 1720df757..c74108c1e 100644
--- a/drivers/char/lrng/lrng_es_mgr.c
+++ b/drivers/char/lrng/lrng_es_mgr.c
@@ -262,7 +262,7 @@ void lrng_unset_fully_seeded(struct lrng_drng *drng)
 		lrng_state.lrng_fully_seeded = false;
 
 		/* If sufficient entropy is available, reseed now. */
-		lrng_force_fully_seeded();
+		lrng_es_add_entropy();
 	}
 }
 
diff --git a/drivers/char/lrng/lrng_es_sched.c b/drivers/char/lrng/lrng_es_sched.c
index c3abaa7ff..333c5b1ff 100644
--- a/drivers/char/lrng/lrng_es_sched.c
+++ b/drivers/char/lrng/lrng_es_sched.c
@@ -543,12 +543,16 @@ static void lrng_sched_es_state(unsigned char *buf, size_t buflen)
 		 " Available entropy: %u\n"
 		 " per-CPU scheduler event collection size: %u\n"
 		 " Standards compliance: %s\n"
-		 " High-resolution timer: %s\n",
+		 " High-resolution timer: %s\n"
+		 " Health test passed: %s\n",
 		 lrng_drng_init->hash_cb->hash_name(),
 		 lrng_sched_avail_entropy(0),
 		 LRNG_DATA_NUM_VALUES,
 		 lrng_sp80090b_compliant(lrng_int_es_sched) ? "SP800-90B " : "",
-		 lrng_highres_timer() ? "true" : "false");
+		 lrng_highres_timer() ? "true" : "false",
+		 lrng_sp80090b_startup_complete_es(lrng_int_es_sched) ?
+								      "true" :
+								      "false");
 }
 
 struct lrng_es_cb lrng_es_sched = {
diff --git a/drivers/char/lrng/lrng_health.c b/drivers/char/lrng/lrng_health.c
index a60c8378e..44fbffa0d 100644
--- a/drivers/char/lrng/lrng_health.c
+++ b/drivers/char/lrng/lrng_health.c
@@ -51,6 +51,9 @@ struct lrng_health_es_state {
 					LRNG_APT_WINDOW_SIZE)
 	bool sp80090b_startup_done;
 	atomic_t sp80090b_startup_blocks;
+
+#define LRNG_MAX_SUCCESSIVE_HEALTH_FAILURES	1024
+	atomic_t successive_failures;
 };
 
 #define LRNG_HEALTH_ES_INIT(x) \
@@ -60,7 +63,8 @@ struct lrng_health_es_state {
 	x.apt.apt_trigger = ATOMIC_INIT(LRNG_APT_WINDOW_SIZE), \
 	x.apt.apt_base_set = false, \
 	x.sp80090b_startup_blocks = ATOMIC_INIT(LRNG_SP80090B_STARTUP_BLOCKS), \
-	x.sp80090b_startup_done = false,
+	x.sp80090b_startup_done = false, \
+	x.successive_failures = ATOMIC_INIT(0),
 
 /* The health test code must operate lock-less */
 struct lrng_health {
@@ -125,6 +129,8 @@ static void lrng_sp80090b_startup(struct lrng_health *health,
 			es);
 		lrng_drng_force_reseed();
 
+		atomic_set(&es_state->successive_failures, 0);
+
 		/*
 		 * We cannot call lrng_es_add_entropy() as this may cause a
 		 * schedule operation while in scheduler context for the
@@ -154,6 +160,13 @@ static void lrng_sp80090b_startup_failure(struct lrng_health *health,
 	 */
 	atomic_set(&es_state->sp80090b_startup_blocks,
 		   LRNG_SP80090B_STARTUP_BLOCKS);
+
+	if (fips_enabled &&
+	    (atomic_add_return(1, &es_state->successive_failures) >
+	     LRNG_MAX_SUCCESSIVE_HEALTH_FAILURES)) {
+		panic("Too many successive SP800-90B health test errors for internal entropy source %u\n",
+		      es);
+	}
 }
 
 /*
diff --git a/drivers/char/lrng/lrng_switch.c b/drivers/char/lrng/lrng_switch.c
index 2df723489..aae755949 100644
--- a/drivers/char/lrng/lrng_switch.c
+++ b/drivers/char/lrng/lrng_switch.c
@@ -227,7 +227,7 @@ int lrng_set_drng_cb(const struct lrng_drng_cb *drng_cb)
 	ret = lrng_switch(drng_cb, lrng_drng_switch);
 	/* The switch may imply new entropy due to larger DRNG sec strength. */
 	if (!ret)
-		lrng_force_fully_seeded();
+		lrng_es_add_entropy();
 
 out:
 	mutex_unlock(&lrng_crypto_cb_update);
@@ -275,7 +275,7 @@ int lrng_set_hash_cb(const struct lrng_hash_cb *hash_cb)
 	 * any waiting entropy providers.
 	 */
 	if (!ret) {
-		lrng_force_fully_seeded();
+		lrng_es_add_entropy();
 		lrng_writer_wakeup();
 	}
 
-- 
2.39.2.501.gd9d677b2d8

