From 01a59de55ce94f43ad4db93e83dc75abd3aad9fb Mon Sep 17 00:00:00 2001
From: Stephan Mueller <smueller@chronox.de>
Date: Sat, 4 Mar 2023 17:37:19 +0100
Subject: [PATCH 29/31] lrng: permanent health error and FIPS 140-3 compliance

To comply with the requirement of FIPS 140-3 that a health failure is
treated as a FIPS module error (A module error implies that all services
of the FIPS module must cease to operate. For the kernel crypto API that
is achieved by stopping the kernel, a situation that should be avoided
unless a catastrophic event happened). in case the LRNG is considered
part of a FIPS module, the following approach is taken:

1. The APT/RCT alpha values that are specific to the entropy source are
considered intermittent errors as defined by [#SP800-90B:2018] section
4.3 bullet 2. This means that in case a health test error is identified
for the entropy source, a reset of the entropy source is performed.
This implies that all potentially collected entropy is considered to be
removed, the health test is reset and a complete new power-on health
test is performed. The entropy source does not produce data in this
case and reports zero entropy to the LRNG. Yet, after a successful
power-on health test, the entropy source becomes available again to
serve entropy to the LRNG.

2. The LRNG implements a permanent APT/RCT failure with an alpha rate
of \alpha=2^{-60} that causes the kernel to stop. This permanent
failure is implemented by identifying two back-to-back intermittent
health failures. The chosen alpha value is considered appropriate
considering it is to be interpreted as a false-positive rate according
to [#SP800-90B:2018] section 4.2. Assuming the LRNG is used in larger
numbers of Linux kernels which run all concurrently, the false-positive
rate must be applied to all those systems running concurrently which
implies that the likelihood of a false-positive to occur is much higher.
For example, if 2^{20} Linux kernels with the LRNG execute concurrently,
the a false-positive permanent failure now happens with a probability
of 2^{20}\cdot\alpha=2^{-40} which again falls into the range of alpha
stipulated by [#SP800-90B:2018] section 4.3.

The intermittent failure will always trigger a reset of the offending
entropy source. The permanent failure is therefore only intended in
case the LRNG operates as part of a FIPS 140-3 module. If the LRNG is
outside of a FIPS module, the permanent failure does not need to be
considered. The reason is that with constant health test failures, the
entropy source is effectively disabled anyway as it does not produce
data. Yet, it has the capability to recover in case the environment
changes such that no health test errors occur.

When the LRNG operates as part of a FIPS module, the permanent health
failure, the entire FIPS module must cease to operate. One way to
ensure that is by setting the kernel boot time variable of
lrng_es_mgr.lrng_panic_on_permanent_health_failure to true. This will
panic the kernel when a permanent health failure is detected which
ensures that the FIPS module will cease to be operational.

Signed-off-by: Stephan Mueller <smueller@chronox.de>
---
 drivers/char/lrng/lrng_definitions.h | 11 ++++++-
 drivers/char/lrng/lrng_es_irq.c      |  2 +-
 drivers/char/lrng/lrng_es_jent.c     |  7 +++--
 drivers/char/lrng/lrng_es_mgr.c      | 12 +++++++-
 drivers/char/lrng/lrng_es_mgr.h      |  1 +
 drivers/char/lrng/lrng_health.c      | 44 +++++++++++++++++++---------
 6 files changed, 58 insertions(+), 19 deletions(-)

diff --git a/drivers/char/lrng/lrng_definitions.h b/drivers/char/lrng/lrng_definitions.h
index c0d2fcff8..f6eb48e28 100644
--- a/drivers/char/lrng/lrng_definitions.h
+++ b/drivers/char/lrng/lrng_definitions.h
@@ -1,6 +1,6 @@
 /* SPDX-License-Identifier: GPL-2.0 OR BSD-2-Clause */
 /*
- * Copyright (C) 2022, Stephan Mueller <smueller@chronox.de>
+ * Copyright (C) 2022 - 2023, Stephan Mueller <smueller@chronox.de>
  */
 
 #ifndef _LRNG_DEFINITIONS_H
@@ -121,6 +121,15 @@
  */
 #define LRNG_POOL_SIZE	(sizeof(struct shash_desc) + HASH_MAX_DESCSIZE)
 
+/*
+ * Identification of a permanent health falure.
+ *
+ * Allow the given number of back-to-back health failures until incuring a
+ * permanent health failure. The chosen value implies an alpha of 2^-60
+ * considering that the alpha of one health failure is 2^-30
+ */
+#define LRNG_PERMANENT_HEALTH_FAILURES	2
+
 /****************************** Helper code ***********************************/
 
 static inline u32 lrng_fast_noise_entropylevel(u32 ent_bits, u32 requested_bits)
diff --git a/drivers/char/lrng/lrng_es_irq.c b/drivers/char/lrng/lrng_es_irq.c
index 7f5060808..4eb12872c 100644
--- a/drivers/char/lrng/lrng_es_irq.c
+++ b/drivers/char/lrng/lrng_es_irq.c
@@ -2,7 +2,7 @@
 /*
  * LRNG Slow Entropy Source: Interrupt data collection
  *
- * Copyright (C) 2022, Stephan Mueller <smueller@chronox.de>
+ * Copyright (C) 2022 - 2023, Stephan Mueller <smueller@chronox.de>
  */
 
 #define pr_fmt(fmt) KBUILD_MODNAME ": " fmt
diff --git a/drivers/char/lrng/lrng_es_jent.c b/drivers/char/lrng/lrng_es_jent.c
index 7bff23628..ce2a879ad 100644
--- a/drivers/char/lrng/lrng_es_jent.c
+++ b/drivers/char/lrng/lrng_es_jent.c
@@ -2,7 +2,7 @@
 /*
  * LRNG Fast Entropy Source: Jitter RNG
  *
- * Copyright (C) 2022, Stephan Mueller <smueller@chronox.de>
+ * Copyright (C) 2022 - 2023, Stephan Mueller <smueller@chronox.de>
  */
 
 #define pr_fmt(fmt) KBUILD_MODNAME ": " fmt
@@ -15,6 +15,7 @@
 #include "lrng_definitions.h"
 #include "lrng_es_aux.h"
 #include "lrng_es_jent.h"
+#include "lrng_es_mgr.h"
 
 /*
  * Estimated entropy of data is a 16th of LRNG_DRNG_SECURITY_STRENGTH_BITS.
@@ -109,7 +110,9 @@ static void lrng_jent_get(struct entropy_buf *eb, u32 requested_bits,
 	    ret == 9) {
 		lrng_jent_health_test_failure++;
 
-		if (fips_enabled && (lrng_jent_health_test_failure > 1<<10))
+		if (lrng_enforce_panic_on_permanent_health_failure() &&
+		    (lrng_jent_health_test_failure >
+		     LRNG_PERMANENT_HEALTH_FAILURES))
 			panic("Jitter RNG had too many health failures\n");
 	} else
 		lrng_jent_health_test_failure = 0;
diff --git a/drivers/char/lrng/lrng_es_mgr.c b/drivers/char/lrng/lrng_es_mgr.c
index c74108c1e..a7f68e9e2 100644
--- a/drivers/char/lrng/lrng_es_mgr.c
+++ b/drivers/char/lrng/lrng_es_mgr.c
@@ -2,7 +2,7 @@
 /*
  * LRNG Entropy sources management
  *
- * Copyright (C) 2022, Stephan Mueller <smueller@chronox.de>
+ * Copyright (C) 2022 - 2023, Stephan Mueller <smueller@chronox.de>
  */
 
 #define pr_fmt(fmt) KBUILD_MODNAME ": " fmt
@@ -90,8 +90,18 @@ module_param(ntg1, bool, 0444);
 MODULE_PARM_DESC(ntg1, "Enable AIS20/31 NTG.1 compliant seeding strategy\n");
 #endif
 
+/* Only panic the kernel on permanent health failure if this variable is true */
+static bool lrng_panic_on_permanent_health_failure = false;
+module_param(lrng_panic_on_permanent_health_failure, bool, 0444);
+MODULE_PARM_DESC(ntg1, "Panic on reaching permanent health failure - only required if LRNG is part of a FIPS 140-3 module\n");
+
 /********************************** Helper ***********************************/
 
+bool lrng_enforce_panic_on_permanent_health_failure(void)
+{
+	return lrng_panic_on_permanent_health_failure;
+}
+
 bool lrng_ntg1_2022_compliant(void)
 {
 	/* Implies use of /dev/random w/ O_SYNC / getrandom w/ GRND_RANDOM */
diff --git a/drivers/char/lrng/lrng_es_mgr.h b/drivers/char/lrng/lrng_es_mgr.h
index cc24f2390..7c4fbcb59 100644
--- a/drivers/char/lrng/lrng_es_mgr.h
+++ b/drivers/char/lrng/lrng_es_mgr.h
@@ -23,6 +23,7 @@ extern struct lrng_es_cb *lrng_es[];
 #define for_each_lrng_es(ctr)		\
 	for ((ctr) = 0; (ctr) < lrng_ext_es_last; (ctr)++)
 
+bool lrng_enforce_panic_on_permanent_health_failure(void);
 bool lrng_ntg1_2022_compliant(void);
 bool lrng_pool_all_numa_nodes_seeded_get(void);
 bool lrng_state_min_seeded(void);
diff --git a/drivers/char/lrng/lrng_health.c b/drivers/char/lrng/lrng_health.c
index 44fbffa0d..c52229cbd 100644
--- a/drivers/char/lrng/lrng_health.c
+++ b/drivers/char/lrng/lrng_health.c
@@ -2,7 +2,7 @@
 /*
  * Entropy Source and DRNG Manager (LRNG) Health Testing
  *
- * Copyright (C) 2022, Stephan Mueller <smueller@chronox.de>
+ * Copyright (C) 2022 - 2023, Stephan Mueller <smueller@chronox.de>
  */
 
 #define pr_fmt(fmt) KBUILD_MODNAME ": " fmt
@@ -10,6 +10,7 @@
 #include <linux/fips.h>
 #include <linux/module.h>
 
+#include "lrng_definitions.h"
 #include "lrng_es_mgr.h"
 #include "lrng_health.h"
 
@@ -23,6 +24,8 @@ struct lrng_stuck_test {
 /* Repetition Count Test */
 struct lrng_rct {
 	atomic_t rct_count;	/* Number of stuck values */
+
+	atomic_t successive_failures;	/* Permanent health failures */
 };
 
 /* Adaptive Proportion Test */
@@ -35,6 +38,8 @@ struct lrng_apt {
 	atomic_t apt_count;		/* APT counter */
 	atomic_t apt_base;		/* APT base reference */
 
+	atomic_t successive_failures;	/* Permanent health failures */
+
 	atomic_t apt_trigger;
 	bool apt_base_set;	/* Is APT base set? */
 };
@@ -51,20 +56,18 @@ struct lrng_health_es_state {
 					LRNG_APT_WINDOW_SIZE)
 	bool sp80090b_startup_done;
 	atomic_t sp80090b_startup_blocks;
-
-#define LRNG_MAX_SUCCESSIVE_HEALTH_FAILURES	1024
-	atomic_t successive_failures;
 };
 
 #define LRNG_HEALTH_ES_INIT(x) \
 	x.rct.rct_count = ATOMIC_INIT(0), \
+	x.rct.successive_failures = ATOMIC_INIT(0), \
 	x.apt.apt_count = ATOMIC_INIT(0), \
 	x.apt.apt_base = ATOMIC_INIT(-1), \
+	x.apt.successive_failures = ATOMIC_INIT(0), \
 	x.apt.apt_trigger = ATOMIC_INIT(LRNG_APT_WINDOW_SIZE), \
 	x.apt.apt_base_set = false, \
 	x.sp80090b_startup_blocks = ATOMIC_INIT(LRNG_SP80090B_STARTUP_BLOCKS), \
-	x.sp80090b_startup_done = false, \
-	x.successive_failures = ATOMIC_INIT(0),
+	x.sp80090b_startup_done = false,
 
 /* The health test code must operate lock-less */
 struct lrng_health {
@@ -129,8 +132,6 @@ static void lrng_sp80090b_startup(struct lrng_health *health,
 			es);
 		lrng_drng_force_reseed();
 
-		atomic_set(&es_state->successive_failures, 0);
-
 		/*
 		 * We cannot call lrng_es_add_entropy() as this may cause a
 		 * schedule operation while in scheduler context for the
@@ -147,6 +148,7 @@ static void lrng_sp80090b_startup_failure(struct lrng_health *health,
 {
 	struct lrng_health_es_state *es_state = &health->es_state[es];
 
+
 	/* Reset of LRNG and its entropy - NOTE: we are in atomic context */
 	lrng_reset();
 
@@ -161,11 +163,17 @@ static void lrng_sp80090b_startup_failure(struct lrng_health *health,
 	atomic_set(&es_state->sp80090b_startup_blocks,
 		   LRNG_SP80090B_STARTUP_BLOCKS);
 
-	if (fips_enabled &&
-	    (atomic_add_return(1, &es_state->successive_failures) >
-	     LRNG_MAX_SUCCESSIVE_HEALTH_FAILURES)) {
-		panic("Too many successive SP800-90B health test errors for internal entropy source %u\n",
-		      es);
+	if (lrng_enforce_panic_on_permanent_health_failure()) {
+		struct lrng_apt *apt = &es_state->apt;
+		struct lrng_rct *rct = &es_state->rct;
+
+		if ((atomic_read(&apt->successive_failures) >=
+		     LRNG_PERMANENT_HEALTH_FAILURES) ||
+		    (atomic_read(&rct->successive_failures) >=
+		     LRNG_PERMANENT_HEALTH_FAILURES)) {
+			panic("Too many successive SP800-90B health test errors for internal entropy source %u\n",
+			      es);
+		}
 	}
 }
 
@@ -270,8 +278,13 @@ static void lrng_apt_insert(struct lrng_health *health,
 	if (now_time == (unsigned int)atomic_read(&apt->apt_base)) {
 		u32 apt_val = (u32)atomic_inc_return_relaxed(&apt->apt_count);
 
-		if (apt_val >= CONFIG_LRNG_APT_CUTOFF)
+		if (apt_val >= CONFIG_LRNG_APT_CUTOFF) {
+			atomic_inc(&apt->successive_failures);
 			lrng_sp80090b_failure(health, es);
+		} else {
+			/* Reset any successive failure count */
+			atomic_set(&apt->successive_failures, 0);
+		}
 	}
 
 	if (atomic_dec_and_test(&apt->apt_trigger)) {
@@ -336,10 +349,13 @@ static void lrng_rct(struct lrng_health *health, enum lrng_internal_es es,
 			 */
 			lrng_apt_restart(&es_state->apt);
 
+			atomic_inc(&rct->successive_failures);
 			lrng_sp80090b_failure(health, es);
 		}
 	} else {
 		atomic_set(&rct->rct_count, 0);
+		/* Reset any successive failure count */
+		atomic_set(&rct->successive_failures, 0);
 	}
 }
 
-- 
2.39.2.501.gd9d677b2d8

