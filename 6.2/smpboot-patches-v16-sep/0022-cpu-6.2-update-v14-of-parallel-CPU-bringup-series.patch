From dff7e28a0eec8ae79e2836379e6997172a83461f Mon Sep 17 00:00:00 2001
From: Oleksandr Natalenko <oleksandr@natalenko.name>
Date: Wed, 8 Mar 2023 13:52:05 +0100
Subject: [PATCH 22/26] cpu-6.2: update v14 of parallel CPU bringup series

Signed-off-by: Oleksandr Natalenko <oleksandr@natalenko.name>
---
 arch/x86/include/asm/cpu.h     |  1 +
 arch/x86/kernel/cpu/topology.c |  2 +-
 arch/x86/kernel/head_64.S      |  2 +-
 arch/x86/kernel/smpboot.c      | 59 +++++++++++++++-------------------
 4 files changed, 29 insertions(+), 35 deletions(-)

diff --git a/arch/x86/include/asm/cpu.h b/arch/x86/include/asm/cpu.h
index 78796b98a..ef8ba318d 100644
--- a/arch/x86/include/asm/cpu.h
+++ b/arch/x86/include/asm/cpu.h
@@ -97,5 +97,6 @@ static inline bool intel_cpu_signatures_match(unsigned int s1, unsigned int p1,
 extern u64 x86_read_arch_cap_msr(void);
 int intel_find_matching_signature(void *mc, unsigned int csig, int cpf);
 int intel_microcode_sanity_check(void *mc, bool print_err, int hdr_type);
+int check_extended_topology_leaf(int leaf);
 
 #endif /* _ASM_X86_CPU_H */
diff --git a/arch/x86/kernel/cpu/topology.c b/arch/x86/kernel/cpu/topology.c
index 5e868b62a..1dc20f4df 100644
--- a/arch/x86/kernel/cpu/topology.c
+++ b/arch/x86/kernel/cpu/topology.c
@@ -32,7 +32,7 @@ EXPORT_SYMBOL(__max_die_per_package);
 /*
  * Check if given CPUID extended topology "leaf" is implemented
  */
-static int check_extended_topology_leaf(int leaf)
+int check_extended_topology_leaf(int leaf)
 {
 	unsigned int eax, ebx, ecx, edx;
 
diff --git a/arch/x86/kernel/head_64.S b/arch/x86/kernel/head_64.S
index 156a292e9..f0ed32a7c 100644
--- a/arch/x86/kernel/head_64.S
+++ b/arch/x86/kernel/head_64.S
@@ -271,7 +271,7 @@ SYM_INNER_LABEL(secondary_startup_64_no_verify, SYM_L_GLOBAL)
 	wrmsr
 
 	/* Perform GHCB MSR protocol */
-	vmgexit
+	rep; vmmcall		/* vmgexit */
 
 	/*
 	 * Get the result. After the RDMSR:
diff --git a/arch/x86/kernel/smpboot.c b/arch/x86/kernel/smpboot.c
index ae93cad0d..24c618834 100644
--- a/arch/x86/kernel/smpboot.c
+++ b/arch/x86/kernel/smpboot.c
@@ -1008,7 +1008,8 @@ static void announce_cpu(int cpu, int apicid)
 		node_width = num_digits(num_possible_nodes()) + 1; /* + '#' */
 
 	if (cpu == 1)
-		printk(KERN_INFO "x86: Booting SMP configuration:\n");
+		printk(KERN_INFO "x86: Booting SMP configuration in %s:\n",
+		       do_parallel_bringup ? "parallel" : "series");
 
 	if (system_state < SYSTEM_RUNNING) {
 		if (node != current_node) {
@@ -1510,68 +1511,60 @@ void __init smp_prepare_cpus_common(void)
 	set_cpu_sibling_map(0);
 }
 
-
 /*
  * We can do 64-bit AP bringup in parallel if the CPU reports its APIC
  * ID in CPUID (either leaf 0x0B if we need the full APIC ID in X2APIC
  * mode, or leaf 0x01 if 8 bits are sufficient). Otherwise it's too
- * hard. And not for SEV-ES guests because they can't use CPUID that
- * early.
+ * hard.
  */
-static bool __init prepare_parallel_bringup(void)
+static bool prepare_parallel_bringup(void)
 {
-	if (IS_ENABLED(CONFIG_X86_32) || boot_cpu_data.cpuid_level < 1)
+	bool has_sev_es = IS_ENABLED(CONFIG_AMD_MEM_ENCRYPT) &&
+		static_branch_unlikely(&sev_es_enable_key);
+
+	if (IS_ENABLED(CONFIG_X86_32))
 		return false;
 
-	if (x2apic_mode) {
-		unsigned int eax, ebx, ecx, edx;
+	/*
+	 * Encrypted guests other than SEV-ES (in the future) will need to
+	 * implement an early way of finding the APIC ID, since they will
+	 * presumably block direct CPUID too. Be kind to our future selves
+	 * by warning here instead of just letting them break. Parallel
+	 * startup doesn't have to be in the first round of enabling patches
+	 * for any such technology.
+	 */
+	if (cc_platform_has(CC_ATTR_GUEST_STATE_ENCRYPT) && !has_sev_es) {
+		pr_info("Disabling parallel bringup due to guest memory encryption\n");
+		return false;
+	}
 
-		if (boot_cpu_data.cpuid_level < 0xb)
+	if (x2apic_mode || has_sev_es) {
+		if (boot_cpu_data.cpuid_level < 0x0b)
 			return false;
 
-		/*
-		 * To support parallel bringup in x2apic mode, the AP will need
-		 * to obtain its APIC ID from CPUID 0x0B, since CPUID 0x01 has
-		 * only 8 bits. Check that it is present and seems correct.
-		 */
-		cpuid_count(0xb, 0, &eax, &ebx, &ecx, &edx);
-
-		/*
-		 * AMD says that if executed with an umimplemented level in
-		 * ECX, then it will return all zeroes in EAX. Intel says it
-		 * will return zeroes in both EAX and EBX. Checking only EAX
-		 * should be sufficient.
-		 */
-		if (!eax) {
+		if (check_extended_topology_leaf(0x0b) != 0) {
 			pr_info("Disabling parallel bringup because CPUID 0xb looks untrustworthy\n");
 			return false;
 		}
 
-		if (IS_ENABLED(AMD_MEM_ENCRYPT) && static_branch_unlikely(&sev_es_enable_key)) {
+		if (has_sev_es) {
 			pr_debug("Using SEV-ES CPUID 0xb for parallel CPU startup\n");
 			smpboot_control = STARTUP_APICID_SEV_ES;
-		} else if (cc_platform_has(CC_ATTR_GUEST_STATE_ENCRYPT)) {
-			/*
-			 * Other forms of memory encryption need to implement a way of
-			 * finding the APs' APIC IDs that early.
-			 */
-			return false;
 		} else {
 			pr_debug("Using CPUID 0xb for parallel CPU startup\n");
 			smpboot_control = STARTUP_APICID_CPUID_0B;
 		}
 	} else {
-		if (cc_platform_has(CC_ATTR_GUEST_STATE_ENCRYPT))
+		/* Without X2APIC, what's in CPUID 0x01 should suffice. */
+		if (boot_cpu_data.cpuid_level < 0x01)
 			return false;
 
-		/* Without X2APIC, what's in CPUID 0x01 should suffice. */
 		pr_debug("Using CPUID 0x1 for parallel CPU startup\n");
 		smpboot_control = STARTUP_APICID_CPUID_01;
 	}
 
 	cpuhp_setup_state_nocalls(CPUHP_BP_PARALLEL_DYN, "x86/cpu:kick",
 				  native_cpu_kick, NULL);
-
 	return true;
 }
 
-- 
2.39.2.501.gd9d677b2d8

