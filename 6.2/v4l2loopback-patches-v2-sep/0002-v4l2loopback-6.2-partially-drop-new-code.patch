From 771c950a1037ee7550dcbc259f987917fb63d00e Mon Sep 17 00:00:00 2001
From: Oleksandr Natalenko <oleksandr@natalenko.name>
Date: Thu, 23 Mar 2023 19:53:55 +0100
Subject: [PATCH 2/2] v4l2loopback-6.2: partially drop new code

Link: https://codeberg.org/pf-kernel/linux/issues/7

Signed-off-by: Oleksandr Natalenko <oleksandr@natalenko.name>
---
 drivers/media/v4l2-core/v4l2loopback.c | 146 +++++--------------------
 1 file changed, 30 insertions(+), 116 deletions(-)

diff --git a/drivers/media/v4l2-core/v4l2loopback.c b/drivers/media/v4l2-core/v4l2loopback.c
index 2ab1f760c..45be7be8a 100644
--- a/drivers/media/v4l2-core/v4l2loopback.c
+++ b/drivers/media/v4l2-core/v4l2loopback.c
@@ -66,43 +66,32 @@ MODULE_LICENSE("GPL");
 /*
  * helpers
  */
-#define dprintk(fmt, args...)                                          \
-	do {                                                           \
-		if (debug > 0) {                                       \
+#define dprintk(fmt, args...)                                         \
+	do {                                                          \
+		if (debug > 0) {                                      \
 			printk(KERN_INFO "v4l2-loopback[" __stringify( \
-				       __LINE__) "], pid(%d):  " fmt,  \
-			       task_pid_nr(current), ##args);          \
-		}                                                      \
+				       __LINE__) "]: " fmt,           \
+			       ##args);                               \
+		}                                                     \
 	} while (0)
 
-#define MARK()                                                             \
-	do {                                                               \
-		if (debug > 1) {                                           \
-			printk(KERN_INFO "%s:%d[%s], pid(%d)\n", __FILE__, \
-			       __LINE__, __func__, task_pid_nr(current));  \
-		}                                                          \
+#define MARK()                                                              \
+	do {                                                                \
+		if (debug > 1) {                                            \
+			printk(KERN_INFO "%s:%d[%s]\n", __FILE__, __LINE__, \
+			       __func__);                                   \
+		}                                                           \
 	} while (0)
 
-#define dprintkrw(fmt, args...)                                        \
-	do {                                                           \
-		if (debug > 2) {                                       \
+#define dprintkrw(fmt, args...)                                       \
+	do {                                                          \
+		if (debug > 2) {                                      \
 			printk(KERN_INFO "v4l2-loopback[" __stringify( \
-				       __LINE__) "], pid(%d): " fmt,   \
-			       task_pid_nr(current), ##args);          \
-		}                                                      \
+				       __LINE__) "]: " fmt,           \
+			       ##args);                               \
+		}                                                     \
 	} while (0)
 
-/* TODO: Make sure that function is never interrupted. */
-static inline int mod_inc(int *number, int mod)
-{
-	int result;
-	result = (*number + 1) % mod;
-	if (unlikely(result < 0))
-		result += mod;
-	*number = result;
-	return result;
-}
-
 static inline void v4l2l_get_timestamp(struct v4l2_buffer *b)
 {
 	/* ktime_get_ts is considered deprecated, so use ktime_get_ts64 if possible */
@@ -223,7 +212,7 @@ static DEFINE_IDR(v4l2loopback_index_idr);
 static DEFINE_MUTEX(v4l2loopback_ctl_mutex);
 
 /* frame intervals */
-#define V4L2LOOPBACK_FPS_MIN 0
+#define V4L2LOOPBACK_FPS_MIN 1
 #define V4L2LOOPBACK_FPS_MAX 1000
 
 /* control IDs */
@@ -352,7 +341,6 @@ struct v4l2_loopback_device {
 	int ready_for_output; /* set to true when no writer is currently attached
 			       * this differs slightly from !ready_for_capture,
 			       * e.g. when using fallback images */
-	int active_readers; /* increase if any reader starts streaming */
 	int announce_all_caps; /* set to false, if device caps (OUTPUT/CAPTURE)
                                 * should only be announced if the resp. "ready"
                                 * flag is set; default=TRUE */
@@ -603,17 +591,6 @@ static void v4l2loopback_create_sysfs(struct video_device *vdev)
 	dev_err(&vdev->dev, "%s error: %d\n", __func__, res);
 }
 
-/* Event APIs */
-
-#define V4L2LOOPBACK_EVENT_BASE (V4L2_EVENT_PRIVATE_START)
-#define V4L2LOOPBACK_EVENT_OFFSET 0x08E00000
-#define V4L2_EVENT_PRI_CLIENT_USAGE \
-	(V4L2LOOPBACK_EVENT_BASE + V4L2LOOPBACK_EVENT_OFFSET + 1)
-
-struct v4l2_event_client_usage {
-	__u32 count;
-};
-
 /* global module data */
 /* find a device based on it's device-number (e.g. '3' for /dev/video3) */
 struct v4l2loopback_lookup_cb_data {
@@ -668,7 +645,6 @@ static struct v4l2_loopback_device *v4l2loopback_getdevice(struct file *f)
 }
 
 /* forward declarations */
-static void client_usage_queue_event(struct video_device *vdev);
 static void init_buffers(struct v4l2_loopback_device *dev);
 static int allocate_buffers(struct v4l2_loopback_device *dev);
 static void free_buffers(struct v4l2_loopback_device *dev);
@@ -1424,8 +1400,9 @@ static int vidioc_reqbufs(struct file *file, void *fh,
 			i = dev->write_position;
 			list_for_each_entry(pos, &dev->outbufs_list,
 					    list_head) {
-				dev->bufpos2index[mod_inc(&i, b->count)] =
+				dev->bufpos2index[i % b->count] =
 					pos->buffer.index;
+				++i;
 			}
 		}
 
@@ -1489,9 +1466,10 @@ static void buffer_written(struct v4l2_loopback_device *dev,
 	del_timer_sync(&dev->timeout_timer);
 	spin_lock_bh(&dev->lock);
 
-	dev->bufpos2index[mod_inc(&dev->write_position, dev->used_buffers)] =
+	dev->bufpos2index[dev->write_position % dev->used_buffers] =
 		buf->buffer.index;
 	list_move_tail(&buf->list_head, &dev->outbufs_list);
+	++dev->write_position;
 	dev->reread_count = 0;
 
 	check_timers(dev);
@@ -1586,7 +1564,8 @@ static int get_capture_buffer(struct file *file)
 		if (dev->write_position >
 		    opener->read_position + dev->used_buffers)
 			opener->read_position = dev->write_position - 1;
-		pos = mod_inc(&opener->read_position, dev->used_buffers);
+		pos = opener->read_position % dev->used_buffers;
+		++opener->read_position;
 	}
 	timeout_happened = dev->timeout_happened;
 	dev->timeout_happened = 0;
@@ -1682,8 +1661,6 @@ static int vidioc_streamon(struct file *file, void *fh, enum v4l2_buf_type type)
 		if (!dev->ready_for_capture)
 			return -EIO;
 		opener->type = READER;
-		dev->active_readers++;
-		client_usage_queue_event(dev->vdev);
 		return 0;
 	default:
 		return -EINVAL;
@@ -1698,24 +1675,17 @@ static int vidioc_streamoff(struct file *file, void *fh,
 			    enum v4l2_buf_type type)
 {
 	struct v4l2_loopback_device *dev;
-	struct v4l2_loopback_opener *opener;
-
 	MARK();
 	dprintk("%d\n", type);
 
 	dev = v4l2loopback_getdevice(file);
-	opener = fh_to_opener(fh);
+
 	switch (type) {
 	case V4L2_BUF_TYPE_VIDEO_OUTPUT:
 		if (dev->ready_for_capture > 0)
 			dev->ready_for_capture--;
 		return 0;
 	case V4L2_BUF_TYPE_VIDEO_CAPTURE:
-		if (opener->type == READER) {
-			opener->type = 0;
-			dev->active_readers--;
-			client_usage_queue_event(dev->vdev);
-		}
 		return 0;
 	default:
 		return -EINVAL;
@@ -1738,59 +1708,12 @@ static int vidiocgmbuf(struct file *file, void *fh, struct video_mbuf *p)
 }
 #endif
 
-static void client_usage_queue_event(struct video_device *vdev)
-{
-	struct v4l2_event ev;
-	struct v4l2_loopback_device *dev;
-
-	dev = container_of(vdev->v4l2_dev, struct v4l2_loopback_device,
-			   v4l2_dev);
-
-	memset(&ev, 0, sizeof(ev));
-	ev.type = V4L2_EVENT_PRI_CLIENT_USAGE;
-	((struct v4l2_event_client_usage *)&ev.u)->count = dev->active_readers;
-
-	v4l2_event_queue(vdev, &ev);
-}
-
-static int client_usage_ops_add(struct v4l2_subscribed_event *sev,
-				unsigned elems)
-{
-	if (!(sev->flags & V4L2_EVENT_SUB_FL_SEND_INITIAL))
-		return 0;
-
-	client_usage_queue_event(sev->fh->vdev);
-	return 0;
-}
-
-static void client_usage_ops_replace(struct v4l2_event *old,
-				     const struct v4l2_event *new)
-{
-	*((struct v4l2_event_client_usage *)&old->u) =
-		*((struct v4l2_event_client_usage *)&new->u);
-}
-
-static void client_usage_ops_merge(const struct v4l2_event *old,
-				   struct v4l2_event *new)
-{
-	*((struct v4l2_event_client_usage *)&new->u) =
-		*((struct v4l2_event_client_usage *)&old->u);
-}
-
-const struct v4l2_subscribed_event_ops client_usage_ops = {
-	.add = client_usage_ops_add,
-	.replace = client_usage_ops_replace,
-	.merge = client_usage_ops_merge,
-};
-
 static int vidioc_subscribe_event(struct v4l2_fh *fh,
 				  const struct v4l2_event_subscription *sub)
 {
 	switch (sub->type) {
 	case V4L2_EVENT_CTRL:
 		return v4l2_ctrl_subscribe_event(fh, sub);
-	case V4L2_EVENT_PRI_CLIENT_USAGE:
-		return v4l2_event_subscribe(fh, sub, 0, &client_usage_ops);
 	}
 
 	return -EINVAL;
@@ -1804,8 +1727,6 @@ static void vm_open(struct vm_area_struct *vma)
 
 	buf = vma->vm_private_data;
 	buf->use_count++;
-
-	buf->buffer.flags |= V4L2_BUF_FLAG_MAPPED;
 }
 
 static void vm_close(struct vm_area_struct *vma)
@@ -1815,9 +1736,6 @@ static void vm_close(struct vm_area_struct *vma)
 
 	buf = vma->vm_private_data;
 	buf->use_count--;
-
-	if (buf->use_count <= 0)
-		buf->buffer.flags &= ~V4L2_BUF_FLAG_MAPPED;
 }
 
 static struct vm_operations_struct vm_ops = {
@@ -1896,6 +1814,7 @@ static int v4l2_loopback_mmap(struct file *file, struct vm_area_struct *vma)
 
 	vma->vm_ops = &vm_ops;
 	vma->vm_private_data = buffer;
+	buffer->buffer.flags |= V4L2_BUF_FLAG_MAPPED;
 
 	vm_open(vma);
 
@@ -1994,16 +1913,14 @@ static int v4l2_loopback_close(struct file *file)
 {
 	struct v4l2_loopback_opener *opener;
 	struct v4l2_loopback_device *dev;
-	int is_writer = 0, is_reader = 0;
+	int iswriter = 0;
 	MARK();
 
 	opener = fh_to_opener(file->private_data);
 	dev = v4l2loopback_getdevice(file);
 
 	if (WRITER == opener->type)
-		is_writer = 1;
-	if (READER == opener->type)
-		is_reader = 1;
+		iswriter = 1;
 
 	atomic_dec(&dev->open_count);
 	if (dev->open_count.counter == 0) {
@@ -2016,11 +1933,8 @@ static int v4l2_loopback_close(struct file *file)
 	v4l2_fh_exit(&opener->fh);
 
 	kfree(opener);
-	if (is_writer)
+	if (iswriter) {
 		dev->ready_for_output = 1;
-	if (is_reader) {
-		dev->active_readers--;
-		client_usage_queue_event(dev->vdev);
 	}
 	MARK();
 	return 0;
-- 
2.40.0.71.g950264636c

