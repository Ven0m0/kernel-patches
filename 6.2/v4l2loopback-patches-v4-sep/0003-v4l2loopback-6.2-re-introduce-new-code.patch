From a5aef3c57fb4eb8834e3d85c28bbf9fd797b5a45 Mon Sep 17 00:00:00 2001
From: Oleksandr Natalenko <oleksandr@natalenko.name>
Date: Sun, 9 Apr 2023 23:15:55 +0200
Subject: [PATCH 3/4] v4l2loopback-6.2: re-introduce new code

This updates the driver to the up-to-date git state + fix against freeze
on first frame.

Fixes: https://github.com/umlaeute/v4l2loopback/issues/535
Fixes: https://github.com/umlaeute/v4l2loopback/issues/519
Link: https://github.com/umlaeute/v4l2loopback/pull/536

Signed-off-by: Oleksandr Natalenko <oleksandr@natalenko.name>
---
 drivers/media/v4l2-core/v4l2loopback.c | 142 +++++++++++++++++++------
 1 file changed, 110 insertions(+), 32 deletions(-)

diff --git a/drivers/media/v4l2-core/v4l2loopback.c b/drivers/media/v4l2-core/v4l2loopback.c
index 45be7be8a..33a9d0da6 100644
--- a/drivers/media/v4l2-core/v4l2loopback.c
+++ b/drivers/media/v4l2-core/v4l2loopback.c
@@ -66,30 +66,30 @@ MODULE_LICENSE("GPL");
 /*
  * helpers
  */
-#define dprintk(fmt, args...)                                         \
-	do {                                                          \
-		if (debug > 0) {                                      \
+#define dprintk(fmt, args...)                                          \
+	do {                                                           \
+		if (debug > 0) {                                       \
 			printk(KERN_INFO "v4l2-loopback[" __stringify( \
-				       __LINE__) "]: " fmt,           \
-			       ##args);                               \
-		}                                                     \
+				       __LINE__) "], pid(%d):  " fmt,  \
+			       task_pid_nr(current), ##args);          \
+		}                                                      \
 	} while (0)
 
-#define MARK()                                                              \
-	do {                                                                \
-		if (debug > 1) {                                            \
-			printk(KERN_INFO "%s:%d[%s]\n", __FILE__, __LINE__, \
-			       __func__);                                   \
-		}                                                           \
+#define MARK()                                                             \
+	do {                                                               \
+		if (debug > 1) {                                           \
+			printk(KERN_INFO "%s:%d[%s], pid(%d)\n", __FILE__, \
+			       __LINE__, __func__, task_pid_nr(current));  \
+		}                                                          \
 	} while (0)
 
-#define dprintkrw(fmt, args...)                                       \
-	do {                                                          \
-		if (debug > 2) {                                      \
+#define dprintkrw(fmt, args...)                                        \
+	do {                                                           \
+		if (debug > 2) {                                       \
 			printk(KERN_INFO "v4l2-loopback[" __stringify( \
-				       __LINE__) "]: " fmt,           \
-			       ##args);                               \
-		}                                                     \
+				       __LINE__) "], pid(%d): " fmt,   \
+			       task_pid_nr(current), ##args);          \
+		}                                                      \
 	} while (0)
 
 static inline void v4l2l_get_timestamp(struct v4l2_buffer *b)
@@ -212,7 +212,7 @@ static DEFINE_IDR(v4l2loopback_index_idr);
 static DEFINE_MUTEX(v4l2loopback_ctl_mutex);
 
 /* frame intervals */
-#define V4L2LOOPBACK_FPS_MIN 1
+#define V4L2LOOPBACK_FPS_MIN 0
 #define V4L2LOOPBACK_FPS_MAX 1000
 
 /* control IDs */
@@ -313,7 +313,7 @@ struct v4l2_loopback_device {
 	int used_buffers; /* number of the actually used buffers */
 	int max_openers; /* how many times can this device be opened */
 
-	int write_position; /* number of last written frame + 1 */
+	s64 write_position; /* number of last written frame + 1 */
 	struct list_head outbufs_list; /* buffers in output DQBUF order */
 	int bufpos2index
 		[MAX_BUFFERS]; /* mapping of (read/write_position % used_buffers)
@@ -341,6 +341,7 @@ struct v4l2_loopback_device {
 	int ready_for_output; /* set to true when no writer is currently attached
 			       * this differs slightly from !ready_for_capture,
 			       * e.g. when using fallback images */
+	int active_readers; /* increase if any reader starts streaming */
 	int announce_all_caps; /* set to false, if device caps (OUTPUT/CAPTURE)
                                 * should only be announced if the resp. "ready"
                                 * flag is set; default=TRUE */
@@ -366,7 +367,7 @@ enum opener_type {
 /* struct keeping state and type of opener */
 struct v4l2_loopback_opener {
 	enum opener_type type;
-	int read_position; /* number of last processed frame + 1 or
+	s64 read_position; /* number of last processed frame + 1 or
 			    * write_position - 1 if reader went out of sync */
 	unsigned int reread_count;
 	struct v4l2_buffer *buffers;
@@ -591,6 +592,17 @@ static void v4l2loopback_create_sysfs(struct video_device *vdev)
 	dev_err(&vdev->dev, "%s error: %d\n", __func__, res);
 }
 
+/* Event APIs */
+
+#define V4L2LOOPBACK_EVENT_BASE (V4L2_EVENT_PRIVATE_START)
+#define V4L2LOOPBACK_EVENT_OFFSET 0x08E00000
+#define V4L2_EVENT_PRI_CLIENT_USAGE \
+	(V4L2LOOPBACK_EVENT_BASE + V4L2LOOPBACK_EVENT_OFFSET + 1)
+
+struct v4l2_event_client_usage {
+	__u32 count;
+};
+
 /* global module data */
 /* find a device based on it's device-number (e.g. '3' for /dev/video3) */
 struct v4l2loopback_lookup_cb_data {
@@ -645,6 +657,7 @@ static struct v4l2_loopback_device *v4l2loopback_getdevice(struct file *f)
 }
 
 /* forward declarations */
+static void client_usage_queue_event(struct video_device *vdev);
 static void init_buffers(struct v4l2_loopback_device *dev);
 static int allocate_buffers(struct v4l2_loopback_device *dev);
 static void free_buffers(struct v4l2_loopback_device *dev);
@@ -1397,7 +1410,7 @@ static int vidioc_reqbufs(struct file *file, void *fh,
 
 			/* after we update dev->used_buffers, buffers in outbufs_list will
 			 * correspond to dev->write_position + [0;b->count-1] range */
-			i = dev->write_position;
+			i = dev->write_position % b->count;
 			list_for_each_entry(pos, &dev->outbufs_list,
 					    list_head) {
 				dev->bufpos2index[i % b->count] =
@@ -1503,8 +1516,8 @@ static int vidioc_qbuf(struct file *file, void *fh, struct v4l2_buffer *buf)
 		set_queued(b);
 		return 0;
 	case V4L2_BUF_TYPE_VIDEO_OUTPUT:
-		dprintkrw("output QBUF pos: %d index: %d\n",
-			  dev->write_position, index);
+		dprintkrw("output QBUF pos: %lld index: %d\n",
+			  (long long)dev->write_position, index);
 		if (buf->timestamp.tv_sec == 0 && buf->timestamp.tv_usec == 0)
 			v4l2l_get_timestamp(&b->buffer);
 		else
@@ -1608,8 +1621,8 @@ static int vidioc_dqbuf(struct file *file, void *fh, struct v4l2_buffer *buf)
 		index = get_capture_buffer(file);
 		if (index < 0)
 			return index;
-		dprintkrw("capture DQBUF pos: %d index: %d\n",
-			  opener->read_position - 1, index);
+		dprintkrw("capture DQBUF pos: %lld index: %d\n",
+			  (long long)(opener->read_position - 1), index);
 		if (!(dev->buffers[index].buffer.flags &
 		      V4L2_BUF_FLAG_MAPPED)) {
 			dprintk("trying to return not mapped buf[%d]\n", index);
@@ -1661,6 +1674,8 @@ static int vidioc_streamon(struct file *file, void *fh, enum v4l2_buf_type type)
 		if (!dev->ready_for_capture)
 			return -EIO;
 		opener->type = READER;
+		dev->active_readers++;
+		client_usage_queue_event(dev->vdev);
 		return 0;
 	default:
 		return -EINVAL;
@@ -1675,17 +1690,24 @@ static int vidioc_streamoff(struct file *file, void *fh,
 			    enum v4l2_buf_type type)
 {
 	struct v4l2_loopback_device *dev;
+	struct v4l2_loopback_opener *opener;
+
 	MARK();
 	dprintk("%d\n", type);
 
 	dev = v4l2loopback_getdevice(file);
-
+	opener = fh_to_opener(fh);
 	switch (type) {
 	case V4L2_BUF_TYPE_VIDEO_OUTPUT:
 		if (dev->ready_for_capture > 0)
 			dev->ready_for_capture--;
 		return 0;
 	case V4L2_BUF_TYPE_VIDEO_CAPTURE:
+		if (opener->type == READER) {
+			opener->type = 0;
+			dev->active_readers--;
+			client_usage_queue_event(dev->vdev);
+		}
 		return 0;
 	default:
 		return -EINVAL;
@@ -1708,12 +1730,59 @@ static int vidiocgmbuf(struct file *file, void *fh, struct video_mbuf *p)
 }
 #endif
 
+static void client_usage_queue_event(struct video_device *vdev)
+{
+	struct v4l2_event ev;
+	struct v4l2_loopback_device *dev;
+
+	dev = container_of(vdev->v4l2_dev, struct v4l2_loopback_device,
+			   v4l2_dev);
+
+	memset(&ev, 0, sizeof(ev));
+	ev.type = V4L2_EVENT_PRI_CLIENT_USAGE;
+	((struct v4l2_event_client_usage *)&ev.u)->count = dev->active_readers;
+
+	v4l2_event_queue(vdev, &ev);
+}
+
+static int client_usage_ops_add(struct v4l2_subscribed_event *sev,
+				unsigned elems)
+{
+	if (!(sev->flags & V4L2_EVENT_SUB_FL_SEND_INITIAL))
+		return 0;
+
+	client_usage_queue_event(sev->fh->vdev);
+	return 0;
+}
+
+static void client_usage_ops_replace(struct v4l2_event *old,
+				     const struct v4l2_event *new)
+{
+	*((struct v4l2_event_client_usage *)&old->u) =
+		*((struct v4l2_event_client_usage *)&new->u);
+}
+
+static void client_usage_ops_merge(const struct v4l2_event *old,
+				   struct v4l2_event *new)
+{
+	*((struct v4l2_event_client_usage *)&new->u) =
+		*((struct v4l2_event_client_usage *)&old->u);
+}
+
+const struct v4l2_subscribed_event_ops client_usage_ops = {
+	.add = client_usage_ops_add,
+	.replace = client_usage_ops_replace,
+	.merge = client_usage_ops_merge,
+};
+
 static int vidioc_subscribe_event(struct v4l2_fh *fh,
 				  const struct v4l2_event_subscription *sub)
 {
 	switch (sub->type) {
 	case V4L2_EVENT_CTRL:
 		return v4l2_ctrl_subscribe_event(fh, sub);
+	case V4L2_EVENT_PRI_CLIENT_USAGE:
+		return v4l2_event_subscribe(fh, sub, 0, &client_usage_ops);
 	}
 
 	return -EINVAL;
@@ -1727,6 +1796,8 @@ static void vm_open(struct vm_area_struct *vma)
 
 	buf = vma->vm_private_data;
 	buf->use_count++;
+
+	buf->buffer.flags |= V4L2_BUF_FLAG_MAPPED;
 }
 
 static void vm_close(struct vm_area_struct *vma)
@@ -1736,6 +1807,9 @@ static void vm_close(struct vm_area_struct *vma)
 
 	buf = vma->vm_private_data;
 	buf->use_count--;
+
+	if (buf->use_count <= 0)
+		buf->buffer.flags &= ~V4L2_BUF_FLAG_MAPPED;
 }
 
 static struct vm_operations_struct vm_ops = {
@@ -1814,7 +1888,6 @@ static int v4l2_loopback_mmap(struct file *file, struct vm_area_struct *vma)
 
 	vma->vm_ops = &vm_ops;
 	vma->vm_private_data = buffer;
-	buffer->buffer.flags |= V4L2_BUF_FLAG_MAPPED;
 
 	vm_open(vma);
 
@@ -1913,14 +1986,16 @@ static int v4l2_loopback_close(struct file *file)
 {
 	struct v4l2_loopback_opener *opener;
 	struct v4l2_loopback_device *dev;
-	int iswriter = 0;
+	int is_writer = 0, is_reader = 0;
 	MARK();
 
 	opener = fh_to_opener(file->private_data);
 	dev = v4l2loopback_getdevice(file);
 
 	if (WRITER == opener->type)
-		iswriter = 1;
+		is_writer = 1;
+	if (READER == opener->type)
+		is_reader = 1;
 
 	atomic_dec(&dev->open_count);
 	if (dev->open_count.counter == 0) {
@@ -1933,8 +2008,11 @@ static int v4l2_loopback_close(struct file *file)
 	v4l2_fh_exit(&opener->fh);
 
 	kfree(opener);
-	if (iswriter) {
+	if (is_writer)
 		dev->ready_for_output = 1;
+	if (is_reader) {
+		dev->active_readers--;
+		client_usage_queue_event(dev->vdev);
 	}
 	MARK();
 	return 0;
@@ -2236,7 +2314,7 @@ static void sustain_timer_clb(unsigned long nr)
 	spin_lock(&dev->lock);
 	if (dev->sustain_framerate) {
 		dev->reread_count++;
-		dprintkrw("reread: %d %d\n", dev->write_position,
+		dprintkrw("reread: %lld %d\n", (long long)dev->write_position,
 			  dev->reread_count);
 		if (dev->reread_count == 1)
 			mod_timer(&dev->sustain_timer,
-- 
2.40.0.71.g950264636c

