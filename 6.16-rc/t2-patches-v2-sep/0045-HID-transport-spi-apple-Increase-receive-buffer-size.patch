From baea85c96481fde4182cd07f370339dfdd620854 Mon Sep 17 00:00:00 2001
From: Janne Grunau <j@jannau.net>
Date: Thu, 3 Oct 2024 19:30:23 +0200
Subject: [PATCH 45/53] HID: transport: spi: apple: Increase receive buffer
 size

The SPI receive buffer is passed directly to hid_input_report() if it
contains a complete report. It is then passed to hid_report_raw_event()
which computes the expected report size and memsets the "missing
trailing data up to HID_MAX_BUFFER_SIZE (16K) or
hid_ll_driver.max_buffer_size (if set) to zero.

Signed-off-by: Janne Grunau <j@jannau.net>
---
 drivers/hid/spi-hid/spi-hid-apple-core.c | 11 +++++++++--
 1 file changed, 9 insertions(+), 2 deletions(-)

diff --git a/drivers/hid/spi-hid/spi-hid-apple-core.c b/drivers/hid/spi-hid/spi-hid-apple-core.c
index f4a1042f0..aff822d61 100644
--- a/drivers/hid/spi-hid/spi-hid-apple-core.c
+++ b/drivers/hid/spi-hid/spi-hid-apple-core.c
@@ -395,6 +395,7 @@ static struct hid_ll_driver apple_hid_ll = {
 	.parse = &apple_ll_parse,
 	.raw_request = &apple_ll_raw_request,
 	.output_report = &apple_ll_output_report,
+	.max_buffer_size = SPIHID_MAX_INPUT_REPORT_SIZE,
 };
 
 static struct spihid_interface *spihid_get_iface(struct spihid_apple *spihid,
@@ -971,9 +972,15 @@ int spihid_apple_core_probe(struct spi_device *spi, struct spihid_apple_ops *ops
 	// init spi
 	spi_set_drvdata(spi, spihid);
 
-	/* allocate SPI buffers */
+	/*
+	 * allocate SPI buffers
+	 * Overallocate the receice buffer since it passed directly into
+	 * hid_input_report / hid_report_raw_event. The later expects the buffer
+	 * to be HID_MAX_BUFFER_SIZE (16k) or hid_ll_driver.max_buffer_size if
+	 * set.
+	 */
 	spihid->rx_buf = devm_kmalloc(
-		&spi->dev, sizeof(struct spihid_transfer_packet), GFP_KERNEL);
+		&spi->dev, SPIHID_MAX_INPUT_REPORT_SIZE, GFP_KERNEL);
 	spihid->tx_buf = devm_kmalloc(
 		&spi->dev, sizeof(struct spihid_transfer_packet), GFP_KERNEL);
 	spihid->status_buf = devm_kmalloc(
-- 
2.50.0

