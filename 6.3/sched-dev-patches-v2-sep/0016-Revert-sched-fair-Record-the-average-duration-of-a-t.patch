From 16931f14705a81f97b4f381a6b10332d38807834 Mon Sep 17 00:00:00 2001
From: Piotr Gorski <lucjan.lucjanov@gmail.com>
Date: Wed, 26 Apr 2023 20:01:54 +0200
Subject: [PATCH 16/17] Revert "sched/fair: Record the average duration of a
 task"

This reverts commit 6a542006293641ec328fbe32f2466241d0b3baac.

Signed-off-by: Piotr Gorski <lucjan.lucjanov@gmail.com>
---
 include/linux/sched.h |  3 ---
 kernel/sched/core.c   |  2 --
 kernel/sched/debug.c  |  1 -
 kernel/sched/fair.c   | 13 -------------
 4 files changed, 19 deletions(-)

diff --git a/include/linux/sched.h b/include/linux/sched.h
index 6d398b337..63d242164 100644
--- a/include/linux/sched.h
+++ b/include/linux/sched.h
@@ -557,9 +557,6 @@ struct sched_entity {
 	u64				prev_sum_exec_runtime;
 
 	u64				nr_migrations;
-	u64				prev_sleep_sum_runtime;
-	/* average duration of a task */
-	u64				dur_avg;
 
 #ifdef CONFIG_FAIR_GROUP_SCHED
 	int				depth;
diff --git a/kernel/sched/core.c b/kernel/sched/core.c
index f338bb158..0d18c3969 100644
--- a/kernel/sched/core.c
+++ b/kernel/sched/core.c
@@ -4434,8 +4434,6 @@ static void __sched_fork(unsigned long clone_flags, struct task_struct *p)
 	p->se.prev_sum_exec_runtime	= 0;
 	p->se.nr_migrations		= 0;
 	p->se.vruntime			= 0;
-	p->se.dur_avg			= 0;
-	p->se.prev_sleep_sum_runtime	= 0;
 	INIT_LIST_HEAD(&p->se.group_node);
 
 #ifdef CONFIG_FAIR_GROUP_SCHED
diff --git a/kernel/sched/debug.c b/kernel/sched/debug.c
index 8d64fba16..1637b65ba 100644
--- a/kernel/sched/debug.c
+++ b/kernel/sched/debug.c
@@ -1024,7 +1024,6 @@ void proc_sched_show_task(struct task_struct *p, struct pid_namespace *ns,
 	__PS("nr_involuntary_switches", p->nivcsw);
 
 	P(se.load.weight);
-	P(se.dur_avg);
 #ifdef CONFIG_SMP
 	P(se.avg.load_sum);
 	P(se.avg.runnable_sum);
diff --git a/kernel/sched/fair.c b/kernel/sched/fair.c
index d4f1469df..574f65398 100644
--- a/kernel/sched/fair.c
+++ b/kernel/sched/fair.c
@@ -6315,18 +6315,6 @@ enqueue_task_fair(struct rq *rq, struct task_struct *p, int flags)
 
 static void set_next_buddy(struct sched_entity *se);
 
-static inline void dur_avg_update(struct task_struct *p, bool task_sleep)
-{
-	u64 dur;
-
-	if (!task_sleep)
-		return;
-
-	dur = p->se.sum_exec_runtime - p->se.prev_sleep_sum_runtime;
-	p->se.prev_sleep_sum_runtime = p->se.sum_exec_runtime;
-	update_avg(&p->se.dur_avg, dur);
-}
-
 /*
  * The dequeue_task method is called before nr_running is
  * decreased. We remove the task from the rbtree and
@@ -6399,7 +6387,6 @@ static void dequeue_task_fair(struct rq *rq, struct task_struct *p, int flags)
 
 dequeue_throttle:
 	util_est_update(&rq->cfs, p, task_sleep);
-	dur_avg_update(p, task_sleep);
 	hrtick_update(rq);
 }
 
-- 
2.40.0.71.g950264636c

