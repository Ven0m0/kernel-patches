From e9f0f5cc0eee755659cc3cef35b00a13282c2179 Mon Sep 17 00:00:00 2001
From: Piotr Gorski <lucjan.lucjanov@gmail.com>
Date: Wed, 26 Apr 2023 20:01:53 +0200
Subject: [PATCH 15/17] Revert "sched/fair: Introduce SIS_SHORT to wake up
 short task on current CPU"

This reverts commit b2f1aebc867f20779a768f01cb68298bb605d568.

Signed-off-by: Piotr Gorski <lucjan.lucjanov@gmail.com>
---
 kernel/sched/fair.c     | 26 --------------------------
 kernel/sched/features.h |  1 -
 2 files changed, 27 deletions(-)

diff --git a/kernel/sched/fair.c b/kernel/sched/fair.c
index 5900297e3..d4f1469df 100644
--- a/kernel/sched/fair.c
+++ b/kernel/sched/fair.c
@@ -6533,20 +6533,6 @@ static int wake_wide(struct task_struct *p)
 	return 1;
 }
 
-/*
- * If a task switches in and then voluntarily relinquishes the
- * CPU quickly, it is regarded as a short duration task.
- *
- * SIS_SHORT tries to wake up the short wakee on current CPU. This
- * aims to avoid race condition among CPUs due to frequent context
- * switch.
- */
-static inline int is_short_task(struct task_struct *p)
-{
-	return sched_feat(SIS_SHORT) && p->se.dur_avg &&
-	       ((p->se.dur_avg * 8) < sysctl_sched_min_granularity);
-}
-
 /*
  * The purpose of wake_affine() is to quickly determine on which CPU we can run
  * soonest. For the purpose of speed we only consider the waking and previous
@@ -6583,11 +6569,6 @@ wake_affine_idle(int this_cpu, int prev_cpu, int sync)
 	if (available_idle_cpu(prev_cpu))
 		return prev_cpu;
 
-	/* The only running task is a short duration one. */
-	if (cpu_rq(this_cpu)->nr_running == 1 &&
-	    is_short_task(rcu_dereference(cpu_curr(this_cpu))))
-		return this_cpu;
-
 	return nr_cpumask_bits;
 }
 
@@ -6962,13 +6943,6 @@ static int select_idle_cpu(struct task_struct *p, struct sched_domain *sd, bool
 			/* overloaded LLC is unlikely to have idle cpu/core */
 			if (nr == 1)
 				return -1;
-
-			if (!has_idle_core && this == target &&
-			    (5 * nr < 3 * sd->span_weight) &&
-			    cpu_rq(target)->nr_running <= 1 &&
-			    is_short_task(p) &&
-			    is_short_task(rcu_dereference(cpu_curr(target))))
-				return target;
 		}
 	}
 
diff --git a/kernel/sched/features.h b/kernel/sched/features.h
index efdc29c42..ee7f23c76 100644
--- a/kernel/sched/features.h
+++ b/kernel/sched/features.h
@@ -62,7 +62,6 @@ SCHED_FEAT(TTWU_QUEUE, true)
  */
 SCHED_FEAT(SIS_PROP, false)
 SCHED_FEAT(SIS_UTIL, true)
-SCHED_FEAT(SIS_SHORT, true)
 
 /*
  * Issue a WARN when we do multiple update_rq_clock() calls
-- 
2.40.0.71.g950264636c

