From 5cf1df43f909e23506f02505b4af3853fcae647d Mon Sep 17 00:00:00 2001
From: Suren Baghdasaryan <surenb@google.com>
Date: Tue, 11 Jul 2023 18:13:06 +0000
Subject: [PATCH 44/46] fixup! add call counters to alloc tags

Signed-off-by: Suren Baghdasaryan <surenb@google.com>
---
 include/linux/alloc_tag.h | 33 ++++++++++++++++++++++++++-------
 lib/alloc_tag.c           | 27 ++++++++++++++++-----------
 2 files changed, 42 insertions(+), 18 deletions(-)

diff --git a/include/linux/alloc_tag.h b/include/linux/alloc_tag.h
index 6353adbcb..c44227cf2 100644
--- a/include/linux/alloc_tag.h
+++ b/include/linux/alloc_tag.h
@@ -8,10 +8,16 @@
 #include <linux/bug.h>
 #include <linux/codetag.h>
 #include <linux/container_of.h>
+#include <linux/preempt.h>
 #include <asm/percpu.h>
 #include <linux/cpumask.h>
 #include <linux/static_key.h>
 
+struct alloc_tag_counters {
+	u64 bytes;
+	u64 calls;
+};
+
 /*
  * An instance of this structure is created in a special ELF section at every
  * allocation callsite. At runtime, the special section is treated as
@@ -19,7 +25,7 @@
  */
 struct alloc_tag {
 	struct codetag			ct;
-	u64 __percpu			*bytes_allocated;
+	struct alloc_tag_counters __percpu	*counters;
 } __aligned(8);
 
 #ifdef CONFIG_MEM_ALLOC_PROFILING
@@ -45,13 +51,17 @@ static inline bool mem_alloc_profiling_enabled(void)
 				   &mem_alloc_profiling_key);
 }
 
-static inline u64 alloc_tag_read(struct alloc_tag *tag)
+static inline struct alloc_tag_counters alloc_tag_read(struct alloc_tag *tag)
 {
-	u64 v = 0;
+	struct alloc_tag_counters v = { 0, 0 };
+	struct alloc_tag_counters *counter;
 	int cpu;
 
-	for_each_possible_cpu(cpu)
-		v += *per_cpu_ptr(tag->bytes_allocated, cpu);
+	for_each_possible_cpu(cpu) {
+		counter = per_cpu_ptr(tag->counters, cpu);
+		v.bytes += counter->bytes;
+		v.calls += counter->calls;
+	}
 
 	return v;
 }
@@ -80,6 +90,7 @@ static inline void set_codetag_empty(union codetag_ref *ref) {}
 
 static inline void __alloc_tag_sub(union codetag_ref *ref, size_t bytes)
 {
+	struct alloc_tag_counters *counter;
 	struct alloc_tag *tag;
 
 #ifdef CONFIG_MEM_ALLOC_PROFILING_DEBUG
@@ -95,7 +106,10 @@ static inline void __alloc_tag_sub(union codetag_ref *ref, size_t bytes)
 
 	tag = ct_to_alloc_tag(ref->ct);
 
-	this_cpu_add(*tag->bytes_allocated, -bytes);
+	counter = get_cpu_ptr(tag->counters);
+	counter->bytes -= bytes;
+	counter->calls--;
+	put_cpu_ptr(tag->counters);
 	ref->ct = NULL;
 }
 
@@ -111,6 +125,8 @@ static inline void alloc_tag_sub_noalloc(union codetag_ref *ref, size_t bytes)
 
 static inline void alloc_tag_add(union codetag_ref *ref, struct alloc_tag *tag, size_t bytes)
 {
+	struct alloc_tag_counters *counter;
+
 #ifdef CONFIG_MEM_ALLOC_PROFILING_DEBUG
 	WARN_ONCE(ref && ref->ct,
 		  "alloc_tag was not cleared (got tag for %s:%u)\n",\
@@ -122,7 +138,10 @@ static inline void alloc_tag_add(union codetag_ref *ref, struct alloc_tag *tag,
 		return;
 
 	ref->ct = &tag->ct;
-	this_cpu_add(*tag->bytes_allocated, bytes);
+	counter = get_cpu_ptr(tag->counters);
+	counter->bytes += bytes;
+	counter->calls++;
+	put_cpu_ptr(tag->counters);
 }
 
 #else
diff --git a/lib/alloc_tag.c b/lib/alloc_tag.c
index 1ca90cff5..bb232f82b 100644
--- a/lib/alloc_tag.c
+++ b/lib/alloc_tag.c
@@ -57,7 +57,8 @@ static void allocinfo_stop(struct seq_file *m, void *arg)
 static void alloc_tag_to_text(struct seq_buf *out, struct codetag *ct)
 {
 	struct alloc_tag *tag = ct_to_alloc_tag(ct);
-	s64 bytes = alloc_tag_read(tag);
+	struct alloc_tag_counters counter = alloc_tag_read(tag);
+	s64 bytes = counter.bytes;
 	char val[10], *p = val;
 
 	if (bytes < 0) {
@@ -69,7 +70,7 @@ static void alloc_tag_to_text(struct seq_buf *out, struct codetag *ct)
 			STRING_SIZE_BASE2|STRING_SIZE_NOSPACE,
 			p, val + ARRAY_SIZE(val) - p);
 
-	seq_buf_printf(out, "%8s ", val);
+	seq_buf_printf(out, "%8s %8llu ", val, counter.calls);
 	codetag_to_text(out, ct);
 	seq_buf_putc(out, ' ');
 	seq_buf_putc(out, '\n');
@@ -108,8 +109,9 @@ void alloc_tags_show_mem_report(struct seq_buf *s)
 	codetag_lock_module_list(alloc_tag_cttype, true);
 	iter = codetag_get_ct_iter(alloc_tag_cttype);
 	while ((ct = codetag_next_ct(&iter))) {
+		struct alloc_tag_counters counter = alloc_tag_read(ct_to_alloc_tag(ct));
 		n.tag	= ct;
-		n.bytes = alloc_tag_read(ct_to_alloc_tag(ct));
+		n.bytes = counter.bytes;
 
 		for (i = 0; i < nr; i++)
 			if (n.bytes > tags[i].bytes)
@@ -136,7 +138,8 @@ static void __init procfs_init(void)
 	proc_create_seq("allocinfo", 0444, NULL, &allocinfo_seq_op);
 }
 
-static void alloc_tag_module_load(struct codetag_type *cttype, struct codetag_module *cmod)
+static void alloc_tag_module_load(struct codetag_type *cttype,
+				  struct codetag_module *cmod)
 {
 	struct codetag_iterator iter = codetag_get_ct_iter(cttype);
 	struct codetag *ct;
@@ -145,28 +148,30 @@ static void alloc_tag_module_load(struct codetag_type *cttype, struct codetag_mo
 		if (iter.cmod != cmod)
 			continue;
 
-		ct_to_alloc_tag(ct)->bytes_allocated = alloc_percpu(u64);
+		ct_to_alloc_tag(ct)->counters =
+				alloc_percpu(struct alloc_tag_counters);
 	}
 }
 
-static bool alloc_tag_module_unload(struct codetag_type *cttype, struct codetag_module *cmod)
+static bool alloc_tag_module_unload(struct codetag_type *cttype,
+				    struct codetag_module *cmod)
 {
 	struct codetag_iterator iter = codetag_get_ct_iter(cttype);
+	struct alloc_tag_counters counter;
 	bool module_unused = true;
 	struct alloc_tag *tag;
 	struct codetag *ct;
-	size_t bytes;
 
 	for (ct = codetag_next_ct(&iter); ct; ct = codetag_next_ct(&iter)) {
 		if (iter.cmod != cmod)
 			continue;
 
 		tag = ct_to_alloc_tag(ct);
-		bytes = alloc_tag_read(tag);
+		counter = alloc_tag_read(tag);
 
-		if (!WARN(bytes, "%s:%u module %s func:%s has %zu allocated at module unload",
-			  ct->filename, ct->lineno, ct->modname, ct->function, bytes))
-			free_percpu(tag->bytes_allocated);
+		if (!WARN(counter.bytes, "%s:%u module %s func:%s has %llu allocated at module unload",
+			  ct->filename, ct->lineno, ct->modname, ct->function, counter.bytes))
+			free_percpu(tag->counters);
 		else
 			module_unused = false;
 	}
-- 
2.41.0.159.g0bfa463d37

