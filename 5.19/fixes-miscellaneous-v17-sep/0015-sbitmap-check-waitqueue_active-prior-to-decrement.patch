From bbdd2b12245de1583720032408b41c8c3a6b47b9 Mon Sep 17 00:00:00 2001
From: Keith Busch <kbusch@kernel.org>
Date: Tue, 6 Sep 2022 16:00:28 -0700
Subject: [PATCH 15/16] sbitmap: check waitqueue_active prior to decrement

The bitmap wait state may have set an active count, but doesn't have an
active waiter due to racing with adding it. If that happens, the state's
wait_cnt will be set at the wrong value, and could prevent future wakes
until the atomic_dec wraps back to 0.

Check the waitqueue_active before decrementing so that we don't need to
account for fixing it up after.

Fixes: 040b83fcecfb8 ("sbitmap: fix possible io hung due to lost wakeup")
Signed-off-by: Keith Busch <kbusch@kernel.org>
---
 lib/sbitmap.c | 6 +++++-
 1 file changed, 5 insertions(+), 1 deletion(-)

diff --git a/lib/sbitmap.c b/lib/sbitmap.c
index 1f3114787..cf394b428 100644
--- a/lib/sbitmap.c
+++ b/lib/sbitmap.c
@@ -610,12 +610,16 @@ static bool __sbq_wake_up(struct sbitmap_queue *sbq)
 	if (!ws)
 		return false;
 
+	if (!waitqueue_active(&ws->wait))
+		return true;
+
 	wait_cnt = atomic_dec_return(&ws->wait_cnt);
+
 	/*
 	 * For concurrent callers of this, callers should call this function
 	 * again to wakeup a new batch on a different 'ws'.
 	 */
-	if (wait_cnt < 0 || !waitqueue_active(&ws->wait))
+	if (wait_cnt < 0)
 		return true;
 
 	if (wait_cnt > 0)
-- 
2.37.3.485.gbe1a02a17e

