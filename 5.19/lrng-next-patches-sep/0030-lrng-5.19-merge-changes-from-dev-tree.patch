From 81359a417f43376761def241f20c54160c07c433 Mon Sep 17 00:00:00 2001
From: Piotr Gorski <lucjan.lucjanov@gmail.com>
Date: Mon, 5 Sep 2022 11:34:45 +0200
Subject: [PATCH 30/30] lrng-5.19: merge changes from dev tree

Signed-off-by: Piotr Gorski <lucjan.lucjanov@gmail.com>
---
 drivers/char/lrng/lrng_es_cpu.c               | 17 ++++++----
 drivers/char/lrng/lrng_es_krng.c              | 33 ++++---------------
 drivers/char/lrng/lrng_es_mgr.c               | 26 +++++++++++----
 .../char/lrng/lrng_interface_random_kernel.c  |  4 +--
 4 files changed, 39 insertions(+), 41 deletions(-)

diff --git a/drivers/char/lrng/lrng_es_cpu.c b/drivers/char/lrng/lrng_es_cpu.c
index 3910108..f982cc3 100644
--- a/drivers/char/lrng/lrng_es_cpu.c
+++ b/drivers/char/lrng/lrng_es_cpu.c
@@ -65,7 +65,8 @@ static u32 lrng_cpu_poolsize(void)
 
 static u32 lrng_get_cpu_data(u8 *outbuf, u32 requested_bits)
 {
-	u32 i;
+	size_t longs = 0;
+	u32 i,  req = requested_bits >> 3;
 
 	/* operate on full blocks */
 	BUILD_BUG_ON(LRNG_DRNG_SECURITY_STRENGTH_BYTES % sizeof(unsigned long));
@@ -73,10 +74,14 @@ static u32 lrng_get_cpu_data(u8 *outbuf, u32 requested_bits)
 	/* ensure we have aligned buffers */
 	BUILD_BUG_ON(LRNG_KCAPI_ALIGN % sizeof(unsigned long));
 
-	for (i = 0; i < (requested_bits >> 3);
-	     i += sizeof(unsigned long)) {
-		if (!arch_get_random_seed_long((unsigned long *)(outbuf + i)) &&
-		    !arch_get_random_long((unsigned long *)(outbuf + i))) {
+	for (i = 0; i < req; i += longs) {
+		longs = arch_get_random_seed_longs(
+			(unsigned long *)(outbuf + i), req - i);
+		if (longs)
+			continue;
+		longs = arch_get_random_longs((unsigned long *)(outbuf + i),
+					      req - i);
+		if (!longs) {
 			cpu_entropy = 0;
 			return 0;
 		}
@@ -175,7 +180,7 @@ static u32 lrng_cpu_multiplier(void)
 	if (data_multiplier > 0)
 		return data_multiplier;
 
-	if (IS_ENABLED(CONFIG_X86) && !arch_get_random_seed_long(&v)) {
+	if (IS_ENABLED(CONFIG_X86) && !arch_get_random_seed_longs(&v, 1)) {
 		/*
 		 * Intel SPEC: pulling 512 blocks from RDRAND ensures
 		 * one reseed making it logically equivalent to RDSEED.
diff --git a/drivers/char/lrng/lrng_es_krng.c b/drivers/char/lrng/lrng_es_krng.c
index 0ef88e6..519ba64 100644
--- a/drivers/char/lrng/lrng_es_krng.c
+++ b/drivers/char/lrng/lrng_es_krng.c
@@ -23,17 +23,12 @@ MODULE_PARM_DESC(krng_entropy, "Entropy in bits of 256 data bits from the kernel
 
 static atomic_t lrng_krng_initial_rate = ATOMIC_INIT(0);
 
-static struct notifier_block lrng_krng_ready = {
-	.notifier_call = NULL,
-};
-
 static u32 lrng_krng_fips_entropylevel(u32 entropylevel)
 {
 	return fips_enabled ? 0 : entropylevel;
 }
 
-static int lrng_krng_adjust_entropy(struct notifier_block *nb,
-				    unsigned long action, void *data)
+static int lrng_krng_adjust_entropy(void)
 {
 	u32 entropylevel;
 
@@ -50,27 +45,11 @@ static int lrng_krng_adjust_entropy(struct notifier_block *nb,
 
 static u32 lrng_krng_entropylevel(u32 requested_bits)
 {
-	if (lrng_krng_ready.notifier_call == NULL) {
-		int err;
-
-		lrng_krng_ready.notifier_call = lrng_krng_adjust_entropy;
-
-		err = register_random_ready_notifier(&lrng_krng_ready);
-		switch (err) {
-		case 0:
-			atomic_set(&lrng_krng_initial_rate, krng_entropy);
-			krng_entropy = 0;
-			pr_debug("Kernel RNG is not yet seeded, setting entropy rate to 0 bits of entropy\n");
-			break;
-
-		case -EALREADY:
-			pr_debug("Kernel RNG is fully seeded, setting entropy rate to %u bits of entropy\n",
-				 lrng_krng_fips_entropylevel(krng_entropy));
-			break;
-		default:
-			lrng_krng_ready.notifier_call = NULL;
-			return 0;
-		}
+	static bool init = false;
+
+	if (unlikely(!init) && rng_is_initialized()) {
+		init = true;
+		lrng_krng_adjust_entropy();
 	}
 
 	return lrng_fast_noise_entropylevel(
diff --git a/drivers/char/lrng/lrng_es_mgr.c b/drivers/char/lrng/lrng_es_mgr.c
index 49eb2ea..23eba26 100644
--- a/drivers/char/lrng/lrng_es_mgr.c
+++ b/drivers/char/lrng/lrng_es_mgr.c
@@ -347,19 +347,33 @@ int __init lrng_rand_initialize(void)
 				    sizeof(unsigned long))];
 		struct new_utsname utsname;
 	} seed __aligned(LRNG_KCAPI_ALIGN);
+	size_t longs = 0;
 	unsigned int i;
 
 	seed.time = ktime_get_real();
 
-	for (i = 0; i < ARRAY_SIZE(seed.data); i++) {
+	for (i = 0; i < ARRAY_SIZE(seed.data); i += longs) {
 #ifdef CONFIG_LRNG_RANDOM_IF
-		if (!arch_get_random_seed_long_early(&(seed.data[i])) &&
-		    !arch_get_random_long_early(&seed.data[i]))
+		longs = arch_get_random_seed_longs_early(
+			seed.data + i, ARRAY_SIZE(seed.data) - i);
+		if (longs)
+			continue;
+		longs = arch_get_random_longs_early(seed.data + i,
+						    ARRAY_SIZE(seed.data) - i);
+		if (longs)
+			continue;
 #else
-		if (!arch_get_random_seed_long(&(seed.data[i])) &&
-		    !arch_get_random_long(&seed.data[i]))
+		longs = arch_get_random_seed_longs(seed.data + i,
+						   ARRAY_SIZE(seed.data) - i);
+		if (longs)
+			continue;
+		longs = arch_get_random_longs(seed.data + i,
+					      ARRAY_SIZE(seed.data) - i);
+		if (longs)
+			continue;
 #endif
-			seed.data[i] = random_get_entropy();
+		seed.data[i] = random_get_entropy();
+		longs = 1;
 	}
 	memcpy(&seed.utsname, utsname(), sizeof(*(utsname())));
 
diff --git a/drivers/char/lrng/lrng_interface_random_kernel.c b/drivers/char/lrng/lrng_interface_random_kernel.c
index e64c3b7..471390b 100644
--- a/drivers/char/lrng/lrng_interface_random_kernel.c
+++ b/drivers/char/lrng/lrng_interface_random_kernel.c
@@ -21,7 +21,7 @@
 
 /********************************** Helper ***********************************/
 
-static bool lrng_trust_bootloader __ro_after_init =
+static bool lrng_trust_bootloader __initdata =
 	IS_ENABLED(CONFIG_RANDOM_TRUST_BOOTLOADER);
 
 static int __init lrng_parse_trust_bootloader(char *arg)
@@ -80,7 +80,7 @@ EXPORT_SYMBOL_GPL(add_hwgenerator_randomness);
  *	 insert into entropy pool.
  * @size: length of buffer
  */
-void add_bootloader_randomness(const void *buf, size_t size)
+void __init add_bootloader_randomness(const void *buf, size_t size)
 {
 	lrng_pool_insert_aux(buf, size, lrng_trust_bootloader ? size * 8 : 0);
 }
-- 
2.37.1.377.g679aad9e82

