From f83e3f16bb75f72f65e3207a31167e4663592bc8 Mon Sep 17 00:00:00 2001
From: Piotr Gorski <lucjan.lucjanov@gmail.com>
Date: Wed, 10 Aug 2022 22:47:15 +0200
Subject: [PATCH] esdm-5.19: introduce Entropy Source and DRNG Manager

Signed-off-by: Piotr Gorski <lucjan.lucjanov@gmail.com>
---
 drivers/char/random.c      | 14 ++++++++++---
 drivers/misc/Makefile      |  2 ++
 drivers/misc/esdm_irq.c    | 43 ++++++++++++++++++++++++++++++++++++++
 drivers/misc/esdm_sched.c  | 40 +++++++++++++++++++++++++++++++++++
 include/linux/esdm_irq.h   | 20 ++++++++++++++++++
 include/linux/esdm_sched.h | 20 ++++++++++++++++++
 kernel/sched/core.c        |  3 +++
 7 files changed, 139 insertions(+), 3 deletions(-)
 create mode 100644 drivers/misc/esdm_irq.c
 create mode 100644 drivers/misc/esdm_sched.c
 create mode 100644 include/linux/esdm_irq.h
 create mode 100644 include/linux/esdm_sched.h

diff --git a/drivers/char/random.c b/drivers/char/random.c
index a1af90bac..425630873 100644
--- a/drivers/char/random.c
+++ b/drivers/char/random.c
@@ -53,6 +53,7 @@
 #include <linux/uaccess.h>
 #include <linux/suspend.h>
 #include <linux/siphash.h>
+#include <linux/esdm_irq.h>
 #include <crypto/chacha.h>
 #include <crypto/blake2s.h>
 #include <asm/processor.h>
@@ -997,11 +998,18 @@ static void mix_interrupt_randomness(struct work_struct *work)
 void add_interrupt_randomness(int irq)
 {
 	enum { MIX_INFLIGHT = 1U << 31 };
-	unsigned long entropy = random_get_entropy();
-	struct fast_pool *fast_pool = this_cpu_ptr(&irq_randomness);
-	struct pt_regs *regs = get_irq_regs();
+	unsigned long entropy;
+	struct fast_pool *fast_pool;
+	struct pt_regs *regs;
 	unsigned int new_count;
 
+	if (add_esdm_interrupt_randomness(irq))
+		return;
+
+	entropy = random_get_entropy();
+	fast_pool = this_cpu_ptr(&irq_randomness);
+	regs = get_irq_regs();
+
 	fast_mix(fast_pool->pool, entropy,
 		 (regs ? instruction_pointer(regs) : _RET_IP_) ^ swab(irq));
 	new_count = ++fast_pool->count;
diff --git a/drivers/misc/Makefile b/drivers/misc/Makefile
index 70e800e91..2de8e296a 100644
--- a/drivers/misc/Makefile
+++ b/drivers/misc/Makefile
@@ -60,3 +60,5 @@ obj-$(CONFIG_XILINX_SDFEC)	+= xilinx_sdfec.o
 obj-$(CONFIG_HISI_HIKEY_USB)	+= hisi_hikey_usb.o
 obj-$(CONFIG_HI6421V600_IRQ)	+= hi6421v600-irq.o
 obj-$(CONFIG_OPEN_DICE)		+= open-dice.o
+obj-y				+= esdm_sched.o
+obj-y				+= esdm_irq.o
diff --git a/drivers/misc/esdm_irq.c b/drivers/misc/esdm_irq.c
new file mode 100644
index 000000000..ef007d618
--- /dev/null
+++ b/drivers/misc/esdm_irq.c
@@ -0,0 +1,43 @@
+/* SPDX-License-Identifier: GPL-2.0 OR BSD-2-Clause */
+/*
+ * Copyright (C) 2022, Stephan Mueller <smueller@chronox.de>
+ *
+ * ESDM entropy source user space interface.
+ */
+
+#define pr_fmt(fmt) KBUILD_MODNAME ": " fmt
+
+#include <linux/esdm_irq.h>
+#include <linux/module.h>
+
+static esdm_irq_randomness_t esdm_irq_randomness_func = NULL;
+
+int add_esdm_interrupt_randomness(int irq)
+{
+	if (!esdm_irq_randomness_func)
+		return 0;
+
+	esdm_irq_randomness_func(irq);
+	return 1;
+}
+
+int esdm_irq_register(esdm_irq_randomness_t func)
+{
+	if (!func)
+		return -EINVAL;
+
+	if (cmpxchg(&esdm_irq_randomness_func, NULL, func) != NULL)
+		return -EAGAIN;
+	return 0;
+}
+EXPORT_SYMBOL(esdm_irq_register);
+
+void esdm_irq_unregister(esdm_irq_randomness_t func)
+{
+	if (!func)
+		return;
+
+	if (cmpxchg(&esdm_irq_randomness_func, func, NULL) != func)
+		pr_warn("Cannot unregister ESDM irquler callback\n");
+}
+EXPORT_SYMBOL(esdm_irq_unregister);
diff --git a/drivers/misc/esdm_sched.c b/drivers/misc/esdm_sched.c
new file mode 100644
index 000000000..d42f4997b
--- /dev/null
+++ b/drivers/misc/esdm_sched.c
@@ -0,0 +1,40 @@
+/* SPDX-License-Identifier: GPL-2.0 OR BSD-2-Clause */
+/*
+ * Copyright (C) 2022, Stephan Mueller <smueller@chronox.de>
+ *
+ * ESDM entropy source user space interface.
+ */
+
+#define pr_fmt(fmt) KBUILD_MODNAME ": " fmt
+
+#include <linux/esdm_sched.h>
+#include <linux/module.h>
+
+static esdm_sched_randomness_t esdm_sched_randomness_func = NULL;
+
+void add_sched_randomness(const struct task_struct *p, int cpu)
+{
+	if (esdm_sched_randomness_func)
+		esdm_sched_randomness_func(p, cpu);
+}
+
+int esdm_sched_register(esdm_sched_randomness_t func)
+{
+	if (!func)
+		return -EINVAL;
+
+	if (cmpxchg(&esdm_sched_randomness_func, NULL, func) != NULL)
+		return -EAGAIN;
+	return 0;
+}
+EXPORT_SYMBOL(esdm_sched_register);
+
+void esdm_sched_unregister(esdm_sched_randomness_t func)
+{
+	if (!func)
+		return;
+
+	if (cmpxchg(&esdm_sched_randomness_func, func, NULL) != func)
+		pr_warn("Cannot unregister ESDM scheduler callback\n");
+}
+EXPORT_SYMBOL(esdm_sched_unregister);
diff --git a/include/linux/esdm_irq.h b/include/linux/esdm_irq.h
new file mode 100644
index 000000000..172f4572e
--- /dev/null
+++ b/include/linux/esdm_irq.h
@@ -0,0 +1,20 @@
+/* SPDX-License-Identifier: GPL-2.0 OR BSD-2-Clause */
+/*
+ * Copyright (C) 2022, Stephan Mueller <smueller@chronox.de>
+ */
+
+#ifndef _ESDM_IRQ_H
+#define _ESDM_IRQ_H
+
+#include <linux/irq.h>
+
+typedef void (*esdm_irq_randomness_t)(int irq);
+
+/* Callback for irquler */
+extern int add_esdm_interrupt_randomness(int irq);
+
+/* Register and unregister handler functions */
+int esdm_irq_register(esdm_irq_randomness_t func);
+void esdm_irq_unregister(esdm_irq_randomness_t func);
+
+#endif /* _ESDM_IRQ_H */
diff --git a/include/linux/esdm_sched.h b/include/linux/esdm_sched.h
new file mode 100644
index 000000000..f5935eca1
--- /dev/null
+++ b/include/linux/esdm_sched.h
@@ -0,0 +1,20 @@
+/* SPDX-License-Identifier: GPL-2.0 OR BSD-2-Clause */
+/*
+ * Copyright (C) 2022, Stephan Mueller <smueller@chronox.de>
+ */
+
+#ifndef _ESDM_SCHED_H
+#define _ESDM_SCHED_H
+
+#include <linux/sched.h>
+
+typedef void (*esdm_sched_randomness_t)(const struct task_struct *p, int cpu);
+
+/* Callback for scheduler */
+extern void add_sched_randomness(const struct task_struct *p, int cpu);
+
+/* Register and unregister handler functions */
+int esdm_sched_register(esdm_sched_randomness_t func);
+void esdm_sched_unregister(esdm_sched_randomness_t func);
+
+#endif /* _ESDM_SCHED_H */
diff --git a/kernel/sched/core.c b/kernel/sched/core.c
index da0bf6fe9..6650f92ac 100644
--- a/kernel/sched/core.c
+++ b/kernel/sched/core.c
@@ -6,6 +6,7 @@
  *
  *  Copyright (C) 1991-2002  Linus Torvalds
  */
+#include <linux/esdm_sched.h>
 #include <linux/highmem.h>
 #include <linux/hrtimer_api.h>
 #include <linux/ktime_api.h>
@@ -3580,6 +3581,8 @@ ttwu_stat(struct task_struct *p, int cpu, int wake_flags)
 {
 	struct rq *rq;
 
+	add_sched_randomness(p, cpu);
+
 	if (!schedstat_enabled())
 		return;
 
-- 
2.37.1.377.g679aad9e82

