From de54da4f7dbf048944dc63f2943e23a3d75e77c0 Mon Sep 17 00:00:00 2001
From: Bart Van Assche <bvanassche () acm ! org>
Date: Tue, 16 May 2023 22:38:53 +0000
Subject: [PATCH 1/4] block: BFQ: Add several invariant checks

If anything goes wrong with the counters that track the number of
requests, I/O locks up. Make such scenarios easier to debug by adding
invariant checks for the request counters. Additionally, check that
BFQ queues are empty before these are freed.

Cc: Jan Kara <jack@suse.cz>
Cc: Yu Kuai <yukuai3@huawei.com>
Signed-off-by: Bart Van Assche <bvanassche@acm.org>
---
 block/bfq-iosched.c | 9 +++++++++
 1 file changed, 9 insertions(+)

diff --git a/block/bfq-iosched.c b/block/bfq-iosched.c
index 3164e3177..c5727afad 100644
--- a/block/bfq-iosched.c
+++ b/block/bfq-iosched.c
@@ -5403,6 +5403,9 @@ void bfq_put_queue(struct bfq_queue *bfqq)
 	if (bfqq->bfqd->last_completed_rq_bfqq == bfqq)
 		bfqq->bfqd->last_completed_rq_bfqq = NULL;
 
+	WARN_ON_ONCE(!list_empty(&bfqq->fifo));
+	WARN_ON_ONCE(!RB_EMPTY_ROOT(&bfqq->sort_list));
+
 	kmem_cache_free(bfq_pool, bfqq);
 	bfqg_and_blkg_put(bfqg);
 }
@@ -7135,6 +7138,7 @@ static void bfq_exit_queue(struct elevator_queue *e)
 {
 	struct bfq_data *bfqd = e->elevator_data;
 	struct bfq_queue *bfqq, *n;
+	unsigned int actuator;
 
 	hrtimer_cancel(&bfqd->idle_slice_timer);
 
@@ -7143,6 +7147,11 @@ static void bfq_exit_queue(struct elevator_queue *e)
 		bfq_deactivate_bfqq(bfqd, bfqq, false, false);
 	spin_unlock_irq(&bfqd->lock);
 
+	for (actuator = 0; actuator < bfqd->num_actuators; actuator++)
+		WARN_ON_ONCE(bfqd->rq_in_driver[actuator]);
+	WARN_ON_ONCE(bfqd->tot_rq_in_driver);
+	WARN_ON_ONCE(bfqq->dispatched);
+
 	hrtimer_cancel(&bfqd->idle_slice_timer);
 
 	/* release oom-queue reference to root group */
-- 
2.40.1.445.gf85cd430b1


From d73f615b64999caee9a1c27ec20a06b23b56513f Mon Sep 17 00:00:00 2001
From: Bart Van Assche <bvanassche () acm ! org>
Date: Fri, 19 May 2023 22:03:46 +0000
Subject: [PATCH 2/4] block: BFQ: Move an invariant check

Check bfqq->dispatched for each BFQ queue instead of checking it for an
invalid bfqq pointer.

Fixes: 3e49c1e4a615 ("block: BFQ: Add several invariant checks")
Signed-off-by: Bart Van Assche <bvanassche@acm.org>
---
 block/bfq-iosched.c | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/block/bfq-iosched.c b/block/bfq-iosched.c
index c5727afad..09bbbcf9e 100644
--- a/block/bfq-iosched.c
+++ b/block/bfq-iosched.c
@@ -5405,6 +5405,7 @@ void bfq_put_queue(struct bfq_queue *bfqq)
 
 	WARN_ON_ONCE(!list_empty(&bfqq->fifo));
 	WARN_ON_ONCE(!RB_EMPTY_ROOT(&bfqq->sort_list));
+	WARN_ON_ONCE(bfqq->dispatched);
 
 	kmem_cache_free(bfq_pool, bfqq);
 	bfqg_and_blkg_put(bfqg);
@@ -7150,7 +7151,6 @@ static void bfq_exit_queue(struct elevator_queue *e)
 	for (actuator = 0; actuator < bfqd->num_actuators; actuator++)
 		WARN_ON_ONCE(bfqd->rq_in_driver[actuator]);
 	WARN_ON_ONCE(bfqd->tot_rq_in_driver);
-	WARN_ON_ONCE(bfqq->dispatched);
 
 	hrtimer_cancel(&bfqd->idle_slice_timer);
 
-- 
2.40.1.445.gf85cd430b1


From 791b5d9f4722c91cea6f7bacbe05607d112e10ea Mon Sep 17 00:00:00 2001
From: Piotr Gorski <lucjan.lucjanov@gmail.com>
Date: Mon, 22 May 2023 08:53:17 +0200
Subject: [PATCH 3/4] bfq-6.4: set CachyOS branding

Signed-off-by: Piotr Gorski <lucjan.lucjanov@gmail.com>
---
 block/bfq-iosched.c | 6 ++++++
 1 file changed, 6 insertions(+)

diff --git a/block/bfq-iosched.c b/block/bfq-iosched.c
index 09bbbcf9e..8e4e83bff 100644
--- a/block/bfq-iosched.c
+++ b/block/bfq-iosched.c
@@ -7627,6 +7627,7 @@ MODULE_ALIAS("bfq-iosched");
 static int __init bfq_init(void)
 {
 	int ret;
+	char msg[60] = "BFQ I/O-scheduler: BFQ-CachyOS v6.4";
 
 #ifdef CONFIG_BFQ_GROUP_IOSCHED
 	ret = blkcg_policy_register(&blkcg_policy_bfq);
@@ -7658,6 +7659,11 @@ static int __init bfq_init(void)
 	if (ret)
 		goto slab_kill;
 
+#ifdef CONFIG_BFQ_GROUP_IOSCHED
+	strcat(msg, " (with cgroups support)");
+#endif
+	pr_info("%s", msg);
+
 	return 0;
 
 slab_kill:
-- 
2.40.1.445.gf85cd430b1


From def414867ebfe8fa0487c5f68dc9d51bb6c91de9 Mon Sep 17 00:00:00 2001
From: Paolo Valente <paolo.valente@linaro.org>
Date: Tue, 23 May 2023 09:17:24 +0000
Subject: [PATCH 4/4] block, bfq: update Paolo's address in maintainer list

Current email address of Paolo Valente is no longer valid, use a good one.

Signed-off-by: Paolo Valente <paolo.valente@unimore.it>
---
 MAINTAINERS | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/MAINTAINERS b/MAINTAINERS
index 27ef11624..e43b44dc9 100644
--- a/MAINTAINERS
+++ b/MAINTAINERS
@@ -3536,7 +3536,7 @@ F:	Documentation/filesystems/befs.rst
 F:	fs/befs/
 
 BFQ I/O SCHEDULER
-M:	Paolo Valente <paolo.valente@linaro.org>
+M:	Paolo Valente <paolo.valente@unimore.it>
 M:	Jens Axboe <axboe@kernel.dk>
 L:	linux-block@vger.kernel.org
 S:	Maintained
-- 
2.40.1.445.gf85cd430b1

