From 67479c7c88979366bbee5d234123177f54f2c612 Mon Sep 17 00:00:00 2001
From: David Vernet <void@manifault.com>
Date: Fri, 14 Apr 2023 10:58:09 -0500
Subject: [PATCH 36/39] scx: Call ops.set_weight() with rq lock on
 scx_post_fork() path

There's currently a race when invoking ops.set_weight() that could cause
a warning to be emitted due to unexpected nesting. Most scx ops are
always called either with or without interrupts being enabled.
ops.set_weight() is a bit special in that it can be called both on the
post-fork path from scx_post_fork(), or from switching_to_scx() /
reweight_task_scx(), which are both called with the rq lock held and
interrupts disabled. This can cause the following warning to be emitted
if a timer interrupt is fired while executing the ops.set_weight()
callback on the post-fork path:

[ 4975.435822] invalid nesting current->scx.kf_mask=0x20 mask=0x20
[ 4975.447670] WARNING: CPU: 33 PID: 431940 at kernel/sched/ext.c:213 select_task_rq_scx+0x173/0x190
...
[ 4975.615777] RIP: 0010:select_task_rq_scx+0x173/0x190
[ 4975.625721] Code: 3d 8e ef 57 02 00 0f 85 f6 fe ff ff 8b b2 e0 02 00 00 48 c7 c7 20 91 70 82 ba 20 00 00 00 c6 05 6f ef 57 02 01 e8 64 22 b9 00 <0f> 0b e9 d1 fe ff ff 41 83 8d d0 02 00 00
 04 41 89 dc e9 ff fe ff
[ 4975.663290] RSP: 0018:ffffc90000f8ce98 EFLAGS: 00010082
[ 4975.673746] RAX: 0000000000000000 RBX: 0000000000000021 RCX: 0000000000000027
[ 4975.688026] RDX: ffff88903fc60a08 RSI: 0000000000000001 RDI: ffff88903fc60a00
[ 4975.702305] RBP: 0000000000000003 R08: ffffffff83564c08 R09: 0000000000000003
[ 4975.716581] R10: ffffffff82e64c20 R11: ffffffff833e4c20 R12: 0000000000000008
[ 4975.730858] R13: ffff8884ef9f6500 R14: ffff8884ef9f6e80 R15: ffffc9000183be18
[ 4975.745134] FS:  00007fc5ad8cd740(0000) GS:ffff88903fc40000(0000) knlGS:0000000000000000
[ 4975.761325] CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033
[ 4975.772822] CR2: 000056284b9183b8 CR3: 00000004fe043001 CR4: 00000000007706e0
[ 4975.787100] DR0: 0000000000000000 DR1: 0000000000000000 DR2: 0000000000000000
[ 4975.801376] DR3: 0000000000000000 DR6: 00000000fffe0ff0 DR7: 0000000000000400
[ 4975.815654] PKRU: 55555554
[ 4975.821065] Call Trace:
[ 4975.825955]  <IRQ>
[ 4975.829978]  try_to_wake_up+0xe3/0x500
[ 4975.837484]  ? __hrtimer_init+0xa0/0xa0
[ 4975.845160]  hrtimer_wakeup+0x1e/0x30
[ 4975.852485]  __hrtimer_run_queues+0x137/0x270
[ 4975.861206]  hrtimer_interrupt+0x10e/0x230
[ 4975.869404]  __sysvec_apic_timer_interrupt+0x4e/0xc0
[ 4975.879339]  sysvec_apic_timer_interrupt+0x6d/0x90
[ 4975.888931]  </IRQ>
[ 4975.893130]  <TASK>
...
[ 4975.897327]  asm_sysvec_apic_timer_interrupt+0x16/0x20
[ 4975.907610] RIP: 0010:__htab_map_lookup_elem+0x65/0xa0
[ 4975.917904] Code: 89 ee 49 c1 e6 05 4d 03 b4 24 a0 01 00 00 4d 8b 26 41 f6 c4 01 74 0c eb 33 4d 8b 24 24 41 f6 c4 01 75 29 45 3b 7c 24 28 75 ef <49> 8d 7c 24 30 48 89 da 48 89 ee e8 eb 30
 55 00 85 c0 75 db 5b 4c
[ 4975.955470] RSP: 0018:ffffc90025437ca0 EFLAGS: 00000246
[ 4975.965923] RAX: 0000000000100000 RBX: 0000000000000004 RCX: 00000000a8623740
[ 4975.980198] RDX: 00000000c9edf4bd RSI: 00000000af4c9372 RDI: ffffc90025437cec
[ 4975.994476] RBP: ffffc90025437cec R08: ffffffff82e12f38 R09: ffffffff82e12f38
[ 4976.008752] R10: 0000000000000008 R11: 0000000000000008 R12: ffffc900347349a8
[ 4976.023027] R13: 000000000001525f R14: ffffc90031b05be0 R15: 00000000a061525f
[ 4976.037309]  bpf_prog_4d41ada04df44ed7_atropos_set_weight+0x3a/0x7a
[ 4976.049861]  ? refresh_scx_weight+0x9b/0xe0
[ 4976.058239]  ? scx_post_fork+0x25/0x120
[ 4976.065925]  ? ktime_get_with_offset+0x4c/0xb0
[ 4976.074821]  ? copy_process+0x15fb/0x1af0
[ 4976.082853]  ? kernel_clone+0x9b/0x3b0
[ 4976.090355]  ? __do_sys_clone+0x66/0x90
[ 4976.098042]  ? do_syscall_64+0x35/0x80
[ 4976.105547]  ? entry_SYSCALL_64_after_hwframe+0x46/0xb0
[ 4976.116005]  </TASK>

Let's fix this by grabbing the rq lock on the scx_post_fork() path
before calling refresh_scx_weight(). We also update the logic to set the
struct task_struct * weight before calling ops.enable(), and then to
invoke the ops.set_weight() callback only after calling ops.enable().
This is done to avoid invoking a callback on the task before the
scheduler's been told that it's fully enabled.

Signed-off-by: David Vernet <void@manifault.com>
---
 kernel/sched/ext.c | 23 ++++++++++++++++++-----
 1 file changed, 18 insertions(+), 5 deletions(-)

diff --git a/kernel/sched/ext.c b/kernel/sched/ext.c
index 5d115c047..052c7857a 100644
--- a/kernel/sched/ext.c
+++ b/kernel/sched/ext.c
@@ -2263,6 +2263,13 @@ static void scx_ops_disable_task(struct task_struct *p)
 	}
 }
 
+static void set_task_scx_weight(struct task_struct *p)
+{
+	u32 weight = sched_prio_to_weight[p->static_prio - MAX_RT_PRIO];
+
+	p->scx.weight = sched_weight_to_cgroup(weight);
+}
+
 /**
  * refresh_scx_weight - Refresh a task's ext weight
  * @p: task to refresh ext weight for
@@ -2275,9 +2282,8 @@ static void scx_ops_disable_task(struct task_struct *p)
  */
 static void refresh_scx_weight(struct task_struct *p)
 {
-	u32 weight = sched_prio_to_weight[p->static_prio - MAX_RT_PRIO];
-
-	p->scx.weight = sched_weight_to_cgroup(weight);
+	lockdep_assert_rq_held(task_rq(p));
+	set_task_scx_weight(p);
 	if (SCX_HAS_OP(set_weight))
 		SCX_CALL_OP_TASK(SCX_KF_REST, set_weight, p, p->scx.weight);
 }
@@ -2305,14 +2311,21 @@ int scx_fork(struct task_struct *p)
 
 void scx_post_fork(struct task_struct *p)
 {
-	refresh_scx_weight(p);
-
 	if (scx_enabled()) {
 		struct rq_flags rf;
 		struct rq *rq;
 
 		rq = task_rq_lock(p, &rf);
+		/*
+		 * Set the weight manually before calling ops.enable() so that
+		 * the scheduler doesn't see a stale value if they inspect the
+		 * task struct. We'll invoke ops.set_weight() afterwards, as it
+		 * would be odd to receive a callback on the task before we
+		 * tell the scheduler that it's been fully enabled.
+		 */
+		set_task_scx_weight(p);
 		scx_ops_enable_task(p);
+		refresh_scx_weight(p);
 		task_rq_unlock(rq, p, &rf);
 	}
 
-- 
2.40.1.445.gf85cd430b1

