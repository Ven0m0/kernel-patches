From 2b84683a072a06c448dd5309090f249b8fc22ecd Mon Sep 17 00:00:00 2001
From: Suren Baghdasaryan <surenb@google.com>
Date: Mon, 29 May 2023 00:07:27 +0000
Subject: [PATCH 42/50] fixup! rename noprof percpu alloc functions

Signed-off-by: Suren Baghdasaryan <surenb@google.com>
---
 include/linux/percpu.h | 8 ++++----
 mm/percpu.c            | 8 ++++----
 2 files changed, 8 insertions(+), 8 deletions(-)

diff --git a/include/linux/percpu.h b/include/linux/percpu.h
index b7f444df1..dc50dedb0 100644
--- a/include/linux/percpu.h
+++ b/include/linux/percpu.h
@@ -125,15 +125,15 @@ extern bool is_kernel_percpu_address(unsigned long addr);
 extern void __init setup_per_cpu_areas(void);
 #endif
 
-extern void __percpu *__pcpu_alloc(size_t size, size_t align, bool reserved,
+extern void __percpu *pcpu_alloc_noprof(size_t size, size_t align, bool reserved,
 				   gfp_t gfp) __alloc_size(1);
 
 #define __alloc_percpu_gfp(_size, _align, _gfp)				\
-	alloc_hooks(__pcpu_alloc(_size, _align, false, _gfp))
+	alloc_hooks(pcpu_alloc_noprof(_size, _align, false, _gfp))
 #define __alloc_percpu(_size, _align)					\
-	alloc_hooks(__pcpu_alloc(_size, _align, false, GFP_KERNEL))
+	alloc_hooks(pcpu_alloc_noprof(_size, _align, false, GFP_KERNEL))
 #define __alloc_reserved_percpu(_size, _align)				\
-	alloc_hooks(__pcpu_alloc(_size, _align, true, GFP_KERNEL))
+	alloc_hooks(pcpu_alloc_noprof(_size, _align, true, GFP_KERNEL))
 
 #define alloc_percpu_gfp(type, gfp)					\
 	(typeof(type) __percpu *)__alloc_percpu_gfp(sizeof(type),	\
diff --git a/mm/percpu.c b/mm/percpu.c
index 4b5cf260d..2298f38d4 100644
--- a/mm/percpu.c
+++ b/mm/percpu.c
@@ -1728,7 +1728,7 @@ static void pcpu_alloc_tag_free_hook(struct pcpu_chunk *chunk, int off, size_t s
 #endif
 
 /**
- * __pcpu_alloc - the percpu allocator
+ * pcpu_alloc_noprof - the percpu allocator
  * @size: size of area to allocate in bytes
  * @align: alignment of area (max PAGE_SIZE)
  * @reserved: allocate from the reserved chunk if available
@@ -1742,8 +1742,8 @@ static void pcpu_alloc_tag_free_hook(struct pcpu_chunk *chunk, int off, size_t s
  * RETURNS:
  * Percpu pointer to the allocated area on success, NULL on failure.
  */
-void __percpu *__pcpu_alloc(size_t size, size_t align, bool reserved,
-			    gfp_t gfp)
+void __percpu *pcpu_alloc_noprof(size_t size, size_t align, bool reserved,
+				 gfp_t gfp)
 {
 	gfp_t pcpu_gfp;
 	bool is_atomic;
@@ -1937,7 +1937,7 @@ void __percpu *__pcpu_alloc(size_t size, size_t align, bool reserved,
 
 	return NULL;
 }
-EXPORT_SYMBOL_GPL(__pcpu_alloc);
+EXPORT_SYMBOL_GPL(pcpu_alloc_noprof);
 
 /**
  * pcpu_balance_free - manage the amount of free chunks
-- 
2.41.0

