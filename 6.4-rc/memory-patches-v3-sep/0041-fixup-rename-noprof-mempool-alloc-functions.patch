From 1f2cfd90abec042b567cb34ab6a44e6146ea0cbc Mon Sep 17 00:00:00 2001
From: Suren Baghdasaryan <surenb@google.com>
Date: Sun, 28 May 2023 23:56:41 +0000
Subject: [PATCH 41/43] fixup! rename noprof mempool alloc functions

Signed-off-by: Suren Baghdasaryan <surenb@google.com>
---
 include/linux/mempool.h | 12 ++++++------
 mm/mempool.c            | 18 +++++++++---------
 2 files changed, 15 insertions(+), 15 deletions(-)

diff --git a/include/linux/mempool.h b/include/linux/mempool.h
index 5555a41d0..9fa126aa1 100644
--- a/include/linux/mempool.h
+++ b/include/linux/mempool.h
@@ -42,19 +42,19 @@ int mempool_init_node(mempool_t *pool, int min_nr, mempool_alloc_t *alloc_fn,
 		      mempool_free_t *free_fn, void *pool_data,
 		      gfp_t gfp_mask, int node_id);
 
-int _mempool_init(mempool_t *pool, int min_nr, mempool_alloc_t *alloc_fn,
+int mempool_init_noprof(mempool_t *pool, int min_nr, mempool_alloc_t *alloc_fn,
 		 mempool_free_t *free_fn, void *pool_data);
 #define mempool_init(...)						\
-	alloc_hooks(_mempool_init(__VA_ARGS__))
+	alloc_hooks(mempool_init_noprof(__VA_ARGS__))
 
 extern mempool_t *mempool_create(int min_nr, mempool_alloc_t *alloc_fn,
 			mempool_free_t *free_fn, void *pool_data);
 
-extern mempool_t *_mempool_create_node(int min_nr, mempool_alloc_t *alloc_fn,
+extern mempool_t *mempool_create_node_noprof(int min_nr, mempool_alloc_t *alloc_fn,
 			mempool_free_t *free_fn, void *pool_data,
 			gfp_t gfp_mask, int nid);
 #define mempool_create_node(...)					\
-	alloc_hooks(_mempool_create_node(__VA_ARGS__))
+	alloc_hooks(mempool_create_node_noprof(__VA_ARGS__))
 
 #define mempool_create(_min_nr, _alloc_fn, _free_fn, _pool_data)	\
 	mempool_create_node(_min_nr, _alloc_fn, _free_fn, _pool_data,	\
@@ -63,9 +63,9 @@ extern mempool_t *_mempool_create_node(int min_nr, mempool_alloc_t *alloc_fn,
 extern int mempool_resize(mempool_t *pool, int new_min_nr);
 extern void mempool_destroy(mempool_t *pool);
 
-extern void *_mempool_alloc(mempool_t *pool, gfp_t gfp_mask) __malloc;
+extern void *mempool_alloc_noprof(mempool_t *pool, gfp_t gfp_mask) __malloc;
 #define mempool_alloc(...)						\
-	alloc_hooks(_mempool_alloc(__VA_ARGS__))
+	alloc_hooks(mempool_alloc_noprof(__VA_ARGS__))
 
 extern void mempool_free(void *element, mempool_t *pool);
 
diff --git a/mm/mempool.c b/mm/mempool.c
index 4bfe827b2..a88ed6363 100644
--- a/mm/mempool.c
+++ b/mm/mempool.c
@@ -230,14 +230,14 @@ EXPORT_SYMBOL(mempool_init_node);
  *
  * Return: %0 on success, negative error code otherwise.
  */
-int _mempool_init(mempool_t *pool, int min_nr, mempool_alloc_t *alloc_fn,
-		 mempool_free_t *free_fn, void *pool_data)
+int mempool_init_noprof(mempool_t *pool, int min_nr, mempool_alloc_t *alloc_fn,
+			mempool_free_t *free_fn, void *pool_data)
 {
 	return mempool_init_node(pool, min_nr, alloc_fn, free_fn,
 				 pool_data, GFP_KERNEL, NUMA_NO_NODE);
 
 }
-EXPORT_SYMBOL(_mempool_init);
+EXPORT_SYMBOL(mempool_init_noprof);
 
 /**
  * mempool_create_node - create a memory pool
@@ -255,9 +255,9 @@ EXPORT_SYMBOL(_mempool_init);
  *
  * Return: pointer to the created memory pool object or %NULL on error.
  */
-mempool_t *_mempool_create_node(int min_nr, mempool_alloc_t *alloc_fn,
-			       mempool_free_t *free_fn, void *pool_data,
-			       gfp_t gfp_mask, int node_id)
+mempool_t *mempool_create_node_noprof(int min_nr, mempool_alloc_t *alloc_fn,
+				      mempool_free_t *free_fn, void *pool_data,
+				      gfp_t gfp_mask, int node_id)
 {
 	mempool_t *pool;
 
@@ -273,7 +273,7 @@ mempool_t *_mempool_create_node(int min_nr, mempool_alloc_t *alloc_fn,
 
 	return pool;
 }
-EXPORT_SYMBOL(_mempool_create_node);
+EXPORT_SYMBOL(mempool_create_node_noprof);
 
 /**
  * mempool_resize - resize an existing memory pool
@@ -369,7 +369,7 @@ EXPORT_SYMBOL(mempool_resize);
  *
  * Return: pointer to the allocated element or %NULL on error.
  */
-void *_mempool_alloc(mempool_t *pool, gfp_t gfp_mask)
+void *mempool_alloc_noprof(mempool_t *pool, gfp_t gfp_mask)
 {
 	void *element;
 	unsigned long flags;
@@ -436,7 +436,7 @@ void *_mempool_alloc(mempool_t *pool, gfp_t gfp_mask)
 	finish_wait(&pool->wait, &wait);
 	goto repeat_alloc;
 }
-EXPORT_SYMBOL(_mempool_alloc);
+EXPORT_SYMBOL(mempool_alloc_noprof);
 
 /**
  * mempool_free - return an element to the pool.
-- 
2.40.1.445.gf85cd430b1

