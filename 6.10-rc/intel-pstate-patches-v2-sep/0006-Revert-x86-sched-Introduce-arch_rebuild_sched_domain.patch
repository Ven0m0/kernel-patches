From 1650e136d323bf650829007b4432350e267b08d6 Mon Sep 17 00:00:00 2001
From: Peter Jung <admin@ptr1337.dev>
Date: Tue, 2 Jul 2024 20:24:02 +0200
Subject: [PATCH 6/9] Revert "x86/sched: Introduce
 arch_rebuild_sched_domains()"

This reverts commit 75ce6cef3aee052ee739054a1b476678e2e381cc.
---
 arch/x86/include/asm/topology.h |  6 ++----
 arch/x86/kernel/itmt.c          | 12 ++++++++----
 arch/x86/kernel/smpboot.c       | 10 +---------
 3 files changed, 11 insertions(+), 17 deletions(-)

diff --git a/arch/x86/include/asm/topology.h b/arch/x86/include/asm/topology.h
index 48a727e2e..abe3a8f22 100644
--- a/arch/x86/include/asm/topology.h
+++ b/arch/x86/include/asm/topology.h
@@ -235,6 +235,8 @@ struct pci_bus;
 int x86_pci_root_bus_node(int bus);
 void x86_pci_root_bus_resources(int bus, struct list_head *resources);
 
+extern bool x86_topology_update;
+
 #ifdef CONFIG_SCHED_MC_PRIO
 #include <asm/percpu.h>
 
@@ -282,13 +284,9 @@ static inline long arch_scale_freq_capacity(int cpu)
 
 extern void arch_set_max_freq_ratio(bool turbo_disabled);
 extern void freq_invariance_set_perf_ratio(u64 ratio, bool turbo_disabled);
-
-void arch_rebuild_sched_domains(void);
 #else
 static inline void arch_set_max_freq_ratio(bool turbo_disabled) { }
 static inline void freq_invariance_set_perf_ratio(u64 ratio, bool turbo_disabled) { }
-
-static inline void arch_rebuild_sched_domains(void) { }
 #endif
 
 extern void arch_scale_freq_tick(void);
diff --git a/arch/x86/kernel/itmt.c b/arch/x86/kernel/itmt.c
index af2f60c09..9a7c03d47 100644
--- a/arch/x86/kernel/itmt.c
+++ b/arch/x86/kernel/itmt.c
@@ -54,8 +54,10 @@ static int sched_itmt_update_handler(struct ctl_table *table, int write,
 	old_sysctl = sysctl_sched_itmt_enabled;
 	ret = proc_dointvec_minmax(table, write, buffer, lenp, ppos);
 
-	if (!ret && write && old_sysctl != sysctl_sched_itmt_enabled)
-		arch_rebuild_sched_domains();
+	if (!ret && write && old_sysctl != sysctl_sched_itmt_enabled) {
+		x86_topology_update = true;
+		rebuild_sched_domains();
+	}
 
 	mutex_unlock(&itmt_update_mutex);
 
@@ -112,7 +114,8 @@ int sched_set_itmt_support(void)
 
 	sysctl_sched_itmt_enabled = 1;
 
-	arch_rebuild_sched_domains();
+	x86_topology_update = true;
+	rebuild_sched_domains();
 
 	mutex_unlock(&itmt_update_mutex);
 
@@ -147,7 +150,8 @@ void sched_clear_itmt_support(void)
 	if (sysctl_sched_itmt_enabled) {
 		/* disable sched_itmt if we are no longer ITMT capable */
 		sysctl_sched_itmt_enabled = 0;
-		arch_rebuild_sched_domains();
+		x86_topology_update = true;
+		rebuild_sched_domains();
 	}
 
 	mutex_unlock(&itmt_update_mutex);
diff --git a/arch/x86/kernel/smpboot.c b/arch/x86/kernel/smpboot.c
index 90a6fb54a..0c3520732 100644
--- a/arch/x86/kernel/smpboot.c
+++ b/arch/x86/kernel/smpboot.c
@@ -39,7 +39,6 @@
 
 #define pr_fmt(fmt) KBUILD_MODNAME ": " fmt
 
-#include <linux/cpuset.h>
 #include <linux/init.h>
 #include <linux/smp.h>
 #include <linux/export.h>
@@ -126,7 +125,7 @@ static DEFINE_PER_CPU_ALIGNED(struct mwait_cpu_dead, mwait_cpu_dead);
 int __read_mostly __max_smt_threads = 1;
 
 /* Flag to indicate if a complete sched domain rebuild is required */
-static bool x86_topology_update;
+bool x86_topology_update;
 
 int arch_update_cpu_topology(void)
 {
@@ -136,13 +135,6 @@ int arch_update_cpu_topology(void)
 	return retval;
 }
 
-#ifdef CONFIG_X86_64
-void arch_rebuild_sched_domains(void) {
-	x86_topology_update = true;
-	rebuild_sched_domains();
-}
-#endif
-
 static unsigned int smpboot_warm_reset_vector_count;
 
 static inline void smpboot_setup_warm_reset_vector(unsigned long start_eip)
-- 
2.45.2.606.g9005149a4a

