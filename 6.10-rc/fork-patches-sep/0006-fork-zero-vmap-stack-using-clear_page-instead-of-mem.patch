From c0e7979f60887e9982a2434fc37a2ef2a5547215 Mon Sep 17 00:00:00 2001
From: Pasha Tatashin <pasha.tatashin@soleen.com>
Date: Mon, 11 Mar 2024 16:46:30 +0000
Subject: [PATCH 06/14] fork: zero vmap stack using clear_page() instead of
 memset()

In preporation for dynamic kernel stacks do not zero the whole span of
the stack, but instead only the pages that are part of the vm_area.

This is because with dynamic stacks we might have only partially
populated stacks.

Signed-off-by: Pasha Tatashin <pasha.tatashin@soleen.com>
---
 kernel/fork.c | 6 ++++--
 1 file changed, 4 insertions(+), 2 deletions(-)

diff --git a/kernel/fork.c b/kernel/fork.c
index 4c8ab1654..d79ba310b 100644
--- a/kernel/fork.c
+++ b/kernel/fork.c
@@ -265,8 +265,8 @@ static int memcg_charge_kernel_stack(struct vm_struct *vm)
 static int alloc_thread_stack_node(struct task_struct *tsk, int node)
 {
 	struct vm_struct *vm_area;
+	int i, j, nr_pages;
 	void *stack;
-	int i;
 
 	for (i = 0; i < NR_CACHED_STACKS; i++) {
 		vm_area = this_cpu_xchg(cached_stacks[i], NULL);
@@ -284,7 +284,9 @@ static int alloc_thread_stack_node(struct task_struct *tsk, int node)
 		stack = kasan_reset_tag(vm_area->addr);
 
 		/* Clear stale pointers from reused stack. */
-		memset(stack, 0, THREAD_SIZE);
+		nr_pages = vm_area->nr_pages;
+		for (j = 0; j < nr_pages; j++)
+			clear_page(page_address(vm_area->pages[j]));
 
 		tsk->stack_vm_area = vm_area;
 		tsk->stack = stack;
-- 
2.45.1.145.g83f1add914

