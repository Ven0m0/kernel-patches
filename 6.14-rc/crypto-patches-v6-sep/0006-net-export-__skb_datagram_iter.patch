From 9da6b3e7e1c12093e39d0b6aea5428c4897a5892 Mon Sep 17 00:00:00 2001
From: Eric Biggers <ebiggers@google.com>
Date: Mon, 27 Jan 2025 13:19:31 -0800
Subject: [PATCH 06/11] net: export __skb_datagram_iter()

Export __skb_datagram_iter() so that the only user of
skb_copy_and_hash_datagram_iter() can use that instead.

skb_copy_and_hash_datagram_iter() is problematic because it is built
when CONFIG_NET=y but it depends on CONFIG_CRYPTO=y.  NET should not
depend on CRYPTO, and indeed that dependency does not exist in the
kconfig.  Instead, there's an #ifdef CONFIG_CRYPTO in the code that
causes a broken version of skb_copy_and_hash_datagram_iter() to be
inserted when CRYPTO is set to either 'n' or 'm'.

skb_copy_and_hash_datagram_iter() is only used by nvme-tcp.  Presumably
everyone who has run that code has CONFIG_CRYPTO=y for some unrelated
reason.  But this design is still broken, and it will still be broken
when the dependency on CONFIG_CRYPTO is replaced by CONFIG_CRC32.

Therefore, in preparation for removing
skb_copy_and_hash_datagram_iter(), export the underlying function
__skb_datagram_iter() so that the CRC can be done in a custom callback.

An alterative solution would be to introduce a new symbol in net/Kconfig
specifically for skb_copy_and_hash_datagram_iter().  I've gone with this
patch instead since it results in less code in net/core/ (once
skb_copy_and_hash_datagram_iter() is removed).

Signed-off-by: Eric Biggers <ebiggers@google.com>
---
 include/linux/skbuff.h | 4 ++++
 net/core/datagram.c    | 9 +++++----
 2 files changed, 9 insertions(+), 4 deletions(-)

diff --git a/include/linux/skbuff.h b/include/linux/skbuff.h
index bb2b751d2..d32e7816d 100644
--- a/include/linux/skbuff.h
+++ b/include/linux/skbuff.h
@@ -4145,6 +4145,10 @@ static inline int skb_copy_datagram_msg(const struct sk_buff *from, int offset,
 }
 int skb_copy_and_csum_datagram_msg(struct sk_buff *skb, int hlen,
 				   struct msghdr *msg);
+int __skb_datagram_iter(const struct sk_buff *skb, int offset,
+			struct iov_iter *to, int len, bool fault_short,
+			size_t (*cb)(const void *, size_t, void *,
+				     struct iov_iter *), void *data);
 int skb_copy_and_hash_datagram_iter(const struct sk_buff *skb, int offset,
 			   struct iov_iter *to, int len,
 			   struct ahash_request *hash);
diff --git a/net/core/datagram.c b/net/core/datagram.c
index f0693707a..fc95e87fa 100644
--- a/net/core/datagram.c
+++ b/net/core/datagram.c
@@ -385,10 +385,10 @@ INDIRECT_CALLABLE_DECLARE(static size_t simple_copy_to_iter(const void *addr,
 						void *data __always_unused,
 						struct iov_iter *i));
 
-static int __skb_datagram_iter(const struct sk_buff *skb, int offset,
-			       struct iov_iter *to, int len, bool fault_short,
-			       size_t (*cb)(const void *, size_t, void *,
-					    struct iov_iter *), void *data)
+int __skb_datagram_iter(const struct sk_buff *skb, int offset,
+			struct iov_iter *to, int len, bool fault_short,
+			size_t (*cb)(const void *, size_t, void *,
+				     struct iov_iter *), void *data)
 {
 	int start = skb_headlen(skb);
 	int i, copy = start - offset, start_off = offset, n;
@@ -481,6 +481,7 @@ static int __skb_datagram_iter(const struct sk_buff *skb, int offset,
 
 	return 0;
 }
+EXPORT_SYMBOL_GPL(__skb_datagram_iter);
 
 static size_t hash_and_copy_to_iter(const void *addr, size_t bytes, void *hashp,
 				    struct iov_iter *i)
-- 
2.48.1

