From e1e92dfa4f19baec83942c7e8919743afa2a560b Mon Sep 17 00:00:00 2001
From: Janne Grunau <j@jannau.net>
Date: Sun, 11 Dec 2022 23:24:41 +0100
Subject: [PATCH 42/56] HID: transport: spi: Add suspend support

Working suspend and resume. The keyboard can not yet used as wakeup
source. Most likely caused by missing irq_set_wake support in the
gpio/pinctrl driver.

Signed-off-by: Janne Grunau <j@jannau.net>
---
 drivers/hid/spi-hid/spi-hid-apple-core.c | 89 ++++++++++++++++++++++++
 drivers/hid/spi-hid/spi-hid-apple-of.c   | 19 ++++-
 drivers/hid/spi-hid/spi-hid-apple.h      |  4 ++
 3 files changed, 110 insertions(+), 2 deletions(-)

diff --git a/drivers/hid/spi-hid/spi-hid-apple-core.c b/drivers/hid/spi-hid/spi-hid-apple-core.c
index a10a5a38b..d48cb559a 100644
--- a/drivers/hid/spi-hid/spi-hid-apple-core.c
+++ b/drivers/hid/spi-hid/spi-hid-apple-core.c
@@ -115,6 +115,10 @@ struct spihid_apple {
 
 	/* state tracking flags */
 	bool status_booted;
+
+#ifdef IRQ_WAKE_SUPPORT
+	bool irq_wake_enabled;
+#endif
 };
 
 /**
@@ -1038,6 +1042,91 @@ void spihid_apple_core_shutdown(struct spi_device *spi)
 }
 EXPORT_SYMBOL_GPL(spihid_apple_core_shutdown);
 
+#ifdef CONFIG_PM_SLEEP
+static int spihid_apple_core_suspend(struct device *dev)
+{
+	int ret;
+#ifdef IRQ_WAKE_SUPPORT
+	int wake_status;
+#endif
+	struct spihid_apple *spihid = spi_get_drvdata(to_spi_device(dev));
+
+	if (spihid->tp.hid) {
+		ret = hid_driver_suspend(spihid->tp.hid, PMSG_SUSPEND);
+		if (ret < 0)
+			return ret;
+	}
+
+	if (spihid->kbd.hid) {
+		ret = hid_driver_suspend(spihid->kbd.hid, PMSG_SUSPEND);
+		if (ret < 0) {
+			if (spihid->tp.hid)
+				hid_driver_resume(spihid->tp.hid);
+			return ret;
+		}
+	}
+
+	/* Save some power */
+	spihid->ops->disable_irq(spihid->ops);
+
+#ifdef IRQ_WAKE_SUPPORT
+	if (device_may_wakeup(dev)) {
+		wake_status = spihid->ops->enable_irq_wake(spihid->ops);
+		if (!wake_status)
+			spihid->irq_wake_enabled = true;
+		else
+			dev_warn(dev, "Failed to enable irq wake: %d\n",
+				wake_status);
+	} else {
+		spihid->ops->power_off(spihid->ops);
+	}
+#else
+	spihid->ops->power_off(spihid->ops);
+#endif
+
+	return 0;
+}
+
+static int spihid_apple_core_resume(struct device *dev)
+{
+	int ret_tp = 0, ret_kbd = 0;
+	struct spihid_apple *spihid = spi_get_drvdata(to_spi_device(dev));
+#ifdef IRQ_WAKE_SUPPORT
+	int wake_status;
+
+	if (!device_may_wakeup(dev)) {
+		spihid->ops->power_on(spihid->ops);
+	} else if (spihid->irq_wake_enabled) {
+		wake_status = spihid->ops->disable_irq_wake(spihid->ops);
+		if (!wake_status)
+			spihid->irq_wake_enabled = false;
+		else
+			dev_warn(dev, "Failed to disable irq wake: %d\n",
+				wake_status);
+	}
+#endif
+
+	spihid->ops->enable_irq(spihid->ops);
+	spihid->ops->power_on(spihid->ops);
+
+	if (spihid->tp.hid)
+		ret_tp = hid_driver_reset_resume(spihid->tp.hid);
+	if (spihid->kbd.hid)
+		ret_kbd = hid_driver_reset_resume(spihid->kbd.hid);
+
+	if (ret_tp < 0)
+		return ret_tp;
+
+	return ret_kbd;
+}
+#endif
+
+const struct dev_pm_ops spihid_apple_core_pm = {
+	SET_SYSTEM_SLEEP_PM_OPS(spihid_apple_core_suspend,
+				spihid_apple_core_resume)
+};
+EXPORT_SYMBOL_GPL(spihid_apple_core_pm);
+
 MODULE_DESCRIPTION("Apple SPI HID transport driver");
 MODULE_AUTHOR("Janne Grunau <j@jannau.net>");
 MODULE_LICENSE("GPL");
diff --git a/drivers/hid/spi-hid/spi-hid-apple-of.c b/drivers/hid/spi-hid/spi-hid-apple-of.c
index f1380bfc5..3f87b2993 100644
--- a/drivers/hid/spi-hid/spi-hid-apple-of.c
+++ b/drivers/hid/spi-hid/spi-hid-apple-of.c
@@ -65,6 +65,20 @@ static int spihid_apple_of_disable_irq(struct spihid_apple_ops *ops)
 	return 0;
 }
 
+static int spihid_apple_of_enable_irq_wake(struct spihid_apple_ops *ops)
+{
+	struct spihid_apple_of *sh_of = container_of(ops, struct spihid_apple_of, ops);
+
+	return enable_irq_wake(sh_of->irq);
+}
+
+static int spihid_apple_of_disable_irq_wake(struct spihid_apple_ops *ops)
+{
+	struct spihid_apple_of *sh_of = container_of(ops, struct spihid_apple_of, ops);
+
+	return disable_irq_wake(sh_of->irq);
+}
+
 static int spihid_apple_of_probe(struct spi_device *spi)
 {
 	struct device *dev = &spi->dev;
@@ -79,6 +93,8 @@ static int spihid_apple_of_probe(struct spi_device *spi)
 	spihid_of->ops.power_off = spihid_apple_of_power_off;
 	spihid_of->ops.enable_irq = spihid_apple_of_enable_irq;
 	spihid_of->ops.disable_irq = spihid_apple_of_disable_irq;
+	spihid_of->ops.enable_irq_wake = spihid_apple_of_enable_irq_wake;
+	spihid_of->ops.disable_irq_wake = spihid_apple_of_disable_irq_wake;
 
 	spihid_of->enable_gpio = devm_gpiod_get_index(dev, "spien", 0, 0);
 	if (IS_ERR(spihid_of->enable_gpio)) {
@@ -120,8 +136,7 @@ MODULE_DEVICE_TABLE(spi, spihid_apple_of_id);
 static struct spi_driver spihid_apple_of_driver = {
 	.driver = {
 		.name	= "spi-hid-apple-of",
-		//.pm	= &spi_hid_apple_of_pm,
-		.owner = THIS_MODULE,
+		.pm	= &spihid_apple_core_pm,
 		.of_match_table = of_match_ptr(spihid_apple_of_match),
 	},
 
diff --git a/drivers/hid/spi-hid/spi-hid-apple.h b/drivers/hid/spi-hid/spi-hid-apple.h
index 2d9554e8a..9abecd1ba 100644
--- a/drivers/hid/spi-hid/spi-hid-apple.h
+++ b/drivers/hid/spi-hid/spi-hid-apple.h
@@ -20,6 +20,8 @@ struct spihid_apple_ops {
     int (*power_off)(struct spihid_apple_ops *ops);
     int (*enable_irq)(struct spihid_apple_ops *ops);
     int (*disable_irq)(struct spihid_apple_ops *ops);
+    int (*enable_irq_wake)(struct spihid_apple_ops *ops);
+    int (*disable_irq_wake)(struct spihid_apple_ops *ops);
 };
 
 irqreturn_t spihid_apple_core_irq(int irq, void *data);
@@ -28,4 +30,6 @@ int spihid_apple_core_probe(struct spi_device *spi, struct spihid_apple_ops *ops
 void spihid_apple_core_remove(struct spi_device *spi);
 void spihid_apple_core_shutdown(struct spi_device *spi);
 
+extern const struct dev_pm_ops spihid_apple_core_pm;
+
 #endif /* SPI_HID_APPLE_H */
-- 
2.50.1

