From 8b431bc2371db441fba1f27fbaea81dd72e8c80d Mon Sep 17 00:00:00 2001
From: Stephan Mueller <smueller@chronox.de>
Date: Sun, 27 Aug 2023 20:50:31 +0200
Subject: [PATCH 29/29] Editorial changes as requested by checkpatch.pl

Signed-off-by: Stephan Mueller <smueller@chronox.de>
---
 drivers/char/lrng/lrng_drng_mgr.c             |  2 +-
 drivers/char/lrng/lrng_es_irq.c               |  2 +-
 drivers/char/lrng/lrng_es_jent.c              | 20 +++++++++----------
 drivers/char/lrng/lrng_es_mgr.c               |  2 +-
 drivers/char/lrng/lrng_es_timer_common.h      |  2 +-
 drivers/char/lrng/lrng_interface_aux.c        |  3 ++-
 drivers/char/lrng/lrng_interface_dev_common.c |  6 +++---
 drivers/char/lrng/lrng_switch.c               |  4 ++--
 8 files changed, 21 insertions(+), 20 deletions(-)

diff --git a/drivers/char/lrng/lrng_drng_mgr.c b/drivers/char/lrng/lrng_drng_mgr.c
index 3d9ed60a7..69ad26431 100644
--- a/drivers/char/lrng/lrng_drng_mgr.c
+++ b/drivers/char/lrng/lrng_drng_mgr.c
@@ -89,7 +89,7 @@ static bool force_seeding = true;
 #ifdef CONFIG_LRNG_RUNTIME_FORCE_SEEDING_DISABLE
 module_param(force_seeding, bool, 0444);
 MODULE_PARM_DESC(force_seeding,
-		 "Allow disabling of the forced seeding when insufficient entropy is availabe\n");
+		 "Allow disabling of the forced seeding when insufficient entropy is available\n");
 #endif
 
 /* Wait queue to wait until the LRNG is initialized - can freely be used */
diff --git a/drivers/char/lrng/lrng_es_irq.c b/drivers/char/lrng/lrng_es_irq.c
index 4eb12872c..08b035844 100644
--- a/drivers/char/lrng/lrng_es_irq.c
+++ b/drivers/char/lrng/lrng_es_irq.c
@@ -720,7 +720,7 @@ static void lrng_irq_es_state(unsigned char *buf, size_t buflen)
 }
 
 struct lrng_es_cb lrng_es_irq = {
-	.name 			= "IRQ",
+	.name			= "IRQ",
 	.get_ent		= lrng_irq_pool_hash,
 	.curr_entropy		= lrng_irq_avail_entropy,
 	.max_entropy		= lrng_irq_avail_pool_size,
diff --git a/drivers/char/lrng/lrng_es_jent.c b/drivers/char/lrng/lrng_es_jent.c
index 9c01e9b9f..250a8fc6e 100644
--- a/drivers/char/lrng/lrng_es_jent.c
+++ b/drivers/char/lrng/lrng_es_jent.c
@@ -33,7 +33,7 @@ MODULE_PARM_DESC(jent_entropy,
 #endif
 
 static bool lrng_jent_initialized = false;
-static struct crypto_rng* jent;
+static struct crypto_rng *jent;
 
 #if (CONFIG_LRNG_JENT_ENTROPY_BLOCKS != 0)
 
@@ -82,7 +82,7 @@ static u32 lrng_jent_poolsize(void)
 	return lrng_jent_entropylevel(lrng_security_strength());
 }
 
-static void __lrng_jent_get(u8* e, u32* e_bits, u32 requested_bits)
+static void __lrng_jent_get(u8 *e, u32 *e_bits, u32 requested_bits)
 {
 	int ret;
 	u32 ent_bits = lrng_jent_entropylevel(requested_bits);
@@ -117,7 +117,7 @@ static void __lrng_jent_get(u8* e, u32* e_bits, u32 requested_bits)
  * @eb: entropy buffer to store entropy
  * @requested_bits: requested entropy in bits
  */
-static void lrng_jent_get(struct entropy_buf* eb, u32 requested_bits,
+static void lrng_jent_get(struct entropy_buf *eb, u32 requested_bits,
 			  bool __unused)
 {
 	__lrng_jent_get(eb->e[lrng_ext_es_jitter],
@@ -127,7 +127,7 @@ static void lrng_jent_get(struct entropy_buf* eb, u32 requested_bits,
 #if (CONFIG_LRNG_JENT_ENTROPY_BLOCKS != 0)
 
 /* Fill the Jitter RNG buffer with random data. */
-static void lrng_jent_async_monitor(struct work_struct* __unused)
+static void lrng_jent_async_monitor(struct work_struct *__unused)
 {
 	unsigned int i, requested_bits = lrng_get_seed_entropy_osr(true);
 
@@ -169,7 +169,7 @@ static void lrng_jent_async_fini(void)
 }
 
 /* Get Jitter RNG data from the buffer */
-static void lrng_jent_async_get(struct entropy_buf* eb, uint32_t requested_bits,
+static void lrng_jent_async_get(struct entropy_buf *eb, uint32_t requested_bits,
 				bool __unused)
 {
 	static atomic_t idx = ATOMIC_INIT(-1);
@@ -218,7 +218,7 @@ static void lrng_jent_async_get(struct entropy_buf* eb, uint32_t requested_bits,
 		lrng_jent_async_monitor_schedule();
 }
 
-static void lrng_jent_get_check(struct entropy_buf* eb,
+static void lrng_jent_get_check(struct entropy_buf *eb,
 				uint32_t requested_bits, bool __unused)
 {
 	if (lrng_es_jent_async_enabled &&
@@ -248,8 +248,8 @@ static void lrng_jent_async_init_complete(void)
 
 #if (defined(CONFIG_SYSFS) && defined(CONFIG_LRNG_RUNTIME_ES_CONFIG))
 /* Initialize or deinitialize the Jitter RNG async collection */
-static int lrng_jent_async_sysfs_set(const char* val,
-				     const struct kernel_param* kp)
+static int lrng_jent_async_sysfs_set(const char *val,
+				     const struct kernel_param *kp)
 {
 	static const char val_dflt[] = "1";
 	int ret;
@@ -292,7 +292,7 @@ MODULE_PARM_DESC(lrng_es_jent_async_enabled,
 
 #else /* CONFIG_LRNG_JENT_ENTROPY_BLOCKS */
 
-static void lrng_jent_get_check(struct entropy_buf* eb,
+static void lrng_jent_get_check(struct entropy_buf *eb,
 				uint32_t requested_bits, bool __unused)
 {
 	lrng_jent_get(eb, requested_bits, __unused);
@@ -302,7 +302,7 @@ static inline void __init lrng_jent_async_init_complete(void) { }
 
 #endif /* CONFIG_LRNG_JENT_ENTROPY_BLOCKS */
 
-static void lrng_jent_es_state(unsigned char* buf, size_t buflen)
+static void lrng_jent_es_state(unsigned char *buf, size_t buflen)
 {
 	snprintf(buf, buflen,
 		 " Available entropy: %u\n"
diff --git a/drivers/char/lrng/lrng_es_mgr.c b/drivers/char/lrng/lrng_es_mgr.c
index 9570a4a1b..8d01bedd3 100644
--- a/drivers/char/lrng/lrng_es_mgr.c
+++ b/drivers/char/lrng/lrng_es_mgr.c
@@ -234,7 +234,7 @@ bool lrng_fully_seeded(bool fully_seeded, u32 collected_entropy,
 
 		for_each_lrng_es(i) {
 			result += (eb ? eb->e_bits[i] :
-				        lrng_es[i]->curr_entropy(ent_thresh)) >=
+					lrng_es[i]->curr_entropy(ent_thresh)) >=
 				  LRNG_AIS2031_NPTRNG_MIN_ENTROPY;
 		}
 
diff --git a/drivers/char/lrng/lrng_es_timer_common.h b/drivers/char/lrng/lrng_es_timer_common.h
index b45b9f683..9ed954e20 100644
--- a/drivers/char/lrng/lrng_es_timer_common.h
+++ b/drivers/char/lrng/lrng_es_timer_common.h
@@ -80,4 +80,4 @@ static inline void lrng_data_split_u32(u32 *ptr, u32 *pre_ptr, u32 *mask)
 			LRNG_DATA_SLOTSIZE_BITS)) - 1;
 }
 
-#endif /* _LRNG_ES_TIMER_COMMON_H */
\ No newline at end of file
+#endif /* _LRNG_ES_TIMER_COMMON_H */
diff --git a/drivers/char/lrng/lrng_interface_aux.c b/drivers/char/lrng/lrng_interface_aux.c
index 84f3ce38f..12eb1d8d9 100644
--- a/drivers/char/lrng/lrng_interface_aux.c
+++ b/drivers/char/lrng/lrng_interface_aux.c
@@ -139,6 +139,7 @@ EXPORT_SYMBOL(get_random_u8);
 u32 __get_random_u32_below(u32 ceil)
 {
 	u64 mult = (u64)ceil * get_random_u32();
+
 	if (unlikely((u32)mult < ceil)) {
 		u32 bound = -ceil % ceil;
 		while (unlikely((u32)mult < bound))
@@ -168,7 +169,7 @@ int random_prepare_cpu(unsigned int cpu)
 
 int random_online_cpu(unsigned int cpu)
 {
-        return 0;
+	return 0;
 }
 #endif
 
diff --git a/drivers/char/lrng/lrng_interface_dev_common.c b/drivers/char/lrng/lrng_interface_dev_common.c
index a2845e278..f69e86ecd 100644
--- a/drivers/char/lrng/lrng_interface_dev_common.c
+++ b/drivers/char/lrng/lrng_interface_dev_common.c
@@ -86,11 +86,11 @@ ssize_t lrng_read_seed(char __user *buf, size_t nbytes, unsigned int flags)
 
 	memset(t, 0, sizeof(t));
 	ret = lrng_get_seed(t, min_t(size_t, nbytes, sizeof(t)), flags);
-	if (ret == -EMSGSIZE && copy_to_user(buf, t, sizeof(u64))) {
+	if (ret == -EMSGSIZE && copy_to_user(buf, t, sizeof(u64)))
 		ret = -EFAULT;
-	} else if (ret > 0 && copy_to_user(buf, t, ret)) {
+	else if (ret > 0 && copy_to_user(buf, t, ret))
 		ret = -EFAULT;
-	}
+
 	memzero_explicit(t, sizeof(t));
 
 	return ret;
diff --git a/drivers/char/lrng/lrng_switch.c b/drivers/char/lrng/lrng_switch.c
index aae755949..13c70797b 100644
--- a/drivers/char/lrng/lrng_switch.c
+++ b/drivers/char/lrng/lrng_switch.c
@@ -159,8 +159,8 @@ lrng_drng_switch(struct lrng_drng *drng_store, const void *cb, int node)
  * callbacks. The caller must hold the lrng_crypto_cb_update lock.
  */
 static int lrng_switch(const void *cb,
-		       int(*switcher)(struct lrng_drng *drng_store,
-				      const void *cb, int node))
+		       int (*switcher)(struct lrng_drng *drng_store,
+				       const void *cb, int node))
 {
 	struct lrng_drng **lrng_drng = lrng_drng_instances();
 	struct lrng_drng *lrng_drng_init = lrng_drng_init_instance();
-- 
2.42.0

