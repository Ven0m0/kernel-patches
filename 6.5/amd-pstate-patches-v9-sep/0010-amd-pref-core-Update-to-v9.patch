From 0db237dad164f446b51f777e8d59f09f7fa8812a Mon Sep 17 00:00:00 2001
From: Piotr Gorski <lucjan.lucjanov@gmail.com>
Date: Fri, 13 Oct 2023 16:22:43 +0200
Subject: [PATCH 10/11] amd-pref-core: Update to v9

Signed-off-by: Piotr Gorski <lucjan.lucjanov@gmail.com>
---
 drivers/cpufreq/amd-pstate.c | 20 ++++++++++++++------
 1 file changed, 14 insertions(+), 6 deletions(-)

diff --git a/drivers/cpufreq/amd-pstate.c b/drivers/cpufreq/amd-pstate.c
index 94c77bd3c..8186a8463 100644
--- a/drivers/cpufreq/amd-pstate.c
+++ b/drivers/cpufreq/amd-pstate.c
@@ -542,7 +542,7 @@ static void amd_pstate_adjust_perf(unsigned int cpu,
 	if (target_perf < capacity)
 		des_perf = DIV_ROUND_UP(cap_perf * target_perf, capacity);
 
-	min_perf = READ_ONCE(cpudata->lowest_perf);
+	min_perf = READ_ONCE(cpudata->highest_perf);
 	if (_min_perf < capacity)
 		min_perf = DIV_ROUND_UP(cap_perf * _min_perf, capacity);
 
@@ -698,7 +698,6 @@ static DECLARE_WORK(sched_prefcore_work, amd_pstste_sched_prefcore_workfn);
 static int amd_pstate_get_highest_perf(int cpu, u32 *highest_perf)
 {
 	int ret;
-	u64 cppc_highest_perf;
 
 	if (boot_cpu_has(X86_FEATURE_CPPC)) {
 		u64 cap1;
@@ -708,8 +707,10 @@ static int amd_pstate_get_highest_perf(int cpu, u32 *highest_perf)
 			return ret;
 		WRITE_ONCE(*highest_perf, AMD_CPPC_HIGHEST_PERF(cap1));
 	} else {
+		u64 cppc_highest_perf;
+
 		ret = cppc_get_highest_perf(cpu, &cppc_highest_perf);
-		*highest_perf = (u32)(cppc_highest_perf & 0xFFFF);
+		WRITE_ONCE(*highest_perf, cppc_highest_perf);
 	}
 
 	return (ret);
@@ -717,7 +718,7 @@ static int amd_pstate_get_highest_perf(int cpu, u32 *highest_perf)
 
 static void amd_pstate_init_prefcore(struct amd_cpudata *cpudata)
 {
-	int ret;
+	int ret, prio;
 	u32 highest_perf;
 	static u32 max_highest_perf = 0, min_highest_perf = U32_MAX;
 
@@ -736,12 +737,14 @@ static void amd_pstate_init_prefcore(struct amd_cpudata *cpudata)
 	if (!amd_pstate_prefcore)
 		return;
 
+	/* The maximum value of highest perf is 255 */
+	prio = (int)(highest_perf & 0xff);
 	/*
 	 * The priorities can be set regardless of whether or not
 	 * sched_set_itmt_support(true) has been called and it is valid to
 	 * update them at any time after it has been called.
 	 */
-	sched_set_itmt_core_prio(highest_perf, cpudata->cpu);
+	sched_set_itmt_core_prio(prio, cpudata->cpu);
 
 	if (max_highest_perf <= min_highest_perf) {
 		if (highest_perf > max_highest_perf)
@@ -781,8 +784,13 @@ static void amd_pstate_update_highest_perf(unsigned int cpu)
 	prev_high = READ_ONCE(cpudata->prefcore_ranking);
 
 	if (prev_high != cur_high) {
+		int prio;
+
 		WRITE_ONCE(cpudata->prefcore_ranking, cur_high);
-		sched_set_itmt_core_prio(cur_high, cpu);
+
+		/* The maximum value of highest perf is 255 */
+		prio = (int)(cur_high & 0xff);
+		sched_set_itmt_core_prio(prio, cpu);
 	}
 
 	cpufreq_cpu_put(policy);
-- 
2.42.0

