From 3201bdd7db980c13a03086fe0f374310e5fe49bf Mon Sep 17 00:00:00 2001
From: Peter Jung <admin@ptr1337.dev>
Date: Wed, 27 Sep 2023 20:28:02 +0200
Subject: [PATCH 16/22] Revert "sched/fair: Add sched group latency support"

This reverts commit 903e5cce647c692b11d9587b5315cc4fc21822e4.
---
 Documentation/admin-guide/cgroup-v2.rst | 10 ---------
 kernel/sched/core.c                     | 30 -------------------------
 kernel/sched/fair.c                     | 27 ----------------------
 kernel/sched/sched.h                    |  4 ----
 4 files changed, 71 deletions(-)

diff --git a/Documentation/admin-guide/cgroup-v2.rst b/Documentation/admin-guide/cgroup-v2.rst
index 3a8d3e1e5..4ef890191 100644
--- a/Documentation/admin-guide/cgroup-v2.rst
+++ b/Documentation/admin-guide/cgroup-v2.rst
@@ -1121,16 +1121,6 @@ All time durations are in microseconds.
         values similar to the sched_setattr(2). This maximum utilization
         value is used to clamp the task specific maximum utilization clamp.
 
-  cpu.latency.nice
-	A read-write single value file which exists on non-root
-	cgroups.  The default is "0".
-
-	The nice value is in the range [-20, 19].
-
-	This interface file allows reading and setting latency using the
-	same values used by sched_setattr(2). The latency_nice of a group is
-	used to limit the impact of the latency_nice of a task outside the
-	group.
 
 
 Memory
diff --git a/kernel/sched/core.c b/kernel/sched/core.c
index aff81e124..53eaa9a19 100644
--- a/kernel/sched/core.c
+++ b/kernel/sched/core.c
@@ -11213,25 +11213,6 @@ static int cpu_idle_write_s64(struct cgroup_subsys_state *css,
 {
 	return sched_group_set_idle(css_tg(css), idle);
 }
-
-static s64 cpu_latency_nice_read_s64(struct cgroup_subsys_state *css,
-				    struct cftype *cft)
-{
-	return PRIO_TO_NICE(css_tg(css)->latency_prio);
-}
-
-static int cpu_latency_nice_write_s64(struct cgroup_subsys_state *css,
-				     struct cftype *cft, s64 nice)
-{
-	int prio;
-
-	if (nice < MIN_NICE || nice > MAX_NICE)
-		return -ERANGE;
-
-	prio = NICE_TO_PRIO(nice);
-
-	return sched_group_set_latency(css_tg(css), prio);
-}
 #endif
 
 static struct cftype cpu_legacy_files[] = {
@@ -11246,11 +11227,6 @@ static struct cftype cpu_legacy_files[] = {
 		.read_s64 = cpu_idle_read_s64,
 		.write_s64 = cpu_idle_write_s64,
 	},
-	{
-		.name = "latency.nice",
-		.read_s64 = cpu_latency_nice_read_s64,
-		.write_s64 = cpu_latency_nice_write_s64,
-	},
 #endif
 #ifdef CONFIG_CFS_BANDWIDTH
 	{
@@ -11468,12 +11444,6 @@ static struct cftype cpu_files[] = {
 		.read_s64 = cpu_idle_read_s64,
 		.write_s64 = cpu_idle_write_s64,
 	},
-	{
-		.name = "latency.nice",
-		.flags = CFTYPE_NOT_ON_ROOT,
-		.read_s64 = cpu_latency_nice_read_s64,
-		.write_s64 = cpu_latency_nice_write_s64,
-	},
 #endif
 #ifdef CONFIG_CFS_BANDWIDTH
 	{
diff --git a/kernel/sched/fair.c b/kernel/sched/fair.c
index d49c0f979..6b4a3142e 100644
--- a/kernel/sched/fair.c
+++ b/kernel/sched/fair.c
@@ -12363,7 +12363,6 @@ int alloc_fair_sched_group(struct task_group *tg, struct task_group *parent)
 		goto err;
 
 	tg->shares = NICE_0_LOAD;
-	tg->latency_prio = DEFAULT_PRIO;
 
 	init_cfs_bandwidth(tg_cfs_bandwidth(tg));
 
@@ -12462,9 +12461,6 @@ void init_tg_cfs_entry(struct task_group *tg, struct cfs_rq *cfs_rq,
 	}
 
 	se->my_q = cfs_rq;
-
-	set_latency_fair(se, tg->latency_prio - MAX_RT_PRIO);
-
 	/* guarantee group entities always have weight */
 	update_load_set(&se->load, NICE_0_LOAD);
 	se->parent = parent;
@@ -12595,29 +12591,6 @@ int sched_group_set_idle(struct task_group *tg, long idle)
 	return 0;
 }
 
-int sched_group_set_latency(struct task_group *tg, int prio)
-{
-	int i;
-
-	if (tg == &root_task_group)
-		return -EINVAL;
-
-	mutex_lock(&shares_mutex);
-
-	if (tg->latency_prio == prio) {
-		mutex_unlock(&shares_mutex);
-		return 0;
-	}
-
-	tg->latency_prio = prio;
-
-	for_each_possible_cpu(i)
-		set_latency_fair(tg->se[i], prio - MAX_RT_PRIO);
-
-	mutex_unlock(&shares_mutex);
-	return 0;
-}
-
 #else /* CONFIG_FAIR_GROUP_SCHED */
 
 void free_fair_sched_group(struct task_group *tg) { }
diff --git a/kernel/sched/sched.h b/kernel/sched/sched.h
index 67cd7e1fd..df86407a1 100644
--- a/kernel/sched/sched.h
+++ b/kernel/sched/sched.h
@@ -372,8 +372,6 @@ struct task_group {
 
 	/* A positive value indicates that this is a SCHED_IDLE group. */
 	int			idle;
-	/* latency priority of the group. */
-	int			latency_prio;
 
 #ifdef	CONFIG_SMP
 	/*
@@ -484,8 +482,6 @@ extern int sched_group_set_shares(struct task_group *tg, unsigned long shares);
 
 extern int sched_group_set_idle(struct task_group *tg, long idle);
 
-extern int sched_group_set_latency(struct task_group *tg, int prio);
-
 #ifdef CONFIG_SMP
 extern void set_task_rq_fair(struct sched_entity *se,
 			     struct cfs_rq *prev, struct cfs_rq *next);
-- 
2.42.0

