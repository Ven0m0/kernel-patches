From 6acce76bd2ddf817f31113f0902e89954d0df2de Mon Sep 17 00:00:00 2001
From: David Vernet <void@manifault.com>
Date: Thu, 30 Nov 2023 22:07:08 -0600
Subject: [PATCH 44/46] scx_nest: Reset prev_misses when r_impatient is
 exceeded

We weren't resetting tctx->prev_misses when a task failed to get its
previous core r_impatient times in a row. This could cause us to
incorrectly skip looking for primary nest cores when the value is
exceeded if we aren't able to use our previous core on subsequent
wakeups.

In addition, clean the code up a bit.

Signed-off-by: David Vernet <void@manifault.com>
---
 tools/sched_ext/scx_nest.bpf.c         | 13 +++++--------
 tools/sched_ext/scx_nest_stats_table.h |  4 ++--
 2 files changed, 7 insertions(+), 10 deletions(-)

diff --git a/tools/sched_ext/scx_nest.bpf.c b/tools/sched_ext/scx_nest.bpf.c
index 9badf3a00..4040f5431 100644
--- a/tools/sched_ext/scx_nest.bpf.c
+++ b/tools/sched_ext/scx_nest.bpf.c
@@ -47,7 +47,7 @@ const volatile u64 r_impatient = 2;
 const volatile u64 slice_ns = SCX_SLICE_DFL;
 const volatile bool find_fully_idle = false;
 
-static s32 nr_reserved;
+s32 nr_reserved, nr_primary;
 
 static u64 vtime_now;
 struct user_exit_info uei;
@@ -177,11 +177,9 @@ s32 BPF_STRUCT_OPS(nest_select_cpu, struct task_struct *p, s32 prev_cpu,
 		   u64 wake_flags)
 {
 	struct bpf_cpumask *p_mask, *primary, *reserve;
-	const struct cpumask *idle_smtmask;
 	s32 cpu;
 	struct task_ctx *tctx;
 	struct pcpu_ctx *pcpu_ctx;
-	bool prev_in_primary;
 	bool direct_to_primary = false;
 
 	tctx = bpf_task_storage_get(&task_ctx_stor, p, 0, 0);
@@ -201,13 +199,11 @@ s32 BPF_STRUCT_OPS(nest_select_cpu, struct task_struct *p, s32 prev_cpu,
 	tctx->force_local = true;
 
 	bpf_cpumask_and(p_mask, p->cpus_ptr, cast_mask(primary));
-	prev_in_primary = bpf_cpumask_test_cpu(prev_cpu, cast_mask(p_mask));
-
 	/*
 	 * First try to stay on current core if it's in the primary set, and
 	 * there's no hypertwin.
 	 */
-	if (prev_in_primary &&
+	if (bpf_cpumask_test_cpu(prev_cpu, cast_mask(p_mask)) &&
 	    scx_bpf_test_and_clear_cpu_idle(prev_cpu)) {
 		cpu = prev_cpu;
 		tctx->prev_misses = 0;
@@ -217,6 +213,7 @@ s32 BPF_STRUCT_OPS(nest_select_cpu, struct task_struct *p, s32 prev_cpu,
 
 	if (r_impatient > 0 && ++tctx->prev_misses >= r_impatient) {
 		direct_to_primary = true;
+		tctx->prev_misses = 0;
 		stat_inc(NEST_STAT(TASK_IMPATIENT));
 		goto search_reserved;
 	}
@@ -234,7 +231,7 @@ s32 BPF_STRUCT_OPS(nest_select_cpu, struct task_struct *p, s32 prev_cpu,
 	/* Then try _any_ idle core in primary, even if its hypertwin is active. */
 	cpu = scx_bpf_pick_idle_cpu(cast_mask(p_mask), 0);
 	if (cpu >= 0) {
-		stat_inc(NEST_STAT(WAKEUP_HT_IDLE_PRIMARY));
+		stat_inc(NEST_STAT(WAKEUP_ANY_IDLE_PRIMARY));
 		goto migrate_primary;
 	}
 
@@ -253,7 +250,7 @@ s32 BPF_STRUCT_OPS(nest_select_cpu, struct task_struct *p, s32 prev_cpu,
 	/* Then try _any_ idle core in reserve, even if its hypertwin is active. */
 	cpu = scx_bpf_pick_idle_cpu(cast_mask(p_mask), 0);
 	if (cpu >= 0) {
-		stat_inc(NEST_STAT(WAKEUP_HT_IDLE_RESERVE));
+		stat_inc(NEST_STAT(WAKEUP_ANY_IDLE_RESERVE));
 		goto promote_to_primary;
 	}
 
diff --git a/tools/sched_ext/scx_nest_stats_table.h b/tools/sched_ext/scx_nest_stats_table.h
index 5bb559cae..3691f2c96 100644
--- a/tools/sched_ext/scx_nest_stats_table.h
+++ b/tools/sched_ext/scx_nest_stats_table.h
@@ -1,8 +1,8 @@
 NEST_ST(WAKEUP_PREV_PRIMARY, STAT_GRP_WAKEUP, "Previous CPU was idle, and in primary nest")
 NEST_ST(WAKEUP_FULLY_IDLE_PRIMARY, STAT_GRP_WAKEUP, "Woken up to fully idle primary nest core")
-NEST_ST(WAKEUP_HT_IDLE_PRIMARY, STAT_GRP_WAKEUP, "Woken up to idle logical primary nest core")
+NEST_ST(WAKEUP_ANY_IDLE_PRIMARY, STAT_GRP_WAKEUP, "Woken up to idle logical primary nest core")
 NEST_ST(WAKEUP_FULLY_IDLE_RESERVE, STAT_GRP_WAKEUP, "Woken up to fully idle reserve nest core")
-NEST_ST(WAKEUP_HT_IDLE_RESERVE, STAT_GRP_WAKEUP, "Woken up to idle logical reserve nest core")
+NEST_ST(WAKEUP_ANY_IDLE_RESERVE, STAT_GRP_WAKEUP, "Woken up to idle logical reserve nest core")
 NEST_ST(WAKEUP_IDLE_OTHER, STAT_GRP_WAKEUP, "Woken to any idle logical core in p->cpus_ptr")
 
 NEST_ST(TASK_IMPATIENT, STAT_GRP_NEST, "A task was found to be impatient")
-- 
2.43.0.rc2

