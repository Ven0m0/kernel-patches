From 3de7fd56078f860cfe180a7266ef8bec99000750 Mon Sep 17 00:00:00 2001
From: David Vernet <void@manifault.com>
Date: Fri, 1 Dec 2023 11:22:39 -0600
Subject: [PATCH 62/68] nest: Print idle mask stats

In addition to printing primary, reserved and other nest stats, let's
also print when cores are idle to help understand the behavior of the
scheduler.

Signed-off-by: David Vernet <void@manifault.com>
---
 tools/sched_ext/scx_nest.bpf.c         | 10 +++++++++-
 tools/sched_ext/scx_nest.c             | 12 ++++++++----
 tools/sched_ext/scx_nest_stats_table.h |  1 +
 3 files changed, 18 insertions(+), 5 deletions(-)

diff --git a/tools/sched_ext/scx_nest.bpf.c b/tools/sched_ext/scx_nest.bpf.c
index 54e0632d0..f90925ad4 100644
--- a/tools/sched_ext/scx_nest.bpf.c
+++ b/tools/sched_ext/scx_nest.bpf.c
@@ -50,7 +50,7 @@ const volatile bool find_fully_idle = false;
 const volatile u64 sampling_cadence_ns = 1 * NSEC_PER_SEC;
 
 // Used for stats tracking. May be stale at any given time.
-u64 stats_primary_mask, stats_reserved_mask, stats_other_mask;
+u64 stats_primary_mask, stats_reserved_mask, stats_other_mask, stats_idle_mask;
 
 // Used for internal tracking.
 static s32 nr_reserved;
@@ -448,6 +448,7 @@ static int compact_primary_core(void *map, int *key, struct bpf_timer *timer)
 	s32 cpu = bpf_get_smp_processor_id();
 	struct pcpu_ctx *pcpu_ctx;
 
+	stat_inc(NEST_STAT(COMPACTED));
 	/*
 	 * If we made it to this callback, it means that the timer callback was
 	 * never cancelled, and so the core needs to be demoted from the
@@ -478,9 +479,11 @@ static int stats_timerfn(void *map, int *key, struct bpf_timer *timer)
 {
 	s32 cpu;
 	struct bpf_cpumask *primary, *reserve;
+	const struct cpumask *idle;
 	stats_primary_mask = 0;
 	stats_reserved_mask = 0;
 	stats_other_mask = 0;
+	stats_idle_mask = 0;
 	long err;
 
 	bpf_rcu_read_lock();
@@ -492,6 +495,7 @@ static int stats_timerfn(void *map, int *key, struct bpf_timer *timer)
 		return 0;
 	}
 
+	idle = scx_bpf_get_idle_cpumask();
 	bpf_for(cpu, 0, nr_cpus) {
 		if (bpf_cpumask_test_cpu(cpu, cast_mask(primary)))
 			stats_primary_mask |= (1ULL << cpu);
@@ -499,8 +503,12 @@ static int stats_timerfn(void *map, int *key, struct bpf_timer *timer)
 			stats_reserved_mask |= (1ULL << cpu);
 		else
 			stats_other_mask |= (1ULL << cpu);
+
+		if (bpf_cpumask_test_cpu(cpu, idle))
+			stats_idle_mask |= (1ULL << cpu);
 	}
 	bpf_rcu_read_unlock();
+	scx_bpf_put_idle_cpumask(idle);
 
 	err = bpf_timer_start(timer, sampling_cadence_ns - 5000, 0);
 	if (err)
diff --git a/tools/sched_ext/scx_nest.c b/tools/sched_ext/scx_nest.c
index e4fe24d5b..18579ea0b 100644
--- a/tools/sched_ext/scx_nest.c
+++ b/tools/sched_ext/scx_nest.c
@@ -111,26 +111,30 @@ static void print_active_nests(const struct scx_nest *skel)
 	u64 primary = skel->bss->stats_primary_mask;
 	u64 reserved = skel->bss->stats_reserved_mask;
 	u64 other = skel->bss->stats_other_mask;
+	u64 idle = skel->bss->stats_idle_mask;
 	u32 nr_cpus = skel->rodata->nr_cpus, cpu;
 	int idx;
+	char cpus[nr_cpus + 1];
 
+	memset(cpus, 0, nr_cpus + 1);
 	print_underline("Masks");
-	for (idx = 0; idx < 3; idx++) {
+	for (idx = 0; idx < 4; idx++) {
 		const char *mask_str;
 		u64 mask, total = 0;
-		char cpus[nr_cpus + 1];
 
 		memset(cpus, '-', nr_cpus);
-		cpus[nr_cpus + 1] = '\0';
 		if (idx == 0) {
 			mask_str = "PRIMARY";
 			mask = primary;
 		} else if (idx == 1) {
 			mask_str = "RESERVED";
 			mask = reserved;
-		} else {
+		} else if (idx == 2) {
 			mask_str = "OTHER";
 			mask = other;
+		} else {
+			mask_str = "IDLE";
+			mask = idle;
 		}
 		for (cpu = 0; cpu < nr_cpus; cpu++) {
 			if (mask & (1ULL << cpu)) {
diff --git a/tools/sched_ext/scx_nest_stats_table.h b/tools/sched_ext/scx_nest_stats_table.h
index 9219423e9..dbde459a2 100644
--- a/tools/sched_ext/scx_nest_stats_table.h
+++ b/tools/sched_ext/scx_nest_stats_table.h
@@ -12,6 +12,7 @@ NEST_ST(DEMOTED_TO_RESERVED, STAT_GRP_NEST, "A core was demoted into the reserve
 NEST_ST(RESERVED_AT_CAPACITY, STAT_GRP_NEST, "Reserved nest was at capacity")
 NEST_ST(SCHEDULED_COMPACTION, STAT_GRP_NEST, "Scheduled a primary core to be compacted")
 NEST_ST(CANCELLED_COMPACTION, STAT_GRP_NEST, "Cancelled a primary core from being compacted at task wakeup time")
+NEST_ST(COMPACTED, STAT_GRP_NEST, "A core was compacted")
 
 NEST_ST(CONSUMED, STAT_GRP_CONSUME, "A task was consumed from the global DSQ")
 NEST_ST(NOT_CONSUMED, STAT_GRP_CONSUME, "There was no task in the global DSQ")
-- 
2.43.0.rc2

