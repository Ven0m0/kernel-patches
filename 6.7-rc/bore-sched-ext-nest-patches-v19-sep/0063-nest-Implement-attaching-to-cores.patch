From 2c919808c1095103d483bc94b699a9b162252a7a Mon Sep 17 00:00:00 2001
From: David Vernet <void@manifault.com>
Date: Fri, 1 Dec 2023 12:30:52 -0600
Subject: [PATCH 63/80] nest: Implement attaching to cores

Signed-off-by: David Vernet <void@manifault.com>
---
 tools/sched_ext/scx_nest.bpf.c         | 44 ++++++++++++++++++++++++--
 tools/sched_ext/scx_nest_stats_table.h |  1 +
 2 files changed, 42 insertions(+), 3 deletions(-)

diff --git a/tools/sched_ext/scx_nest.bpf.c b/tools/sched_ext/scx_nest.bpf.c
index f90925ad4..991ccf562 100644
--- a/tools/sched_ext/scx_nest.bpf.c
+++ b/tools/sched_ext/scx_nest.bpf.c
@@ -76,6 +76,20 @@ struct task_ctx {
 	 */
 	u32 prev_misses;
 
+	/*
+	 * A core that the task is "attached" to, meaning the last core that it
+	 * executed on at least twice in a row, and the core that it first
+	 * tries to migrate to on wakeup. The task only migrates to the
+	 * attached core if it is idle and in the primary nest.
+	 */
+	s32 attached_core;
+
+	/*
+	 * The last core that the task executed on. This is used to determine
+	 * if the task should attach to the core that it will execute on next.
+	 */
+	s32 prev_cpu;
+
 	/* Dispatch directly to local_dsq */
 	bool force_local;
 };
@@ -173,6 +187,13 @@ try_make_core_reserved(s32 cpu, struct bpf_cpumask * reserved, bool promotion)
 	}
 }
 
+static void update_attached(struct task_ctx *tctx, s32 prev_cpu, s32 new_cpu)
+{
+	if (tctx->prev_cpu == new_cpu)
+		tctx->attached_core = new_cpu;
+	tctx->prev_cpu = prev_cpu;
+}
+
 s32 BPF_STRUCT_OPS(nest_select_cpu, struct task_struct *p, s32 prev_cpu,
 		   u64 wake_flags)
 {
@@ -199,11 +220,23 @@ s32 BPF_STRUCT_OPS(nest_select_cpu, struct task_struct *p, s32 prev_cpu,
 	tctx->force_local = true;
 
 	bpf_cpumask_and(p_mask, p->cpus_ptr, cast_mask(primary));
+
+	/* First try to wake the task on its attached core. */
+	if (bpf_cpumask_test_cpu(tctx->attached_core, cast_mask(p_mask)) &&
+	    scx_bpf_test_and_clear_cpu_idle(tctx->attached_core)) {
+		cpu = tctx->attached_core;
+		tctx->prev_misses = 0;
+		stat_inc(NEST_STAT(WAKEUP_ATTACHED));
+		goto migrate_primary;
+	}
+
 	/*
-	 * First try to stay on current core if it's in the primary set, and
-	 * there's no hypertwin.
+	 * Try to stay on the previous core if it's in the primary set, and
+	 * there's no hypertwin. If the previous core is the core the task is
+	 * attached to, don't bother as we already just tried that above.
 	 */
-	if (bpf_cpumask_test_cpu(prev_cpu, cast_mask(p_mask)) &&
+	if (prev_cpu != tctx->attached_core &&
+	    bpf_cpumask_test_cpu(prev_cpu, cast_mask(p_mask)) &&
 	    scx_bpf_test_and_clear_cpu_idle(prev_cpu)) {
 		cpu = prev_cpu;
 		tctx->prev_misses = 0;
@@ -291,6 +324,7 @@ s32 BPF_STRUCT_OPS(nest_select_cpu, struct task_struct *p, s32 prev_cpu,
 
 	bpf_rcu_read_unlock();
 	tctx->force_local = false;
+	tctx->prev_cpu = prev_cpu;
 	return prev_cpu;
 
 promote_to_primary:
@@ -324,6 +358,7 @@ s32 BPF_STRUCT_OPS(nest_select_cpu, struct task_struct *p, s32 prev_cpu,
 		bpf_cpumask_clear_cpu(cpu, reserve);
 	}
 	bpf_rcu_read_unlock();
+	update_attached(tctx, prev_cpu, cpu);
 	return cpu;
 }
 
@@ -433,6 +468,9 @@ s32 BPF_STRUCT_OPS(nest_prep_enable, struct task_struct *p,
 	if (cpumask)
 		bpf_cpumask_release(cpumask);
 
+	tctx->attached_core = -1;
+	tctx->prev_cpu = -1;
+
 	return 0;
 }
 
diff --git a/tools/sched_ext/scx_nest_stats_table.h b/tools/sched_ext/scx_nest_stats_table.h
index dbde459a2..b6ef2e4d3 100644
--- a/tools/sched_ext/scx_nest_stats_table.h
+++ b/tools/sched_ext/scx_nest_stats_table.h
@@ -1,3 +1,4 @@
+NEST_ST(WAKEUP_ATTACHED, STAT_GRP_WAKEUP, "Attached CPU was idle, and in primary nest")
 NEST_ST(WAKEUP_PREV_PRIMARY, STAT_GRP_WAKEUP, "Previous CPU was idle, and in primary nest")
 NEST_ST(WAKEUP_FULLY_IDLE_PRIMARY, STAT_GRP_WAKEUP, "Woken up to fully idle primary nest core")
 NEST_ST(WAKEUP_ANY_IDLE_PRIMARY, STAT_GRP_WAKEUP, "Woken up to idle logical primary nest core")
-- 
2.43.0.232.ge79552d197

