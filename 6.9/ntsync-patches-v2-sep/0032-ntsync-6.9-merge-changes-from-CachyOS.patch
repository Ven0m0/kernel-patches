From 1f97b23ba4a5b1bdd382ecf506caaa0f39bb2fa0 Mon Sep 17 00:00:00 2001
From: Piotr Gorski <lucjan.lucjanov@gmail.com>
Date: Mon, 13 May 2024 13:48:29 +0200
Subject: [PATCH 32/32] ntsync-6.9: merge changes from CachyOS

Signed-off-by: Piotr Gorski <lucjan.lucjanov@gmail.com>
---
 Documentation/userspace-api/index.rst         |  2 +-
 drivers/misc/Kconfig                          |  2 ++
 drivers/misc/ntsync.c                         | 34 +++++++++++++++----
 include/uapi/linux/ntsync.h                   |  4 +--
 .../testing/selftests/drivers/ntsync/ntsync.c |  2 +-
 5 files changed, 33 insertions(+), 11 deletions(-)

diff --git a/Documentation/userspace-api/index.rst b/Documentation/userspace-api/index.rst
index cf6331b1d..d5745a500 100644
--- a/Documentation/userspace-api/index.rst
+++ b/Documentation/userspace-api/index.rst
@@ -49,7 +49,6 @@ Devices and I/O
    dcdbas
    vduse
    isapnp
-   ntsync
 
 Everything else
 ===============
@@ -63,6 +62,7 @@ Everything else
    vduse
    futex2
    perf_ring_buffer
+   ntsync
 
 .. only::  subproject and html
 
diff --git a/drivers/misc/Kconfig b/drivers/misc/Kconfig
index bdd8a71bd..801ed229e 100644
--- a/drivers/misc/Kconfig
+++ b/drivers/misc/Kconfig
@@ -504,6 +504,8 @@ config OPEN_DICE
 	  measured boot flow. Userspace can use CDIs for remote attestation
 	  and sealing.
 
+	  If unsure, say N.
+
 config NTSYNC
 	tristate "NT synchronization primitive emulation"
 	help
diff --git a/drivers/misc/ntsync.c b/drivers/misc/ntsync.c
index 496704268..19fd70ac3 100644
--- a/drivers/misc/ntsync.c
+++ b/drivers/misc/ntsync.c
@@ -2,7 +2,7 @@
 /*
  * ntsync.c - Kernel driver for NT synchronization primitives
  *
- * Copyright (C) 2024 Elizabeth Figura
+ * Copyright (C) 2024 Elizabeth Figura <zfigura@codeweavers.com>
  */
 
 #include <linux/anon_inodes.h>
@@ -28,6 +28,19 @@ enum ntsync_type {
 	NTSYNC_TYPE_EVENT,
 };
 
+/*
+ * Individual synchronization primitives are represented by
+ * struct ntsync_obj, and each primitive is backed by a file.
+ *
+ * The whole namespace is represented by a struct ntsync_device also
+ * backed by a file.
+ *
+ * Both rely on struct file for reference counting. Individual
+ * ntsync_obj objects take a reference to the device when created.
+ * Wait operations take a reference to each object being waited on for
+ * the duration of the wait.
+ */
+
 struct ntsync_obj {
 	spinlock_t lock;
 
@@ -95,7 +108,7 @@ struct ntsync_q {
 	__u32 owner;
 
 	/*
-	 * Protected via atomic_cmpxchg(). Only the thread that wins the
+	 * Protected via atomic_try_cmpxchg(). Only the thread that wins the
 	 * compare-and-swap may actually change object states and wake this
 	 * task.
 	 */
@@ -153,6 +166,7 @@ static void try_wake_all(struct ntsync_device *dev, struct ntsync_q *q,
 {
 	__u32 count = q->count;
 	bool can_wake = true;
+	int signaled = -1;
 	__u32 i;
 
 	lockdep_assert_held(&dev->wait_all_lock);
@@ -171,7 +185,7 @@ static void try_wake_all(struct ntsync_device *dev, struct ntsync_q *q,
 		}
 	}
 
-	if (can_wake && atomic_cmpxchg(&q->signaled, -1, 0) == -1) {
+	if (can_wake && atomic_try_cmpxchg(&q->signaled, &signaled, 0)) {
 		for (i = 0; i < count; i++) {
 			struct ntsync_obj *obj = q->entries[i].obj;
 
@@ -220,11 +234,12 @@ static void try_wake_any_sem(struct ntsync_obj *sem)
 
 	list_for_each_entry(entry, &sem->any_waiters, node) {
 		struct ntsync_q *q = entry->q;
+		int signaled = -1;
 
 		if (!sem->u.sem.count)
 			break;
 
-		if (atomic_cmpxchg(&q->signaled, -1, entry->index) == -1) {
+		if (atomic_try_cmpxchg(&q->signaled, &signaled, entry->index)) {
 			sem->u.sem.count--;
 			wake_up_process(q->task);
 		}
@@ -239,13 +254,14 @@ static void try_wake_any_mutex(struct ntsync_obj *mutex)
 
 	list_for_each_entry(entry, &mutex->any_waiters, node) {
 		struct ntsync_q *q = entry->q;
+		int signaled = -1;
 
 		if (mutex->u.mutex.count == UINT_MAX)
 			break;
 		if (mutex->u.mutex.owner && mutex->u.mutex.owner != q->owner)
 			continue;
 
-		if (atomic_cmpxchg(&q->signaled, -1, entry->index) == -1) {
+		if (atomic_try_cmpxchg(&q->signaled, &signaled, entry->index)) {
 			if (mutex->u.mutex.ownerdead)
 				q->ownerdead = true;
 			mutex->u.mutex.ownerdead = false;
@@ -264,11 +280,12 @@ static void try_wake_any_event(struct ntsync_obj *event)
 
 	list_for_each_entry(entry, &event->any_waiters, node) {
 		struct ntsync_q *q = entry->q;
+		int signaled = -1;
 
 		if (!event->u.event.signaled)
 			break;
 
-		if (atomic_cmpxchg(&q->signaled, -1, entry->index) == -1) {
+		if (atomic_try_cmpxchg(&q->signaled, &signaled, entry->index)) {
 			if (!event->u.event.manual)
 				event->u.event.signaled = false;
 			wake_up_process(q->task);
@@ -743,6 +760,9 @@ static struct ntsync_obj *get_obj(struct ntsync_device *dev, int fd)
 	struct file *file = fget(fd);
 	struct ntsync_obj *obj;
 
+	if (!file)
+		return NULL;
+
 	if (file->f_op != &ntsync_obj_fops) {
 		fput(file);
 		return NULL;
@@ -1141,6 +1161,6 @@ static struct miscdevice ntsync_misc = {
 
 module_misc_device(ntsync_misc);
 
-MODULE_AUTHOR("Elizabeth Figura");
+MODULE_AUTHOR("Elizabeth Figura <zfigura@codeweavers.com>");
 MODULE_DESCRIPTION("Kernel driver for NT synchronization primitives");
 MODULE_LICENSE("GPL");
diff --git a/include/uapi/linux/ntsync.h b/include/uapi/linux/ntsync.h
index 074f26423..f21dbac42 100644
--- a/include/uapi/linux/ntsync.h
+++ b/include/uapi/linux/ntsync.h
@@ -2,7 +2,7 @@
 /*
  * Kernel support for NT synchronization primitive emulation
  *
- * Copyright (C) 2021-2022 Elizabeth Figura
+ * Copyright (C) 2021-2022 Elizabeth Figura <zfigura@codeweavers.com>
  */
 
 #ifndef __LINUX_NTSYNC_H
@@ -36,8 +36,8 @@ struct ntsync_wait_args {
 	__u32 count;
 	__u32 owner;
 	__u32 index;
-	__u32 alert;
 	__u32 flags;
+	__u32 alert;
 	__u32 pad;
 };
 
diff --git a/tools/testing/selftests/drivers/ntsync/ntsync.c b/tools/testing/selftests/drivers/ntsync/ntsync.c
index aba513c9a..5fa2c9a07 100644
--- a/tools/testing/selftests/drivers/ntsync/ntsync.c
+++ b/tools/testing/selftests/drivers/ntsync/ntsync.c
@@ -2,7 +2,7 @@
 /*
  * Various unit tests for the "ntsync" synchronization primitive driver.
  *
- * Copyright (C) 2021-2022 Elizabeth Figura
+ * Copyright (C) 2021-2022 Elizabeth Figura <zfigura@codeweavers.com>
  */
 
 #define _GNU_SOURCE
-- 
2.44.0.325.g11c821f2f2

