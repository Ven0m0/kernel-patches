From 33c9e842b047bf911d1cc2fb17566d96d84b497d Mon Sep 17 00:00:00 2001
From: Oleksandr Natalenko <oleksandr@natalenko.name>
Date: Thu, 13 Jun 2024 16:30:35 +0200
Subject: [PATCH 32/33] amd-pstate-6.9: update core performance boost patchset
 to v11

Signed-off-by: Oleksandr Natalenko <oleksandr@natalenko.name>
---
 Documentation/admin-guide/pm/amd-pstate.rst |   8 +-
 drivers/cpufreq/amd-pstate.c                | 104 ++++++++------------
 drivers/cpufreq/cpufreq.c                   |  23 +++--
 include/linux/cpufreq.h                     |   2 +
 4 files changed, 64 insertions(+), 73 deletions(-)

diff --git a/Documentation/admin-guide/pm/amd-pstate.rst b/Documentation/admin-guide/pm/amd-pstate.rst
index 83d536f3f..4ee7eb210 100644
--- a/Documentation/admin-guide/pm/amd-pstate.rst
+++ b/Documentation/admin-guide/pm/amd-pstate.rst
@@ -281,8 +281,8 @@ integer values defined between 0 to 255 when EPP feature is enabled by platform
 firmware, if EPP feature is disabled, driver will ignore the written value
 This attribute is read-write.
 
-``amd_pstate_boost``
-The `amd_pstate_boost` sysfs attribute provides control over the CPU core
+``boost``
+The `boost` sysfs attribute provides control over the CPU core
 performance boost, allowing users to manage the maximum frequency limitation
 of the CPU. This attribute can be used to enable or disable the boost feature
 on individual CPUs.
@@ -293,9 +293,9 @@ On the other hand, disabling the boost feature restricts the CPU to operate at t
 base frequency, which may be desirable in certain scenarios to prioritize power
 efficiency or manage temperature.
 
-To manipulate the `amd_pstate_boost` attribute, users can write a value of `0` to disable the
+To manipulate the `boost` attribute, users can write a value of `0` to disable the
 boost or `1` to enable it, for the respective CPU using the sysfs path
-`/sys/devices/system/cpu/cpuX/cpufreq/amd_pstate_boost`, where `X` represents the CPU number.
+`/sys/devices/system/cpu/cpuX/cpufreq/boost`, where `X` represents the CPU number.
 
 It is important to note that modifying the global variable
 `amd_pstate_global_params.cpb_boost` will override the individual CPU settings.
diff --git a/drivers/cpufreq/amd-pstate.c b/drivers/cpufreq/amd-pstate.c
index 9cd95bd5a..e43923d97 100644
--- a/drivers/cpufreq/amd-pstate.c
+++ b/drivers/cpufreq/amd-pstate.c
@@ -105,6 +105,7 @@ static bool amd_pstate_prefcore = true;
 static struct quirk_entry *quirks;
 struct amd_pstate_global_params amd_pstate_global_params;
 EXPORT_SYMBOL_GPL(amd_pstate_global_params);
+static int amd_pstate_cpu_boost(int cpu, bool state);
 
 /*
  * AMD Energy Preference Performance (EPP)
@@ -732,48 +733,46 @@ static int amd_pstate_set_boost(struct cpufreq_policy *policy, int state)
 		pr_err("Boost mode is not supported by this processor or SBIOS\n");
 		return -ENOTSUPP;
 	}
+	mutex_lock(&amd_pstate_driver_lock);
+	ret = amd_pstate_cpu_boost(policy->cpu, state);
+	mutex_unlock(&amd_pstate_driver_lock);
 
-	if (state)
-		policy->cpuinfo.max_freq = cpudata->max_freq;
-	else
-		policy->cpuinfo.max_freq = cpudata->nominal_freq * 1000;
-
-	policy->max = policy->cpuinfo.max_freq;
-
-	ret = freq_qos_update_request(&cpudata->req[1],
-				      policy->cpuinfo.max_freq);
-	if (ret < 0)
-		return ret;
-
-	return 0;
+	return ret < 0 ? ret : 0;
 }
 
-static int amd_pstate_boost_init(struct amd_cpudata *cpudata)
+static int amd_pstate_boost_set(struct amd_cpudata *cpudata)
 {
 	u64 boost_val;
-	int ret;
+	int ret = -1;
 
 	if (!cpu_feature_enabled(X86_FEATURE_CPB)) {
-		cpudata->boost_supported = false;
-		current_pstate_driver->boost_enabled = false;
 		pr_debug_once("Boost CPB capabilities not present in the processor\n");
-		return -ENOTSUPP;
+		ret = -EOPNOTSUPP;
+		goto exit_err;
 	}
 
 	ret = rdmsrl_on_cpu(cpudata->cpu, MSR_K7_HWCR, &boost_val);
 	if (ret) {
 		pr_err_once("failed to read initial CPU boost state!\n");
-		return ret;
+		ret = -EIO;
+		goto exit_err;
 	}
 
 	amd_pstate_global_params.cpb_supported = !(boost_val & MSR_K7_HWCR_CPB_DIS);
 	if (amd_pstate_global_params.cpb_supported) {
 		current_pstate_driver->boost_enabled = true;
-		cpudata->boost_state = true;
+		WRITE_ONCE(cpudata->boost_supported, true);
+		WRITE_ONCE(cpudata->boost_state, true);
 	}
 
 	amd_pstate_global_params.cpb_boost = amd_pstate_global_params.cpb_supported;
+	return 0;
 
+exit_err:
+	WRITE_ONCE(cpudata->boost_supported, false);
+	WRITE_ONCE(cpudata->boost_state, false);
+	current_pstate_driver->boost_enabled = false;
+	amd_pstate_global_params.cpb_boost = false;
 	return ret;
 }
 
@@ -1019,11 +1018,6 @@ static int amd_pstate_cpu_init(struct cpufreq_policy *policy)
 
 	amd_pstate_init_prefcore(cpudata);
 
-	/* initialize cpu cores boot state */
-	ret = amd_pstate_boost_init(cpudata);
-	if (ret)
-		goto free_cpudata1;
-
 	ret = amd_pstate_init_perf(cpudata);
 	if (ret)
 		goto free_cpudata1;
@@ -1431,11 +1425,12 @@ static int amd_pstate_cpu_boost_update(struct cpufreq_policy *policy, bool on)
 	policy->max = policy->cpuinfo.max_freq;
 
 	if (cppc_state == AMD_PSTATE_PASSIVE) {
-		ret = freq_qos_update_request(&cpudata->req[1],
-				      policy->cpuinfo.max_freq);
+		ret = freq_qos_update_request(&cpudata->req[1], policy->cpuinfo.max_freq);
+		if (ret < 0)
+			pr_debug("Failed to update freq constraint: CPU%d\n", cpudata->cpu);
 	}
 
-	return ret;
+	return ret < 0 ? ret : 0;
 }
 
 static int amd_pstate_cpu_boost(int cpu, bool state)
@@ -1452,37 +1447,14 @@ static int amd_pstate_cpu_boost(int cpu, bool state)
 
 	ret = amd_pstate_cpu_boost_update(policy, state);
 	refresh_frequency_limits(policy);
-	cpudata->boost_state = !!state;
+	WRITE_ONCE(cpudata->boost_state, state);
+	policy->boost_enabled = state;
 
 err_exit:
 	cpufreq_cpu_put(policy);
 	return ret < 0 ? ret : 0;
 }
 
-static ssize_t show_amd_pstate_boost(struct cpufreq_policy *policy, char *buf)
-{
-	struct amd_cpudata *cpudata = policy->driver_data;
-	bool boost_val;
-
-	boost_val = READ_ONCE(cpudata->boost_state);
-
-	return sysfs_emit(buf, "%u\n", boost_val);
-}
-
-static ssize_t store_amd_pstate_boost(
-		struct cpufreq_policy *policy, const char *buf, size_t count)
-{
-	bool boost_val;
-	int ret;
-
-	if (kstrtobool(buf, &boost_val))
-		return -EINVAL;
-
-	ret = amd_pstate_cpu_boost(policy->cpu, boost_val);
-
-	return ret < 0 ? ret : count;
-}
-
 static ssize_t cpb_boost_show(struct device *dev,
 			   struct device_attribute *attr, char *buf)
 {
@@ -1528,7 +1500,6 @@ cpufreq_freq_attr_ro(amd_pstate_prefcore_ranking);
 cpufreq_freq_attr_ro(amd_pstate_hw_prefcore);
 cpufreq_freq_attr_rw(energy_performance_preference);
 cpufreq_freq_attr_ro(energy_performance_available_preferences);
-cpufreq_freq_attr_rw(amd_pstate_boost);
 static DEVICE_ATTR_RW(status);
 static DEVICE_ATTR_RO(prefcore);
 static DEVICE_ATTR_RW(cpb_boost);
@@ -1539,7 +1510,6 @@ static struct freq_attr *amd_pstate_attr[] = {
 	&amd_pstate_highest_perf,
 	&amd_pstate_prefcore_ranking,
 	&amd_pstate_hw_prefcore,
-	&amd_pstate_boost,
 	NULL,
 };
 
@@ -1551,7 +1521,6 @@ static struct freq_attr *amd_pstate_epp_attr[] = {
 	&amd_pstate_hw_prefcore,
 	&energy_performance_preference,
 	&energy_performance_available_preferences,
-	&amd_pstate_boost,
 	NULL,
 };
 
@@ -1587,6 +1556,21 @@ static bool amd_pstate_acpi_pm_profile_undefined(void)
 	return false;
 }
 
+static int amd_pstate_init_boost(struct cpufreq_policy *policy)
+{
+	struct amd_cpudata *cpudata = policy->driver_data;
+	int ret;
+
+	/* initialize cpu cores boot state */
+	ret = amd_pstate_boost_set(cpudata);
+	if (ret)
+		return ret;
+
+	policy->boost_enabled = READ_ONCE(cpudata->boost_state);
+
+	return 0;
+}
+
 static int amd_pstate_epp_cpu_init(struct cpufreq_policy *policy)
 {
 	int min_freq, max_freq, ret;
@@ -1612,11 +1596,6 @@ static int amd_pstate_epp_cpu_init(struct cpufreq_policy *policy)
 
 	amd_pstate_init_prefcore(cpudata);
 
-	/* initialize cpu cores boot state */
-	ret = amd_pstate_boost_init(cpudata);
-	if (ret)
-		goto free_cpudata1;
-
 	ret = amd_pstate_init_perf(cpudata);
 	if (ret)
 		goto free_cpudata1;
@@ -1899,6 +1878,7 @@ static struct cpufreq_driver amd_pstate_driver = {
 	.exit		= amd_pstate_cpu_exit,
 	.suspend	= amd_pstate_cpu_suspend,
 	.resume		= amd_pstate_cpu_resume,
+	.init_boost	= amd_pstate_init_boost,
 	.set_boost	= amd_pstate_set_boost,
 	.update_limits	= amd_pstate_update_limits,
 	.name		= "amd-pstate",
@@ -1916,6 +1896,8 @@ static struct cpufreq_driver amd_pstate_epp_driver = {
 	.suspend	= amd_pstate_epp_suspend,
 	.resume		= amd_pstate_epp_resume,
 	.update_limits	= amd_pstate_update_limits,
+	.init_boost	= amd_pstate_init_boost,
+	.set_boost	= amd_pstate_set_boost,
 	.name		= "amd-pstate-epp",
 	.attr		= amd_pstate_epp_attr,
 };
diff --git a/drivers/cpufreq/cpufreq.c b/drivers/cpufreq/cpufreq.c
index fd9c3ed21..b5cc51ecd 100644
--- a/drivers/cpufreq/cpufreq.c
+++ b/drivers/cpufreq/cpufreq.c
@@ -614,10 +614,9 @@ static ssize_t show_boost(struct kobject *kobj,
 static ssize_t store_boost(struct kobject *kobj, struct kobj_attribute *attr,
 			   const char *buf, size_t count)
 {
-	int ret, enable;
+	bool enable;
 
-	ret = sscanf(buf, "%d", &enable);
-	if (ret != 1 || enable < 0 || enable > 1)
+	if (kstrtobool(buf, &enable))
 		return -EINVAL;
 
 	if (cpufreq_boost_trigger_state(enable)) {
@@ -641,10 +640,10 @@ static ssize_t show_local_boost(struct cpufreq_policy *policy, char *buf)
 static ssize_t store_local_boost(struct cpufreq_policy *policy,
 				 const char *buf, size_t count)
 {
-	int ret, enable;
+	int ret;
+	bool enable;
 
-	ret = kstrtoint(buf, 10, &enable);
-	if (ret || enable < 0 || enable > 1)
+	if (kstrtobool(buf, &enable))
 		return -EINVAL;
 
 	if (!cpufreq_driver->boost_enabled)
@@ -1430,8 +1429,16 @@ static int cpufreq_online(unsigned int cpu)
 			goto out_free_policy;
 		}
 
-		/* Let the per-policy boost flag mirror the cpufreq_driver boost during init */
-		policy->boost_enabled = cpufreq_boost_enabled() && policy_has_boost_freq(policy);
+		/* init boost state to prepare set_boost callback for each CPU */
+		if (cpufreq_driver->init_boost) {
+			ret = cpufreq_driver->init_boost(policy);
+			if (ret)
+				pr_debug("%s: %d: initialization boost failed\n", __func__,
+					__LINE__);
+		} else {
+			/* Let the per-policy boost flag mirror the cpufreq_driver boost during init */
+			policy->boost_enabled = cpufreq_boost_enabled() && policy_has_boost_freq(policy);
+		}
 
 		/*
 		 * The initialization has succeeded and the policy is online.
diff --git a/include/linux/cpufreq.h b/include/linux/cpufreq.h
index 9956afb9a..3eb5ce712 100644
--- a/include/linux/cpufreq.h
+++ b/include/linux/cpufreq.h
@@ -399,6 +399,8 @@ struct cpufreq_driver {
 	bool		boost_enabled;
 	int		(*set_boost)(struct cpufreq_policy *policy, int state);
 
+	/* initialize boost state to be consistent before calling set_boost */
+	int		(*init_boost)(struct cpufreq_policy *policy);
 	/*
 	 * Set by drivers that want to register with the energy model after the
 	 * policy is properly initialized, but before the governor is started.
-- 
2.45.1.145.g83f1add914

