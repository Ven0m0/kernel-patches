From 8203ab0be89bc1cf9c255286ce0fa55bd8fd4e19 Mon Sep 17 00:00:00 2001
From: Andrea Righi <arighi@nvidia.com>
Date: Wed, 20 Aug 2025 15:35:01 +0200
Subject: [PATCH 3/3] bpf: prevent kfuncs from being cloned when building with
 gcc -O3

Some distributions (e.g., CachyOS) allow building the kernel with -O3,
but this can break kfuncs, making their symbols unavailable.

In fact, with gcc -O3, some kfuncs may be optimized away despite being
annotated with __used, __retain, and noinline. This happens because gcc
can still clone the function during IPA optimizations, e.g., by
duplicating or inlining it into callers and dropping the standalone
symbol entirely. This breaks BTF ID resolution since resolve_btfids
relies on the presence of a global symbol for each kfunc.

Fix this by adding __noclone to __bpf_kfunc. This ensures that kfuncs
are never cloned or eliminated by the compiler, and thus remain as
distinct, globally visible symbols in vmlinux regardless of optimization
level or LTO settings.

Signed-off-by: Andrea Righi <arighi@nvidia.com>
---
 include/linux/btf.h | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/include/linux/btf.h b/include/linux/btf.h
index 9eda6b113..f06976ffb 100644
--- a/include/linux/btf.h
+++ b/include/linux/btf.h
@@ -86,7 +86,7 @@
  * as to avoid issues such as the compiler inlining or eliding either a static
  * kfunc, or a global kfunc in an LTO build.
  */
-#define __bpf_kfunc __used __retain noinline
+#define __bpf_kfunc __used __retain __noclone noinline
 
 #define __bpf_kfunc_start_defs()					       \
 	__diag_push();							       \
-- 
2.50.1

