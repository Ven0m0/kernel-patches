From a4912bf896900ad172038f342508e319c2a5cda5 Mon Sep 17 00:00:00 2001
From: David Vernet <void@manifault.com>
Date: Fri, 5 Jan 2024 20:36:26 -0600
Subject: [PATCH 091/132] scx: Implement scx selftests framework

We want to make it as easy as possible both to run tests, and to
implement them. This means we ideally want a single test runner binary
that can run the testcases, while also making it trivial to add a
testcase without worrying about having to update the runner itself.

To accomplish this, this patch adds a new declarative mechanism for
defining scx tests by implementing a struct scx_test object. Tests can
simply define such a struct, and then register it with the testrunner
using a REGISTER_SCX_TEST macro. The build system will automatically
compile the testcase and add machinery to have it be auto-registered
into the runner binary. The runner binary then outputs test results in
ktap [0] format so it can be consumed by CI systems.

[0]: https://docs.kernel.org/dev-tools/ktap.html

This patch simply implements the framework, adds a test_example.c file
that illustrates how to add a testcase, and converts a few existing
testcases to use the framework. If the framework is acceptable, we can
convert the rest.

Signed-off-by: David Vernet <void@manifault.com>
---
 tools/testing/selftests/scx/.gitignore        |   7 +-
 tools/testing/selftests/scx/Makefile          |  40 +++-
 ...q_fail.bpf.c => ddsp_bogus_dsq_fail.bpf.c} |  12 +-
 .../selftests/scx/ddsp_bogus_dsq_fail.c       |  55 ++++++
 ..._fail.bpf.c => ddsp_vtimelocal_fail.bpf.c} |  12 +-
 .../selftests/scx/ddsp_vtimelocal_fail.c      |  54 +++++
 .../selftests/scx/dsp_fallbackdsq_fail.c      |  36 ----
 .../testing/selftests/scx/dsp_localdsq_fail.c |  36 ----
 .../selftests/scx/enq_last_no_enq_fails.c     |  50 +++--
 ...fails.bpf.c => enq_select_cpu_fails.bpf.c} |  19 +-
 .../selftests/scx/enq_select_cpu_fails.c      |  61 ++++++
 .../selftests/scx/enqueue_select_cpu_fails.c  |  36 ----
 .../testing/selftests/scx/init_enable_count.c |  46 +++--
 tools/testing/selftests/scx/minimal.c         |  64 +++---
 tools/testing/selftests/scx/runner.c          | 187 ++++++++++++++++++
 tools/testing/selftests/scx/scx_test.h        | 108 ++++++++--
 tools/testing/selftests/scx/test_example.c    |  49 +++++
 17 files changed, 666 insertions(+), 206 deletions(-)
 rename tools/testing/selftests/scx/{dsp_fallbackdsq_fail.bpf.c => ddsp_bogus_dsq_fail.bpf.c} (70%)
 create mode 100644 tools/testing/selftests/scx/ddsp_bogus_dsq_fail.c
 rename tools/testing/selftests/scx/{dsp_localdsq_fail.bpf.c => ddsp_vtimelocal_fail.bpf.c} (69%)
 create mode 100644 tools/testing/selftests/scx/ddsp_vtimelocal_fail.c
 delete mode 100644 tools/testing/selftests/scx/dsp_fallbackdsq_fail.c
 delete mode 100644 tools/testing/selftests/scx/dsp_localdsq_fail.c
 rename tools/testing/selftests/scx/{enqueue_select_cpu_fails.bpf.c => enq_select_cpu_fails.bpf.c} (63%)
 create mode 100644 tools/testing/selftests/scx/enq_select_cpu_fails.c
 delete mode 100644 tools/testing/selftests/scx/enqueue_select_cpu_fails.c
 create mode 100644 tools/testing/selftests/scx/runner.c
 create mode 100644 tools/testing/selftests/scx/test_example.c

diff --git a/tools/testing/selftests/scx/.gitignore b/tools/testing/selftests/scx/.gitignore
index 4ae433bb3..2c077082b 100644
--- a/tools/testing/selftests/scx/.gitignore
+++ b/tools/testing/selftests/scx/.gitignore
@@ -1,9 +1,10 @@
-dsp_fallbackdsq_fail
-dsp_localdsq_fail
+ddsp_bogus_dsq_fail
+ddsp_vtimelocal_fail
 enq_last_no_enq_fails
-enqueue_select_cpu_fails
+enq_select_cpu_fails
 init_enable_count
 minimal
+runner
 select_cpu_dfl
 select_cpu_dfl_nodispatch
 select_cpu_dispatch
diff --git a/tools/testing/selftests/scx/Makefile b/tools/testing/selftests/scx/Makefile
index 8a0b66236..c28f23c04 100644
--- a/tools/testing/selftests/scx/Makefile
+++ b/tools/testing/selftests/scx/Makefile
@@ -68,7 +68,7 @@ ifneq ($(LLVM),)
 CFLAGS += -Wno-unused-command-line-argument
 endif
 
-LDFLAGS = -lelf -lz -lpthread
+LDFLAGS = -lelf -lz -lpthread -lzstd
 
 IS_LITTLE_ENDIAN = $(shell $(CC) -dM -E - </dev/null |				\
 			grep 'define __BYTE_ORDER__ __ORDER_LITTLE_ENDIAN__')
@@ -148,12 +148,6 @@ $(INCLUDE_DIR)/%.bpf.skel.h: $(SCXOBJ_DIR)/%.bpf.o $(INCLUDE_DIR)/vmlinux.h $(BP
 # C schedulers #
 ################
 c-sched-targets :=			\
-	dsp_fallbackdsq_fail		\
-	dsp_localdsq_fail		\
-	enq_last_no_enq_fails		\
-	enqueue_select_cpu_fails	\
-	init_enable_count		\
-	minimal				\
 	select_cpu_dfl			\
 	select_cpu_dfl_nodispatch	\
 	select_cpu_dispatch		\
@@ -172,9 +166,39 @@ override define CLEAN
 	rm -rf $(OUTPUT_DIR)
 	rm -f *.o *.bpf.o *.bpf.skel.h *.bpf.subskel.h
 	rm -f $(TEST_GEN_PROGS)
+	rm -f runner
 endef
 
-all: $(TEST_GEN_PROGS)
+auto-test-targets :=			\
+	enq_last_no_enq_fails		\
+	enq_select_cpu_fails		\
+	ddsp_bogus_dsq_fail		\
+	ddsp_vtimelocal_fail		\
+	init_enable_count		\
+	minimal				\
+	test_example
+
+testcase-targets := $(addsuffix .o,$(addprefix $(SCXOBJ_DIR)/,$(auto-test-targets)))
+
+$(SCXOBJ_DIR)/runner.o: runner.c | $(SCXOBJ_DIR)
+	$(CC) $(CFLAGS) -c $< -o $@
+
+# Create all of the test targets object files, whose testcase objects will be
+# registered into the runner in ELF constructors.
+#
+# Note that we must do double expansion here in order to support conditionally
+# compiling BPF object files only if one is present, as the wildcard Make
+# function doesn't support using implicit rules otherwise.
+.SECONDEXPANSION:
+$(testcase-targets): $(SCXOBJ_DIR)/%.o: %.c $(SCXOBJ_DIR)/runner.o $$(if $$(wildcard $$*.bpf.c), $(INCLUDE_DIR)/%.bpf.skel.h) | $(SCXOBJ_DIR)
+	$(eval test=$(patsubst %.o,%.c,$(notdir $@)))
+	$(CC) $(CFLAGS) -c $< -o $@ $(SCXOBJ_DIR)/runner.o
+
+runner: $(SCXOBJ_DIR)/runner.o $(BPFOBJ) $(testcase-targets)
+	@echo "$(testcase-targets)"
+	$(CC) $(CFLAGS) $(LDFLAGS) -o $@ $^
+
+all: runner
 
 .PHONY: all clean help
 
diff --git a/tools/testing/selftests/scx/dsp_fallbackdsq_fail.bpf.c b/tools/testing/selftests/scx/ddsp_bogus_dsq_fail.bpf.c
similarity index 70%
rename from tools/testing/selftests/scx/dsp_fallbackdsq_fail.bpf.c
rename to tools/testing/selftests/scx/ddsp_bogus_dsq_fail.bpf.c
index d15ad9b0b..78bd8feac 100644
--- a/tools/testing/selftests/scx/dsp_fallbackdsq_fail.bpf.c
+++ b/tools/testing/selftests/scx/ddsp_bogus_dsq_fail.bpf.c
@@ -8,7 +8,7 @@
 
 char _license[] SEC("license") = "GPL";
 
-s32 BPF_STRUCT_OPS(dsp_fallbackdsq_fail_select_cpu, struct task_struct *p,
+s32 BPF_STRUCT_OPS(ddsp_bogus_dsq_fail_select_cpu, struct task_struct *p,
 		   s32 prev_cpu, u64 wake_flags)
 {
 	s32 cpu = scx_bpf_pick_idle_cpu(p->cpus_ptr, 0);
@@ -26,7 +26,7 @@ s32 BPF_STRUCT_OPS(dsp_fallbackdsq_fail_select_cpu, struct task_struct *p,
 	return prev_cpu;
 }
 
-s32 BPF_STRUCT_OPS(dsp_fallbackdsq_fail_init)
+s32 BPF_STRUCT_OPS(ddsp_bogus_dsq_fail_init)
 {
 	scx_bpf_switch_all();
 
@@ -34,9 +34,9 @@ s32 BPF_STRUCT_OPS(dsp_fallbackdsq_fail_init)
 }
 
 SEC(".struct_ops.link")
-struct sched_ext_ops dsp_fallbackdsq_fail_ops = {
-	.select_cpu		= dsp_fallbackdsq_fail_select_cpu,
-	.init			= dsp_fallbackdsq_fail_init,
-	.name			= "dsp_fallbackdsq_fail",
+struct sched_ext_ops ddsp_bogus_dsq_fail_ops = {
+	.select_cpu		= ddsp_bogus_dsq_fail_select_cpu,
+	.init			= ddsp_bogus_dsq_fail_init,
+	.name			= "ddsp_bogus_dsq_fail",
 	.timeout_ms		= 1000U,
 };
diff --git a/tools/testing/selftests/scx/ddsp_bogus_dsq_fail.c b/tools/testing/selftests/scx/ddsp_bogus_dsq_fail.c
new file mode 100644
index 000000000..b12e804a0
--- /dev/null
+++ b/tools/testing/selftests/scx/ddsp_bogus_dsq_fail.c
@@ -0,0 +1,55 @@
+/* SPDX-License-Identifier: GPL-2.0 */
+/*
+ * Copyright (c) 2024 Meta Platforms, Inc. and affiliates.
+ * Copyright (c) 2024 David Vernet <dvernet@meta.com>
+ * Copyright (c) 2024 Tejun Heo <tj@kernel.org>
+ */
+#include <bpf/bpf.h>
+#include <scx/common.h>
+#include <sys/wait.h>
+#include <unistd.h>
+#include "ddsp_bogus_dsq_fail.bpf.skel.h"
+#include "scx_test.h"
+
+static enum scx_test_status setup(void **ctx)
+{
+	struct ddsp_bogus_dsq_fail *skel;
+
+	skel = ddsp_bogus_dsq_fail__open_and_load();
+	SCX_FAIL_IF(!skel, "Failed to open and load skel");
+	*ctx = skel;
+
+	return SCX_TEST_PASS;
+}
+
+static enum scx_test_status run(void *ctx)
+{
+	struct ddsp_bogus_dsq_fail *skel = ctx;
+	struct bpf_link *link;
+
+	link = bpf_map__attach_struct_ops(skel->maps.ddsp_bogus_dsq_fail_ops);
+	SCX_FAIL_IF(!link, "Failed to attach struct_ops");
+
+	sleep(1);
+	bpf_link__destroy(link);
+
+	return SCX_TEST_PASS;
+}
+
+static void cleanup(void *ctx)
+{
+	struct ddsp_bogus_dsq_fail *skel = ctx;
+
+	ddsp_bogus_dsq_fail__destroy(skel);
+}
+
+struct scx_test ddsp_bogus_dsq_fail = {
+	.name = "ddsp_bogus_dsq_fail",
+	.description = "Verify we gracefully fail, and fall back to using a "
+		       "built-in DSQ, if we do a direct dispatch to an invalid"
+		       " DSQ in ops.select_cpu()",
+	.setup = setup,
+	.run = run,
+	.cleanup = cleanup,
+};
+REGISTER_SCX_TEST(&ddsp_bogus_dsq_fail)
diff --git a/tools/testing/selftests/scx/dsp_localdsq_fail.bpf.c b/tools/testing/selftests/scx/ddsp_vtimelocal_fail.bpf.c
similarity index 69%
rename from tools/testing/selftests/scx/dsp_localdsq_fail.bpf.c
rename to tools/testing/selftests/scx/ddsp_vtimelocal_fail.bpf.c
index e27a95a87..14a40be19 100644
--- a/tools/testing/selftests/scx/dsp_localdsq_fail.bpf.c
+++ b/tools/testing/selftests/scx/ddsp_vtimelocal_fail.bpf.c
@@ -8,7 +8,7 @@
 
 char _license[] SEC("license") = "GPL";
 
-s32 BPF_STRUCT_OPS(dsp_localdsq_fail_select_cpu, struct task_struct *p,
+s32 BPF_STRUCT_OPS(ddsp_vtimelocal_fail_select_cpu, struct task_struct *p,
 		   s32 prev_cpu, u64 wake_flags)
 {
 	s32 cpu = scx_bpf_pick_idle_cpu(p->cpus_ptr, 0);
@@ -23,7 +23,7 @@ s32 BPF_STRUCT_OPS(dsp_localdsq_fail_select_cpu, struct task_struct *p,
 	return prev_cpu;
 }
 
-s32 BPF_STRUCT_OPS(dsp_localdsq_fail_init)
+s32 BPF_STRUCT_OPS(ddsp_vtimelocal_fail_init)
 {
 	scx_bpf_switch_all();
 
@@ -31,9 +31,9 @@ s32 BPF_STRUCT_OPS(dsp_localdsq_fail_init)
 }
 
 SEC(".struct_ops.link")
-struct sched_ext_ops dsp_localdsq_fail_ops = {
-	.select_cpu		= dsp_localdsq_fail_select_cpu,
-	.init			= dsp_localdsq_fail_init,
-	.name			= "dsp_localdsq_fail",
+struct sched_ext_ops ddsp_vtimelocal_fail_ops = {
+	.select_cpu		= ddsp_vtimelocal_fail_select_cpu,
+	.init			= ddsp_vtimelocal_fail_init,
+	.name			= "ddsp_vtimelocal_fail",
 	.timeout_ms		= 1000U,
 };
diff --git a/tools/testing/selftests/scx/ddsp_vtimelocal_fail.c b/tools/testing/selftests/scx/ddsp_vtimelocal_fail.c
new file mode 100644
index 000000000..03bbadfaa
--- /dev/null
+++ b/tools/testing/selftests/scx/ddsp_vtimelocal_fail.c
@@ -0,0 +1,54 @@
+/* SPDX-License-Identifier: GPL-2.0 */
+/*
+ * Copyright (c) 2024 Meta Platforms, Inc. and affiliates.
+ * Copyright (c) 2024 David Vernet <dvernet@meta.com>
+ * Copyright (c) 2024 Tejun Heo <tj@kernel.org>
+ */
+#include <bpf/bpf.h>
+#include <scx/common.h>
+#include <unistd.h>
+#include "ddsp_vtimelocal_fail.bpf.skel.h"
+#include "scx_test.h"
+
+static enum scx_test_status setup(void **ctx)
+{
+	struct ddsp_vtimelocal_fail *skel;
+
+	skel = ddsp_vtimelocal_fail__open_and_load();
+	SCX_FAIL_IF(!skel, "Failed to open and load skel");
+	*ctx = skel;
+
+	return SCX_TEST_PASS;
+}
+
+static enum scx_test_status run(void *ctx)
+{
+	struct ddsp_vtimelocal_fail *skel = ctx;
+	struct bpf_link *link;
+
+	link = bpf_map__attach_struct_ops(skel->maps.ddsp_vtimelocal_fail_ops);
+	SCX_FAIL_IF(!link, "Failed to attach struct_ops");
+
+	sleep(1);
+	bpf_link__destroy(link);
+
+	return SCX_TEST_PASS;
+}
+
+static void cleanup(void *ctx)
+{
+	struct ddsp_vtimelocal_fail *skel = ctx;
+
+	ddsp_vtimelocal_fail__destroy(skel);
+}
+
+struct scx_test ddsp_vtimelocal_fail = {
+	.name = "ddsp_vtimelocal_fail",
+	.description = "Verify we gracefully fail, and fall back to using a "
+		       "built-in DSQ, if we do a direct vtime dispatch to a "
+		       "built-in DSQ from DSQ in ops.select_cpu()",
+	.setup = setup,
+	.run = run,
+	.cleanup = cleanup,
+};
+REGISTER_SCX_TEST(&ddsp_vtimelocal_fail)
diff --git a/tools/testing/selftests/scx/dsp_fallbackdsq_fail.c b/tools/testing/selftests/scx/dsp_fallbackdsq_fail.c
deleted file mode 100644
index fd70cd89d..000000000
--- a/tools/testing/selftests/scx/dsp_fallbackdsq_fail.c
+++ /dev/null
@@ -1,36 +0,0 @@
-/* SPDX-License-Identifier: GPL-2.0 */
-/*
- * Copyright (c) 2024 Meta Platforms, Inc. and affiliates.
- * Copyright (c) 2024 David Vernet <dvernet@meta.com>
- * Copyright (c) 2024 Tejun Heo <tj@kernel.org>
- */
-#include <stdio.h>
-#include <unistd.h>
-#include <signal.h>
-#include <libgen.h>
-#include <bpf/bpf.h>
-#include <scx/common.h>
-#include <sys/wait.h>
-#include "dsp_fallbackdsq_fail.bpf.skel.h"
-#include "scx_test.h"
-
-int main(int argc, char **argv)
-{
-	struct dsp_fallbackdsq_fail *skel;
-	struct bpf_link *link;
-
-	libbpf_set_strict_mode(LIBBPF_STRICT_ALL);
-
-	skel = dsp_fallbackdsq_fail__open_and_load();
-	SCX_BUG_ON(!skel, "Failed to open and load skel");
-
-	link = bpf_map__attach_struct_ops(skel->maps.dsp_fallbackdsq_fail_ops);
-	SCX_BUG_ON(!link, "Failed to attach struct_ops");
-
-	sleep(1);
-
-	bpf_link__destroy(link);
-	dsp_fallbackdsq_fail__destroy(skel);
-
-	return 0;
-}
diff --git a/tools/testing/selftests/scx/dsp_localdsq_fail.c b/tools/testing/selftests/scx/dsp_localdsq_fail.c
deleted file mode 100644
index 4840386ba..000000000
--- a/tools/testing/selftests/scx/dsp_localdsq_fail.c
+++ /dev/null
@@ -1,36 +0,0 @@
-/* SPDX-License-Identifier: GPL-2.0 */
-/*
- * Copyright (c) 2024 Meta Platforms, Inc. and affiliates.
- * Copyright (c) 2024 David Vernet <dvernet@meta.com>
- * Copyright (c) 2024 Tejun Heo <tj@kernel.org>
- */
-#include <stdio.h>
-#include <unistd.h>
-#include <signal.h>
-#include <libgen.h>
-#include <bpf/bpf.h>
-#include <scx/common.h>
-#include <sys/wait.h>
-#include "dsp_localdsq_fail.bpf.skel.h"
-#include "scx_test.h"
-
-int main(int argc, char **argv)
-{
-	struct dsp_localdsq_fail *skel;
-	struct bpf_link *link;
-
-	libbpf_set_strict_mode(LIBBPF_STRICT_ALL);
-
-	skel = dsp_localdsq_fail__open_and_load();
-	SCX_BUG_ON(!skel, "Failed to open and load skel");
-
-	link = bpf_map__attach_struct_ops(skel->maps.dsp_localdsq_fail_ops);
-	SCX_BUG_ON(!link, "Failed to attach struct_ops");
-
-	sleep(1);
-
-	bpf_link__destroy(link);
-	dsp_localdsq_fail__destroy(skel);
-
-	return 0;
-}
diff --git a/tools/testing/selftests/scx/enq_last_no_enq_fails.c b/tools/testing/selftests/scx/enq_last_no_enq_fails.c
index 1f3d4d8ad..2a3eda5e2 100644
--- a/tools/testing/selftests/scx/enq_last_no_enq_fails.c
+++ b/tools/testing/selftests/scx/enq_last_no_enq_fails.c
@@ -4,31 +4,57 @@
  * Copyright (c) 2023 David Vernet <dvernet@meta.com>
  * Copyright (c) 2023 Tejun Heo <tj@kernel.org>
  */
-#include <stdio.h>
-#include <unistd.h>
-#include <signal.h>
-#include <libgen.h>
 #include <bpf/bpf.h>
 #include <scx/common.h>
 #include <sys/wait.h>
+#include <unistd.h>
 #include "enq_last_no_enq_fails.bpf.skel.h"
 #include "scx_test.h"
 
-int main(int argc, char **argv)
+static enum scx_test_status setup(void **ctx)
 {
 	struct enq_last_no_enq_fails *skel;
-	struct bpf_link *link;
-
-	libbpf_set_strict_mode(LIBBPF_STRICT_ALL);
 
 	skel = enq_last_no_enq_fails__open_and_load();
-	SCX_BUG_ON(!skel, "Failed to open and load skel");
+	if (!skel) {
+		SCX_ERR("Failed to open and load skel");
+		return SCX_TEST_FAIL;
+	}
+	*ctx = skel;
+
+	return SCX_TEST_PASS;
+}
+
+static enum scx_test_status run(void *ctx)
+{
+	struct enq_last_no_enq_fails *skel = ctx;
+	struct bpf_link *link;
 
 	link = bpf_map__attach_struct_ops(skel->maps.enq_last_no_enq_fails_ops);
-	SCX_BUG_ON(link, "Succeeded in attaching struct_ops");
+	if (link) {
+		SCX_ERR("Incorrectly succeeded in to attaching scheduler");
+		return SCX_TEST_FAIL;
+	}
 
 	bpf_link__destroy(link);
-	enq_last_no_enq_fails__destroy(skel);
 
-	return 0;
+	return SCX_TEST_PASS;
+}
+
+static void cleanup(void *ctx)
+{
+	struct enq_last_no_enq_fails *skel = ctx;
+
+	enq_last_no_enq_fails__destroy(skel);
 }
+
+struct scx_test enq_last_no_enq_fails = {
+	.name = "enq_last_no_enq_fails",
+	.description = "Verify we fail to load a scheduler if we specify "
+		       "the SCX_OPS_ENQ_LAST flag without defining "
+		       "ops.enqueue()",
+	.setup = setup,
+	.run = run,
+	.cleanup = cleanup,
+};
+REGISTER_SCX_TEST(&enq_last_no_enq_fails)
diff --git a/tools/testing/selftests/scx/enqueue_select_cpu_fails.bpf.c b/tools/testing/selftests/scx/enq_select_cpu_fails.bpf.c
similarity index 63%
rename from tools/testing/selftests/scx/enqueue_select_cpu_fails.bpf.c
rename to tools/testing/selftests/scx/enq_select_cpu_fails.bpf.c
index 61f04fa4c..40ea393b2 100644
--- a/tools/testing/selftests/scx/enqueue_select_cpu_fails.bpf.c
+++ b/tools/testing/selftests/scx/enq_select_cpu_fails.bpf.c
@@ -1,8 +1,5 @@
 /* SPDX-License-Identifier: GPL-2.0 */
 /*
- * A scheduler that validates the behavior of direct dispatching with a default
- * select_cpu implementation.
- *
  * Copyright (c) 2023 Meta Platforms, Inc. and affiliates.
  * Copyright (c) 2023 David Vernet <dvernet@meta.com>
  * Copyright (c) 2023 Tejun Heo <tj@kernel.org>
@@ -16,13 +13,13 @@ char _license[] SEC("license") = "GPL";
 s32 scx_bpf_select_cpu_dfl(struct task_struct *p, s32 prev_cpu, u64 wake_flags,
 			   bool *found) __ksym;
 
-s32 BPF_STRUCT_OPS(enqueue_select_cpu_fails_select_cpu, struct task_struct *p,
+s32 BPF_STRUCT_OPS(enq_select_cpu_fails_select_cpu, struct task_struct *p,
 		   s32 prev_cpu, u64 wake_flags)
 {
 	return prev_cpu;
 }
 
-void BPF_STRUCT_OPS(enqueue_select_cpu_fails_enqueue, struct task_struct *p,
+void BPF_STRUCT_OPS(enq_select_cpu_fails_enqueue, struct task_struct *p,
 		    u64 enq_flags)
 {
 	/*
@@ -37,7 +34,7 @@ void BPF_STRUCT_OPS(enqueue_select_cpu_fails_enqueue, struct task_struct *p,
 	scx_bpf_dispatch(p, SCX_DSQ_GLOBAL, SCX_SLICE_DFL, enq_flags);
 }
 
-s32 BPF_STRUCT_OPS(enqueue_select_cpu_fails_init)
+s32 BPF_STRUCT_OPS(enq_select_cpu_fails_init)
 {
 	scx_bpf_switch_all();
 
@@ -45,10 +42,10 @@ s32 BPF_STRUCT_OPS(enqueue_select_cpu_fails_init)
 }
 
 SEC(".struct_ops.link")
-struct sched_ext_ops enqueue_select_cpu_fails_ops = {
-	.select_cpu		= enqueue_select_cpu_fails_select_cpu,
-	.enqueue		= enqueue_select_cpu_fails_enqueue,
-	.init			= enqueue_select_cpu_fails_init,
-	.name			= "enqueue_select_cpu_fails",
+struct sched_ext_ops enq_select_cpu_fails_ops = {
+	.select_cpu		= enq_select_cpu_fails_select_cpu,
+	.enqueue		= enq_select_cpu_fails_enqueue,
+	.init			= enq_select_cpu_fails_init,
+	.name			= "enq_select_cpu_fails",
 	.timeout_ms		= 1000U,
 };
diff --git a/tools/testing/selftests/scx/enq_select_cpu_fails.c b/tools/testing/selftests/scx/enq_select_cpu_fails.c
new file mode 100644
index 000000000..dd1350e5f
--- /dev/null
+++ b/tools/testing/selftests/scx/enq_select_cpu_fails.c
@@ -0,0 +1,61 @@
+/* SPDX-License-Identifier: GPL-2.0 */
+/*
+ * Copyright (c) 2023 Meta Platforms, Inc. and affiliates.
+ * Copyright (c) 2023 David Vernet <dvernet@meta.com>
+ * Copyright (c) 2023 Tejun Heo <tj@kernel.org>
+ */
+#include <bpf/bpf.h>
+#include <scx/common.h>
+#include <sys/wait.h>
+#include <unistd.h>
+#include "enq_select_cpu_fails.bpf.skel.h"
+#include "scx_test.h"
+
+static enum scx_test_status setup(void **ctx)
+{
+	struct enq_select_cpu_fails *skel;
+
+	skel = enq_select_cpu_fails__open_and_load();
+	if (!skel) {
+		SCX_ERR("Failed to open and load skel");
+		return SCX_TEST_FAIL;
+	}
+	*ctx = skel;
+
+	return SCX_TEST_PASS;
+}
+
+static enum scx_test_status run(void *ctx)
+{
+	struct enq_select_cpu_fails *skel = ctx;
+	struct bpf_link *link;
+
+	link = bpf_map__attach_struct_ops(skel->maps.enq_select_cpu_fails_ops);
+	if (!link) {
+		SCX_ERR("Failed to attach scheduler");
+		return SCX_TEST_FAIL;
+	}
+
+	sleep(1);
+
+	bpf_link__destroy(link);
+
+	return SCX_TEST_PASS;
+}
+
+static void cleanup(void *ctx)
+{
+	struct enq_select_cpu_fails *skel = ctx;
+
+	enq_select_cpu_fails__destroy(skel);
+}
+
+struct scx_test enq_select_cpu_fails = {
+	.name = "enq_select_cpu_fails",
+	.description = "Verify we fail to call scx_bpf_select_cpu_dfl() "
+		       "from ops.enqueue()",
+	.setup = setup,
+	.run = run,
+	.cleanup = cleanup,
+};
+REGISTER_SCX_TEST(&enq_select_cpu_fails)
diff --git a/tools/testing/selftests/scx/enqueue_select_cpu_fails.c b/tools/testing/selftests/scx/enqueue_select_cpu_fails.c
deleted file mode 100644
index f45740370..000000000
--- a/tools/testing/selftests/scx/enqueue_select_cpu_fails.c
+++ /dev/null
@@ -1,36 +0,0 @@
-/* SPDX-License-Identifier: GPL-2.0 */
-/*
- * Copyright (c) 2023 Meta Platforms, Inc. and affiliates.
- * Copyright (c) 2023 David Vernet <dvernet@meta.com>
- * Copyright (c) 2023 Tejun Heo <tj@kernel.org>
- */
-#include <stdio.h>
-#include <unistd.h>
-#include <signal.h>
-#include <libgen.h>
-#include <bpf/bpf.h>
-#include <scx/common.h>
-#include <sys/wait.h>
-#include "enqueue_select_cpu_fails.bpf.skel.h"
-#include "scx_test.h"
-
-int main(int argc, char **argv)
-{
-	struct enqueue_select_cpu_fails *skel;
-	struct bpf_link *link;
-
-	libbpf_set_strict_mode(LIBBPF_STRICT_ALL);
-
-	skel = enqueue_select_cpu_fails__open_and_load();
-	SCX_BUG_ON(!skel, "Failed to open and load skel");
-
-	link = bpf_map__attach_struct_ops(skel->maps.enqueue_select_cpu_fails_ops);
-	SCX_BUG_ON(!link, "Failed to attach struct_ops");
-
-	sleep(1);
-
-	bpf_link__destroy(link);
-	enqueue_select_cpu_fails__destroy(skel);
-
-	return 0;
-}
diff --git a/tools/testing/selftests/scx/init_enable_count.c b/tools/testing/selftests/scx/init_enable_count.c
index 413bf0656..671e3366e 100644
--- a/tools/testing/selftests/scx/init_enable_count.c
+++ b/tools/testing/selftests/scx/init_enable_count.c
@@ -31,7 +31,7 @@ open_load_prog(bool global)
 	return skel;
 }
 
-static void run_test(bool global)
+static enum scx_test_status run_test(bool global)
 {
 	struct init_enable_count *skel;
 	struct bpf_link *link;
@@ -42,12 +42,12 @@ static void run_test(bool global)
 
 	skel = open_load_prog(global);
 	link = bpf_map__attach_struct_ops(skel->maps.init_enable_count_ops);
-	SCX_BUG_ON(!link, "Failed to attach struct_ops");
+	SCX_FAIL_IF(!link, "Failed to attach struct_ops");
 
 	/* SCHED_EXT children */
 	for (i = 0; i < num_children; i++) {
 		pids[i] = fork();
-		SCX_BUG_ON(pids[i] < 0, "Failed to fork child");
+		SCX_FAIL_IF(pids[i] < 0, "Failed to fork child");
 
 		if (pids[i] == 0) {
 			ret = sched_setscheduler(0, SCHED_EXT, &param);
@@ -67,10 +67,11 @@ static void run_test(bool global)
 		}
 	}
 	for (i = 0; i < num_children; i++) {
-		SCX_BUG_ON(waitpid(pids[i], &status, 0) != pids[i],
-			   "Failed to wait for SCX child");
-		SCX_BUG_ON(status != 0, "SCX child %d exited with status %d",
-			   i, status);
+		SCX_FAIL_IF(waitpid(pids[i], &status, 0) != pids[i],
+			    "Failed to wait for SCX child\n");
+
+		SCX_FAIL_IF(status != 0, "SCX child %d exited with status %d\n", i,
+			    status);
 	}
 
 	/* SCHED_OTHER children */
@@ -79,11 +80,13 @@ static void run_test(bool global)
 		if (pids[i] == 0)
 			exit(0);
 	}
+
 	for (i = 0; i < num_children; i++) {
-		SCX_BUG_ON(waitpid(pids[i], &status, 0) != pids[i],
-			   "Failed to wait for normal child");
-		SCX_BUG_ON(status != 0,
-			   "Normal child %d exited with status %d", i, status);
+		SCX_FAIL_IF(waitpid(pids[i], &status, 0) != pids[i],
+			    "Failed to wait for normal child\n");
+
+		SCX_FAIL_IF(status != 0, "Normal child %d exited with status %d\n", i,
+			    status);
 	}
 
 	sleep(1);
@@ -101,14 +104,25 @@ static void run_test(bool global)
 
 	bpf_link__destroy(link);
 	init_enable_count__destroy(skel);
+
+	return SCX_TEST_PASS;
 }
 
-int main(int argc, char **argv)
+static enum scx_test_status run(void *ctx)
 {
-	libbpf_set_strict_mode(LIBBPF_STRICT_ALL);
+	enum scx_test_status status;
 
-	run_test(true);
-	run_test(false);
+	status = run_test(true);
+	if (status != SCX_TEST_PASS)
+		return status;
 
-	return 0;
+	return run_test(false);
 }
+
+struct scx_test init_enable_count = {
+	.name = "init_enable_count",
+	.description = "Verify we do the correct amount of counting of init, "
+		       "enable, etc callbacks.",
+	.run = run,
+};
+REGISTER_SCX_TEST(&init_enable_count)
diff --git a/tools/testing/selftests/scx/minimal.c b/tools/testing/selftests/scx/minimal.c
index 722f0d502..6c5db8ebb 100644
--- a/tools/testing/selftests/scx/minimal.c
+++ b/tools/testing/selftests/scx/minimal.c
@@ -1,42 +1,58 @@
 /* SPDX-License-Identifier: GPL-2.0 */
 /*
- * Copyright (c) 2022 Meta Platforms, Inc. and affiliates.
- * Copyright (c) 2022 Tejun Heo <tj@kernel.org>
- * Copyright (c) 2022 David Vernet <dvernet@meta.com>
+ * Copyright (c) 2023 Meta Platforms, Inc. and affiliates.
+ * Copyright (c) 2023 David Vernet <dvernet@meta.com>
+ * Copyright (c) 2023 Tejun Heo <tj@kernel.org>
  */
-#include <stdio.h>
-#include <unistd.h>
-#include <signal.h>
-#include <libgen.h>
 #include <bpf/bpf.h>
 #include <scx/common.h>
+#include <sys/wait.h>
+#include <unistd.h>
 #include "minimal.bpf.skel.h"
+#include "scx_test.h"
 
-static volatile int exit_req;
-
-static void sigint_handler(int simple)
+static enum scx_test_status setup(void **ctx)
 {
-	exit_req = 1;
+	struct minimal *skel;
+
+	skel = minimal__open_and_load();
+	if (!skel) {
+		SCX_ERR("Failed to open and load skel");
+		return SCX_TEST_FAIL;
+	}
+	*ctx = skel;
+
+	return SCX_TEST_PASS;
 }
 
-int main(int argc, char **argv)
+static enum scx_test_status run(void *ctx)
 {
-	struct minimal *skel;
+	struct minimal *skel = ctx;
 	struct bpf_link *link;
 
-	signal(SIGINT, sigint_handler);
-	signal(SIGTERM, sigint_handler);
+	link = bpf_map__attach_struct_ops(skel->maps.minimal_ops);
+	if (!link) {
+		SCX_ERR("Failed to attach scheduler");
+		return SCX_TEST_FAIL;
+	}
+
+	bpf_link__destroy(link);
 
-	libbpf_set_strict_mode(LIBBPF_STRICT_ALL);
+	return SCX_TEST_PASS;
+}
 
-	skel = minimal__open_and_load();
-	SCX_BUG_ON(!skel, "Failed to open and load skel");
+static void cleanup(void *ctx)
+{
+	struct minimal *skel = ctx;
 
-	link = bpf_map__attach_struct_ops(skel->maps.minimal_ops);
-	SCX_BUG_ON(!link, "Failed to attach struct_ops");
-	sleep(1);
-	bpf_link__destroy(link);
 	minimal__destroy(skel);
-
-	return 0;
 }
+
+struct scx_test minimal = {
+	.name = "minimal",
+	.description = "Verify we can load a fully minimal scheduler",
+	.setup = setup,
+	.run = run,
+	.cleanup = cleanup,
+};
+REGISTER_SCX_TEST(&minimal)
diff --git a/tools/testing/selftests/scx/runner.c b/tools/testing/selftests/scx/runner.c
new file mode 100644
index 000000000..cfb57f6a0
--- /dev/null
+++ b/tools/testing/selftests/scx/runner.c
@@ -0,0 +1,187 @@
+/* SPDX-License-Identifier: GPL-2.0 */
+/*
+ * Copyright (c) 2024 Meta Platforms, Inc. and affiliates.
+ * Copyright (c) 2024 David Vernet <dvernet@meta.com>
+ * Copyright (c) 2024 Tejun Heo <tj@kernel.org>
+ */
+#include <stdio.h>
+#include <unistd.h>
+#include <signal.h>
+#include <libgen.h>
+#include <bpf/bpf.h>
+#include "scx_test.h"
+
+const char help_fmt[] =
+"The runner for sched_ext tests.\n"
+"\n"
+"The runner is statically linked against all testcases, and runs them all serially.\n"
+"It's required for the testcases to be serial, as only a single host-wide sched_ext\n"
+"scheduler may be loaded at any given time."
+"\n"
+"Usage: %s [-t TEST] [-h]\n"
+"\n"
+"  -t TEST       Only run tests whose name includes this string\n"
+"  -q            Don't print the test descriptions during run\n"
+"  -h            Display this help and exit\n";
+
+static volatile int exit_req;
+static bool quiet;
+
+#define MAX_SCX_TESTS 2048
+
+static struct scx_test __scx_tests[MAX_SCX_TESTS];
+static unsigned __scx_num_tests = 0;
+
+static void sigint_handler(int simple)
+{
+	exit_req = 1;
+}
+
+static void print_test_preamble(const struct scx_test *test, bool quiet)
+{
+	printf("===== START =====\n");
+	printf("TEST: %s\n", test->name);
+	if (!quiet)
+		printf("DESCRIPTION: %s\n", test->description);
+	printf("OUTPUT:\n");
+}
+
+static const char *status_to_result(enum scx_test_status status)
+{
+	switch (status) {
+	case SCX_TEST_PASS:
+	case SCX_TEST_SKIP:
+		return "ok";
+	case SCX_TEST_FAIL:
+		return "not ok";
+	}
+}
+
+static void print_test_result(const struct scx_test *test,
+			      enum scx_test_status status,
+			      unsigned int testnum)
+{
+	const char *result = status_to_result(status);
+	const char *directive = status == SCX_TEST_SKIP ? "SKIP " : "";
+
+	printf("%s %u %s # %s\n", result, testnum, test->name, directive);
+	printf("=====  END  =====\n");
+}
+
+static bool should_skip_test(const struct scx_test *test, const char * filter)
+{
+	return !strstr(test->name, filter);
+}
+
+static enum scx_test_status run_test(const struct scx_test *test)
+{
+	enum scx_test_status status;
+	void *context = NULL;
+
+	if (test->setup) {
+		status = test->setup(&context);
+		if (status != SCX_TEST_PASS)
+			return status;
+	}
+
+	status = test->run(context);
+
+	if (test->cleanup)
+		test->cleanup(context);
+
+	return status;
+}
+
+static bool test_valid(const struct scx_test *test)
+{
+	if (!test) {
+		fprintf(stderr, "NULL test detected\n");
+		return false;
+	}
+
+	if (!test->name) {
+		fprintf(stderr,
+			"Test with no name found. Must specify test name.\n");
+		return false;
+	}
+
+	if (!test->description) {
+		fprintf(stderr, "Test %s requires description.\n", test->name);
+		return false;
+	}
+
+	if (!test->run) {
+		fprintf(stderr, "Test %s has no run() callback\n", test->name);
+		return false;
+	}
+
+	return true;
+}
+
+int main(int argc, char **argv)
+{
+	const char *filter = NULL;
+	unsigned testnum = 0, i;
+	unsigned passed = 0, skipped = 0, failed = 0;
+	int opt;
+
+	signal(SIGINT, sigint_handler);
+	signal(SIGTERM, sigint_handler);
+
+	libbpf_set_strict_mode(LIBBPF_STRICT_ALL);
+
+	while ((opt = getopt(argc, argv, "qt:h")) != -1) {
+		switch (opt) {
+		case 'q':
+			quiet = true;
+			break;
+		case 't':
+			filter = optarg;
+			break;
+		default:
+			fprintf(stderr, help_fmt, basename(argv[0]));
+			return opt != 'h';
+		}
+	}
+
+	for (i = 0; i < __scx_num_tests; i++) {
+		enum scx_test_status status;
+		struct scx_test *test = &__scx_tests[i];
+
+		print_test_preamble(test, quiet);
+
+		if (filter && should_skip_test(test, filter)) {
+			print_test_result(test, SCX_TEST_SKIP, ++testnum);
+			continue;
+		}
+
+		status = run_test(test);
+		print_test_result(test, status, ++testnum);
+		switch (status) {
+		case SCX_TEST_PASS:
+			passed++;
+			break;
+		case SCX_TEST_SKIP:
+			skipped++;
+			break;
+		case SCX_TEST_FAIL:
+			failed++;
+			break;
+		}
+	}
+	printf("\n\n=============================\n\n");
+	printf("RESULTS:\n\n");
+	printf("PASSED:  %u\n", passed);
+	printf("SKIPPED: %u\n", skipped);
+	printf("FAILED:  %u\n", failed);
+
+	return 0;
+}
+
+void scx_test_register(struct scx_test *test)
+{
+	SCX_BUG_ON(!test_valid(test), "Invalid test found");
+	SCX_BUG_ON(__scx_num_tests >= MAX_SCX_TESTS, "Maximum tests exceeded");
+
+	__scx_tests[__scx_num_tests++] = *test;
+}
diff --git a/tools/testing/selftests/scx/scx_test.h b/tools/testing/selftests/scx/scx_test.h
index 6a61763b1..e402031c2 100644
--- a/tools/testing/selftests/scx/scx_test.h
+++ b/tools/testing/selftests/scx/scx_test.h
@@ -8,19 +8,103 @@
 #ifndef __SCX_TEST_H__
 #define __SCX_TEST_H__
 
+#include <errno.h>
 #include <scx/common.h>
 
-#define SCX_GT(_x, _y) SCX_BUG_ON((_x) <= (_y), "Expected %s > %s (%lu > %lu)",		\
-				  #_x, #_y, (u64)(_x), (u64)(_y))
-#define SCX_GE(_x, _y) SCX_BUG_ON((_x) < (_y), "Expected %s >= %s (%lu >= %lu)",	\
-				  #_x, #_y, (u64)(_x), (u64)(_y))
-#define SCX_LT(_x, _y) SCX_BUG_ON((_x) >= (_y), "Expected %s < %s (%lu < %lu)",		\
-				  #_x, #_y, (u64)(_x), (u64)(_y))
-#define SCX_LE(_x, _y) SCX_BUG_ON((_x) > (_y), "Expected %s <= %s (%lu <= %lu)",	\
-				  #_x, #_y, (u64)(_x), (u64)(_y))
-#define SCX_EQ(_x, _y) SCX_BUG_ON((_x) != (_y), "Expected %s == %s (%lu == %lu)",	\
-				  #_x, #_y, (u64)(_x), (u64)(_y))
-#define SCX_ASSERT(_x) SCX_BUG_ON(!(_x), "Expected %s to be true (%lu)",		\
-				  #_x, (u64)(_x))
+enum scx_test_status {
+	SCX_TEST_PASS = 0,
+	SCX_TEST_SKIP,
+	SCX_TEST_FAIL,
+};
+
+struct scx_test {
+	/**
+	 * name - The name of the testcase.
+	 */
+	const char *name;
+
+	/**
+	 * description - A description of your testcase: what it tests and is
+	 * meant to validate.
+	 */
+	const char *description;
+
+	/*
+	 * setup - Setup the test.
+	 * @ctx: A pointer to a context object that will be passed to run and
+	 *	 cleanup.
+	 *
+	 * An optional callback that allows a testcase to perform setup for its
+	 * run. A test may return SCX_TEST_SKIP to skip the run.
+	 */
+	enum scx_test_status (*setup)(void **ctx);
+
+	/*
+	 * run - Run the test.
+	 * @ctx: Context set in the setup() callback. If @ctx was not set in
+	 *	 setup(), it is NULL.
+	 *
+	 * The main test. Callers should return one of:
+	 *
+	 * - SCX_TEST_PASS: Test passed
+	 * - SCX_TEST_SKIP: Test should be skipped
+	 * - SCX_TEST_FAIL: Test failed
+	 *
+	 * This callback must be defined.
+	 */
+	enum scx_test_status (*run)(void *ctx);
+
+	/*
+	 * cleanup - Perform cleanup following the test
+	 * @ctx: Context set in the setup() callback. If @ctx was not set in
+	 *	 setup(), it is NULL.
+	 *
+	 * An optional callback that allows a test to perform cleanup after
+	 * being run. This callback is run even if the run() callback returns
+	 * SCX_TEST_SKIP or SCX_TEST_FAIL. It is not run if setup() returns
+	 * SCX_TEST_SKIP or SCX_TEST_FAIL.
+	 */
+	void (*cleanup)(void *ctx);
+};
+
+void scx_test_register(struct scx_test *test);
+
+#define REGISTER_SCX_TEST(__test)			\
+	__attribute__((constructor))			\
+	static void ___scxregister##__LINE__(void)	\
+	{						\
+		scx_test_register(__test);		\
+	}
+
+#define SCX_ERR(__fmt, ...)						\
+	do {								\
+		fprintf(stderr, "ERR: %s:%d\n", __FILE__, __LINE__);	\
+		fprintf(stderr, __fmt, ##__VA_ARGS__);			\
+	} while (0)
+
+#define SCX_FAIL(__fmt, ...)						\
+	do {								\
+		SCX_ERR(__fmt, ##__VA_ARGS__);				\
+		return SCX_TEST_FAIL;					\
+	} while (0)
+
+#define SCX_FAIL_IF(__cond, __fmt, ...)					\
+	do {								\
+		if (__cond)						\
+			SCX_FAIL(__fmt, ##__VA_ARGS__);			\
+	} while (0)
+
+#define SCX_GT(_x, _y) SCX_FAIL_IF((_x) <= (_y), "Expected %s > %s (%lu > %lu)",	\
+				   #_x, #_y, (u64)(_x), (u64)(_y))
+#define SCX_GE(_x, _y) SCX_FAIL_IF((_x) < (_y), "Expected %s >= %s (%lu >= %lu)",	\
+				   #_x, #_y, (u64)(_x), (u64)(_y))
+#define SCX_LT(_x, _y) SCX_FAIL_IF((_x) >= (_y), "Expected %s < %s (%lu < %lu)",	\
+				   #_x, #_y, (u64)(_x), (u64)(_y))
+#define SCX_LE(_x, _y) SCX_FAIL_IF((_x) > (_y), "Expected %s <= %s (%lu <= %lu)",	\
+				   #_x, #_y, (u64)(_x), (u64)(_y))
+#define SCX_EQ(_x, _y) SCX_FAIL_IF((_x) != (_y), "Expected %s == %s (%lu == %lu)",	\
+				   #_x, #_y, (u64)(_x), (u64)(_y))
+#define SCX_ASSERT(_x) SCX_FAIL_IF(!(_x), "Expected %s to be true (%lu)",		\
+				   #_x, (u64)(_x))
 
 #endif  // # __SCX_TEST_H__
diff --git a/tools/testing/selftests/scx/test_example.c b/tools/testing/selftests/scx/test_example.c
new file mode 100644
index 000000000..ce36cdf03
--- /dev/null
+++ b/tools/testing/selftests/scx/test_example.c
@@ -0,0 +1,49 @@
+/* SPDX-License-Identifier: GPL-2.0 */
+/*
+ * Copyright (c) 2024 Meta Platforms, Inc. and affiliates.
+ * Copyright (c) 2024 Tejun Heo <tj@kernel.org>
+ * Copyright (c) 2024 David Vernet <dvernet@meta.com>
+ */
+#include <bpf/bpf.h>
+#include <scx/common.h>
+#include "scx_test.h"
+
+static bool setup_called = false;
+static bool run_called = false;
+static bool cleanup_called = false;
+
+static int context = 10;
+
+static enum scx_test_status setup(void **ctx)
+{
+	setup_called = true;
+	*ctx = &context;
+
+	return SCX_TEST_PASS;
+}
+
+static enum scx_test_status run(void *ctx)
+{
+	int *arg = ctx;
+
+	SCX_ASSERT(setup_called);
+	SCX_ASSERT(!run_called && !cleanup_called);
+	SCX_EQ(*arg, context);
+
+	run_called = true;
+	return SCX_TEST_PASS;
+}
+
+static void cleanup (void *ctx)
+{
+	SCX_BUG_ON(!run_called || cleanup_called, "Wrong callbacks invoked");
+}
+
+struct scx_test example = {
+	.name		= "example",
+	.description	= "Validate the basic function of the test suite itself",
+	.setup		= setup,
+	.run		= run,
+	.cleanup	= cleanup,
+};
+REGISTER_SCX_TEST(&example)
-- 
2.43.0.232.ge79552d197

