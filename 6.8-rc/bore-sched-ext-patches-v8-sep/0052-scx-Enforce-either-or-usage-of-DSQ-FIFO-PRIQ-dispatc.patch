From d70d278b30e761fd1090d56c6cc0507167fa5ee5 Mon Sep 17 00:00:00 2001
From: David Vernet <void@manifault.com>
Date: Mon, 4 Dec 2023 15:53:19 -0600
Subject: [PATCH 052/118] scx: Enforce either/or usage of DSQ FIFO/PRIQ
 dispatching

Currently, a user can do both FIFO and PRIQ dispatching to a DSQ. This
can result in non-intuitive behavior. For example, if a user
PRIQ-dispatches to a DSQ, and then subsequently FIFO dispatches, an
scx_bpf_consume() operation will always favor the FIFO-dispatched task.
While we could add something like an scx_bpf_consume_vtime() kfunc,
given that there's not a clear use-case for doing both types of
dispatching in a single DSQ, for now we'll elect to just enforce that
only a single type is being used at any given time.

Reported-by: Changwoo Min <changwoo@igalia.com>
Signed-off-by: David Vernet <void@manifault.com>
---
 kernel/sched/ext.c | 8 ++++++++
 1 file changed, 8 insertions(+)

diff --git a/kernel/sched/ext.c b/kernel/sched/ext.c
index c4fea4f7f..1095d494c 100644
--- a/kernel/sched/ext.c
+++ b/kernel/sched/ext.c
@@ -651,11 +651,19 @@ static void dispatch_enqueue(struct scx_dispatch_q *dsq, struct task_struct *p,
 		p->scx.dsq_flags |= SCX_TASK_DSQ_ON_PRIQ;
 		rb_add_cached(&p->scx.dsq_node.priq, &dsq->priq,
 			      scx_dsq_priq_less);
+		/* A DSQ should only be using either FIFO or PRIQ enqueuing. */
+		if (unlikely(!list_empty(&dsq->fifo)))
+			scx_ops_error("DSQ ID 0x%016llx already had FIFO-enqueued tasks",
+				      dsq->id);
 	} else {
 		if (enq_flags & (SCX_ENQ_HEAD | SCX_ENQ_PREEMPT))
 			list_add(&p->scx.dsq_node.fifo, &dsq->fifo);
 		else
 			list_add_tail(&p->scx.dsq_node.fifo, &dsq->fifo);
+		/* A DSQ should only be using either FIFO or PRIQ enqueuing. */
+		if (unlikely(rb_first_cached(&dsq->priq)))
+			scx_ops_error("DSQ ID 0x%016llx already had PRIQ-enqueued tasks",
+				      dsq->id);
 	}
 	dsq->nr++;
 	p->scx.dsq = dsq;
-- 
2.43.0.232.ge79552d197

