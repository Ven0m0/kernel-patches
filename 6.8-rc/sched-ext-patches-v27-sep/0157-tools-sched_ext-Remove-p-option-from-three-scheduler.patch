From d92a12a1a9b2c3b1e4c1a5353a13c00bb4de8301 Mon Sep 17 00:00:00 2001
From: Tejun Heo <tj@kernel.org>
Date: Tue, 5 Mar 2024 15:15:25 -1000
Subject: [PATCH 157/161] tools/sched_ext: Remove -p option from three
 schedulers

Let's just leave it on scx_qmap as an example.
---
 tools/sched_ext/scx_central.bpf.c | 4 ----
 tools/sched_ext/scx_central.c     | 4 ----
 tools/sched_ext/scx_flatcg.bpf.c  | 9 ---------
 tools/sched_ext/scx_flatcg.c      | 4 ----
 tools/sched_ext/scx_simple.bpf.c  | 4 ----
 tools/sched_ext/scx_simple.c      | 4 ----
 6 files changed, 29 deletions(-)

diff --git a/tools/sched_ext/scx_central.bpf.c b/tools/sched_ext/scx_central.bpf.c
index 2ecb384c7..a07b36a1a 100644
--- a/tools/sched_ext/scx_central.bpf.c
+++ b/tools/sched_ext/scx_central.bpf.c
@@ -55,7 +55,6 @@ enum {
 	TIMER_INTERVAL_NS	= 1 * MS_TO_NS,
 };
 
-const volatile bool switch_partial;
 const volatile s32 central_cpu;
 const volatile u32 nr_cpu_ids = 1;	/* !0 for veristat, set during init */
 const volatile u64 slice_ns = SCX_SLICE_DFL;
@@ -306,9 +305,6 @@ int BPF_STRUCT_OPS_SLEEPABLE(central_init)
 	struct bpf_timer *timer;
 	int ret;
 
-	if (!switch_partial)
-		__COMPAT_scx_bpf_switch_all();
-
 	ret = scx_bpf_create_dsq(FALLBACK_DSQ_ID, -1);
 	if (ret)
 		return ret;
diff --git a/tools/sched_ext/scx_central.c b/tools/sched_ext/scx_central.c
index 501505001..e9669f215 100644
--- a/tools/sched_ext/scx_central.c
+++ b/tools/sched_ext/scx_central.c
@@ -24,7 +24,6 @@ const char help_fmt[] =
 "\n"
 "  -s SLICE_US   Override slice duration\n"
 "  -c CPU        Override the central CPU (default: 0)\n"
-"  -p            Switch only tasks on SCHED_EXT policy intead of all\n"
 "  -h            Display this help and exit\n";
 
 static volatile int exit_req;
@@ -61,9 +60,6 @@ int main(int argc, char **argv)
 		case 'c':
 			skel->rodata->central_cpu = strtoul(optarg, NULL, 0);
 			break;
-		case 'p':
-			skel->rodata->switch_partial = true;
-			break;
 		default:
 			fprintf(stderr, help_fmt, basename(argv[0]));
 			return opt != 'h';
diff --git a/tools/sched_ext/scx_flatcg.bpf.c b/tools/sched_ext/scx_flatcg.bpf.c
index 41695e52d..e1a5c6cb5 100644
--- a/tools/sched_ext/scx_flatcg.bpf.c
+++ b/tools/sched_ext/scx_flatcg.bpf.c
@@ -56,7 +56,6 @@ char _license[] SEC("license") = "GPL";
 const volatile u32 nr_cpus = 32;	/* !0 for veristat, set during init */
 const volatile u64 cgrp_slice_ns = SCX_SLICE_DFL;
 const volatile bool fifo_sched;
-const volatile bool switch_partial;
 
 u64 cvtime_now;
 struct user_exit_info uei;
@@ -927,13 +926,6 @@ void BPF_STRUCT_OPS(fcg_cgroup_move, struct task_struct *p,
 	p->scx.dsq_vtime = to_cgc->tvtime_now + vtime_delta;
 }
 
-s32 BPF_STRUCT_OPS(fcg_init)
-{
-	if (!switch_partial)
-		__COMPAT_scx_bpf_switch_all();
-	return 0;
-}
-
 void BPF_STRUCT_OPS(fcg_exit, struct scx_exit_info *ei)
 {
 	uei_record(&uei, ei);
@@ -953,7 +945,6 @@ struct sched_ext_ops flatcg_ops = {
 	.cgroup_init		= (void *)fcg_cgroup_init,
 	.cgroup_exit		= (void *)fcg_cgroup_exit,
 	.cgroup_move		= (void *)fcg_cgroup_move,
-	.init			= (void *)fcg_init,
 	.exit			= (void *)fcg_exit,
 	.flags			= SCX_OPS_CGROUP_KNOB_WEIGHT | SCX_OPS_ENQ_EXITING,
 	.name			= "flatcg",
diff --git a/tools/sched_ext/scx_flatcg.c b/tools/sched_ext/scx_flatcg.c
index 6c2f9715f..8841ef89a 100644
--- a/tools/sched_ext/scx_flatcg.c
+++ b/tools/sched_ext/scx_flatcg.c
@@ -31,7 +31,6 @@ const char help_fmt[] =
 "  -s SLICE_US   Override slice duration\n"
 "  -i INTERVAL   Report interval\n"
 "  -f            Use FIFO scheduling instead of weighted vtime scheduling\n"
-"  -p            Switch only tasks on SCHED_EXT policy intead of all\n"
 "  -h            Display this help and exit\n";
 
 static volatile int exit_req;
@@ -150,9 +149,6 @@ int main(int argc, char **argv)
 		case 'f':
 			skel->rodata->fifo_sched = true;
 			break;
-		case 'p':
-			skel->rodata->switch_partial = true;
-			break;
 		case 'h':
 		default:
 			fprintf(stderr, help_fmt, basename(argv[0]));
diff --git a/tools/sched_ext/scx_simple.bpf.c b/tools/sched_ext/scx_simple.bpf.c
index 1d5a830bc..26b30ffd3 100644
--- a/tools/sched_ext/scx_simple.bpf.c
+++ b/tools/sched_ext/scx_simple.bpf.c
@@ -25,7 +25,6 @@
 char _license[] SEC("license") = "GPL";
 
 const volatile bool fifo_sched;
-const volatile bool switch_partial;
 
 static u64 vtime_now;
 struct user_exit_info uei;
@@ -130,9 +129,6 @@ void BPF_STRUCT_OPS(simple_enable, struct task_struct *p)
 
 s32 BPF_STRUCT_OPS_SLEEPABLE(simple_init)
 {
-	if (!switch_partial)
-		__COMPAT_scx_bpf_switch_all();
-
 	return scx_bpf_create_dsq(SHARED_DSQ, -1);
 }
 
diff --git a/tools/sched_ext/scx_simple.c b/tools/sched_ext/scx_simple.c
index 5c5589770..02f03bff4 100644
--- a/tools/sched_ext/scx_simple.c
+++ b/tools/sched_ext/scx_simple.c
@@ -20,7 +20,6 @@ const char help_fmt[] =
 "Usage: %s [-f] [-p]\n"
 "\n"
 "  -f            Use FIFO scheduling instead of weighted vtime scheduling\n"
-"  -p            Switch only tasks on SCHED_EXT policy intead of all\n"
 "  -h            Display this help and exit\n";
 
 static volatile int exit_req;
@@ -69,9 +68,6 @@ int main(int argc, char **argv)
 		case 'f':
 			skel->rodata->fifo_sched = true;
 			break;
-		case 'p':
-			skel->rodata->switch_partial = true;
-			break;
 		default:
 			fprintf(stderr, help_fmt, basename(argv[0]));
 			return opt != 'h';
-- 
2.43.0.232.ge79552d197

