From 2944cec3bd75da27456b55f4b5e02131789e9bde Mon Sep 17 00:00:00 2001
From: Tejun Heo <tj@kernel.org>
Date: Mon, 8 Jan 2024 10:21:23 -1000
Subject: [PATCH 083/160] scx: Bypass while PM operations are in progress

SCX schedulers often have userspace components which are sometimes involved
in critial scheduling paths. PM operations involve freezing userspace which
can lead to scheduling misbehaviors including stalls. Let's bypass while PM
operations are in progress.

Signed-off-by: Tejun Heo <tj@kernel.org>
Reported-by: Andrea Righi <andrea.righi@canonical.com>
---
 kernel/sched/build_policy.c |  1 +
 kernel/sched/ext.c          | 37 ++++++++++++++++++++++++++++++++++++-
 2 files changed, 37 insertions(+), 1 deletion(-)

diff --git a/kernel/sched/build_policy.c b/kernel/sched/build_policy.c
index 005025f55..96ea08f76 100644
--- a/kernel/sched/build_policy.c
+++ b/kernel/sched/build_policy.c
@@ -22,6 +22,7 @@
 #include <linux/cpuidle.h>
 #include <linux/jiffies.h>
 #include <linux/livepatch.h>
+#include <linux/pm.h>
 #include <linux/psi.h>
 #include <linux/seqlock_api.h>
 #include <linux/slab.h>
diff --git a/kernel/sched/ext.c b/kernel/sched/ext.c
index 577a38b11..238e2b539 100644
--- a/kernel/sched/ext.c
+++ b/kernel/sched/ext.c
@@ -3914,6 +3914,37 @@ void print_scx_info(const char *log_lvl, struct task_struct *p)
 	       runnable_at_buf);
 }
 
+static int scx_pm_handler(struct notifier_block *nb, unsigned long event, void *ptr)
+{
+	if (!scx_enabled())
+		return NOTIFY_OK;
+
+	/*
+	 * SCX schedulers often have userspace components which are sometimes
+	 * involved in critial scheduling paths. PM operations involve freezing
+	 * userspace which can lead to scheduling misbehaviors including stalls.
+	 * Let's bypass while PM operations are in progress.
+	 */
+	switch (event) {
+	case PM_HIBERNATION_PREPARE:
+	case PM_SUSPEND_PREPARE:
+	case PM_RESTORE_PREPARE:
+		scx_ops_bypass(true);
+		break;
+	case PM_POST_HIBERNATION:
+	case PM_POST_SUSPEND:
+	case PM_POST_RESTORE:
+		scx_ops_bypass(false);
+		break;
+	}
+
+	return NOTIFY_OK;
+}
+
+static struct notifier_block scx_pm_notifier = {
+	.notifier_call = scx_pm_handler,
+};
+
 void __init init_sched_ext_class(void)
 {
 	int cpu;
@@ -4669,10 +4700,14 @@ static int __init scx_init(void)
 					     &scx_kfunc_set_any)) ||
 	    (ret = register_btf_kfunc_id_set(BPF_PROG_TYPE_TRACING,
 					     &scx_kfunc_set_any))) {
-		pr_err("sched_ext: failed to register kfunc sets (%d)\n", ret);
+		pr_err("sched_ext: Failed to register kfunc sets (%d)\n", ret);
 		return ret;
 	}
 
+	ret = register_pm_notifier(&scx_pm_notifier);
+	if (ret)
+		pr_warn("sched_ext: Failed to register PM notifier (%d)\n", ret);
+
 	return 0;
 }
 __initcall(scx_init);
-- 
2.43.0.232.ge79552d197

