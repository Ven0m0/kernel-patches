From e3431426df0d729e4ae8edbd27fdc0d04568bc36 Mon Sep 17 00:00:00 2001
From: Tejun Heo <tj@kernel.org>
Date: Fri, 23 Feb 2024 09:34:39 -1000
Subject: [PATCH 138/162] scx_sync: Sync scheduler changes from
 https://github.com/sched-ext/scx

---
 tools/sched_ext/include/scx/common.bpf.h |  8 +++++---
 tools/sched_ext/include/scx/compat.bpf.h | 18 ++++++++++++++++++
 tools/sched_ext/scx_qmap.bpf.c           |  2 +-
 3 files changed, 24 insertions(+), 4 deletions(-)
 create mode 100644 tools/sched_ext/include/scx/compat.bpf.h

diff --git a/tools/sched_ext/include/scx/common.bpf.h b/tools/sched_ext/include/scx/common.bpf.h
index 579fdcdb5..93c61e284 100644
--- a/tools/sched_ext/include/scx/common.bpf.h
+++ b/tools/sched_ext/include/scx/common.bpf.h
@@ -4,8 +4,8 @@
  * Copyright (c) 2022 Tejun Heo <tj@kernel.org>
  * Copyright (c) 2022 David Vernet <dvernet@meta.com>
  */
-#ifndef __SCHED_EXT_COMMON_BPF_H
-#define __SCHED_EXT_COMMON_BPF_H
+#ifndef __SCX_COMMON_BPF_H
+#define __SCX_COMMON_BPF_H
 
 #include "vmlinux.h"
 #include <bpf/bpf_helpers.h>
@@ -56,9 +56,9 @@ void ___scx_bpf_error_format_checker(const char *fmt, ...) {}
 void scx_bpf_switch_all(void) __ksym;
 s32 scx_bpf_create_dsq(u64 dsq_id, s32 node) __ksym;
 bool scx_bpf_consume(u64 dsq_id) __ksym;
-u32 scx_bpf_dispatch_nr_slots(void) __ksym;
 void scx_bpf_dispatch(struct task_struct *p, u64 dsq_id, u64 slice, u64 enq_flags) __ksym;
 void scx_bpf_dispatch_vtime(struct task_struct *p, u64 dsq_id, u64 slice, u64 vtime, u64 enq_flags) __ksym;
+u32 scx_bpf_dispatch_nr_slots(void) __ksym;
 void scx_bpf_dispatch_cancel(void) __ksym;
 void scx_bpf_kick_cpu(s32 cpu, u64 flags) __ksym;
 s32 scx_bpf_dsq_nr_queued(u64 dsq_id) __ksym;
@@ -243,4 +243,6 @@ u32 bpf_cpumask_any_and_distribute(const struct cpumask *src1,
 void bpf_rcu_read_lock(void) __ksym;
 void bpf_rcu_read_unlock(void) __ksym;
 
+#include "compat.bpf.h"
+
 #endif	/* __SCHED_EXT_COMMON_BPF_H */
diff --git a/tools/sched_ext/include/scx/compat.bpf.h b/tools/sched_ext/include/scx/compat.bpf.h
new file mode 100644
index 000000000..2465ded0a
--- /dev/null
+++ b/tools/sched_ext/include/scx/compat.bpf.h
@@ -0,0 +1,18 @@
+/* SPDX-License-Identifier: GPL-2.0 */
+/*
+ * Copyright (c) 2024 Meta Platforms, Inc. and affiliates.
+ * Copyright (c) 2024 Tejun Heo <tj@kernel.org>
+ * Copyright (c) 2024 David Vernet <dvernet@meta.com>
+ */
+#ifndef __SCX_COMPAT_BPF_H
+#define __SCX_COMPAT_BPF_H
+
+static inline void __COMPAT_scx_bpf_kick_cpu_IDLE(s32 cpu)
+{
+	if (bpf_core_enum_value_exists(enum scx_kick_flags, SCX_KICK_IDLE))
+		scx_bpf_kick_cpu(cpu, SCX_KICK_IDLE);
+	else
+		scx_bpf_kick_cpu(cpu, 0);
+}
+
+#endif
diff --git a/tools/sched_ext/scx_qmap.bpf.c b/tools/sched_ext/scx_qmap.bpf.c
index 2fb75543a..79cae5353 100644
--- a/tools/sched_ext/scx_qmap.bpf.c
+++ b/tools/sched_ext/scx_qmap.bpf.c
@@ -192,7 +192,7 @@ void BPF_STRUCT_OPS(qmap_enqueue, struct task_struct *p, u64 enq_flags)
 		scx_bpf_dispatch(p, SCX_DSQ_GLOBAL, 0, enq_flags);
 		cpu = scx_bpf_pick_idle_cpu(p->cpus_ptr, 0);
 		if (cpu >= 0)
-			scx_bpf_kick_cpu(cpu, 0);
+			__COMPAT_scx_bpf_kick_cpu_IDLE(cpu);
 		return;
 	}
 
-- 
2.43.0.232.ge79552d197

