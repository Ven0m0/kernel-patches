From a6889ceb5ddec05ef291cfa493af0c08bd4acf45 Mon Sep 17 00:00:00 2001
From: Tejun Heo <tj@kernel.org>
Date: Fri, 23 Feb 2024 09:59:22 -1000
Subject: [PATCH 143/155] scx: Cosmetic changes and comment update

---
 include/linux/sched/ext.h | 11 ++++-------
 1 file changed, 4 insertions(+), 7 deletions(-)

diff --git a/include/linux/sched/ext.h b/include/linux/sched/ext.h
index d3ccf4622..53751824a 100644
--- a/include/linux/sched/ext.h
+++ b/include/linux/sched/ext.h
@@ -432,8 +432,7 @@ struct sched_ext_ops {
 	 * loading will abort loading of the BPF scheduler. During a fork, it
 	 * will abort that specific fork.
 	 */
-	s32 (*init_task)(struct task_struct *p,
-			 struct scx_init_task_args *args);
+	s32 (*init_task)(struct task_struct *p, struct scx_init_task_args *args);
 
 	/**
 	 * exit_task - Exit a previously-running task from the system
@@ -442,16 +441,14 @@ struct sched_ext_ops {
 	 * @p is exiting or the BPF scheduler is being unloaded. Perform any
 	 * necessary cleanup for @p.
 	 */
-	void (*exit_task)(struct task_struct *p,
-			  struct scx_exit_task_args *args);
+	void (*exit_task)(struct task_struct *p, struct scx_exit_task_args *args);
 
 	/**
 	 * enable - Enable BPF scheduling for a task
 	 * @p: task to enable BPF scheduling for
 	 *
-	 * Enable @p for BPF scheduling. @p is now in the cgroup specified in
-	 * @args. enable() is called on @p any time it enters SCX, and is
-	 * always paired with a matching disable().
+	 * Enable @p for BPF scheduling. enable() is called on @p any time it
+	 * enters SCX, and is always paired with a matching disable().
 	 */
 	void (*enable)(struct task_struct *p);
 
-- 
2.43.0.232.ge79552d197

