From f76414d7bc3c00b578b93a7f05e518f6cbe5f655 Mon Sep 17 00:00:00 2001
From: Tejun Heo <tj@kernel.org>
Date: Wed, 6 Mar 2024 10:06:47 -1000
Subject: [PATCH 160/162] scx/compat: Apply David's suggestions

- SCX_BUG_ON() already automatically prints errno. No need to add
  explicitly.

- __COMPAT_ENUM_OR_ZERO() added to both compat.h and compat.bpf.h.
---
 tools/sched_ext/include/scx/common.h     |  1 +
 tools/sched_ext/include/scx/compat.bpf.h | 17 ++++++++--------
 tools/sched_ext/include/scx/compat.h     | 26 +++++++++++-------------
 3 files changed, 22 insertions(+), 22 deletions(-)

diff --git a/tools/sched_ext/include/scx/common.h b/tools/sched_ext/include/scx/common.h
index fc67e11c4..2a8820108 100644
--- a/tools/sched_ext/include/scx/common.h
+++ b/tools/sched_ext/include/scx/common.h
@@ -15,6 +15,7 @@
 #include <stdio.h>
 #include <stdlib.h>
 #include <stdint.h>
+#include <errno.h>
 
 #include "user_exit_info.h"
 
diff --git a/tools/sched_ext/include/scx/compat.bpf.h b/tools/sched_ext/include/scx/compat.bpf.h
index 5a0513046..01b804848 100644
--- a/tools/sched_ext/include/scx/compat.bpf.h
+++ b/tools/sched_ext/include/scx/compat.bpf.h
@@ -7,19 +7,20 @@
 #ifndef __SCX_COMPAT_BPF_H
 #define __SCX_COMPAT_BPF_H
 
-static inline u64 __COMPAT_SCX_KICK_IDLE(void)
-{
-	if (bpf_core_enum_value_exists(enum scx_kick_flags, SCX_KICK_IDLE))
-		return SCX_KICK_IDLE;
-	else
-		return 0;
-}
+#define __COMPAT_ENUM_OR_ZERO(__type, __ent)					\
+({										\
+	__type __ret = 0;							\
+	if (bpf_core_enum_value_exists(__type, __ent))				\
+		__ret = __ent;							\
+	__ret;									\
+})
 
 /*
  * %SCX_KICK_IDLE is a later addition. To support both before and after, use
  * %__COMPAT_SCX_KICK_IDLE which becomes 0 on kernels which don't support it.
  */
-#define __COMPAT_SCX_KICK_IDLE __COMPAT_SCX_KICK_IDLE()
+#define __COMPAT_SCX_KICK_IDLE							\
+	__COMPAT_ENUM_OR_ZERO(enum scx_kick_flags, SCX_KICK_IDLE)
 
 /*
  * scx_switch_all() was replaced by %SCX_OPS_SWITCH_PARTIAL. See
diff --git a/tools/sched_ext/include/scx/compat.h b/tools/sched_ext/include/scx/compat.h
index 187d09ca8..1e6e3cbe9 100644
--- a/tools/sched_ext/include/scx/compat.h
+++ b/tools/sched_ext/include/scx/compat.h
@@ -8,7 +8,6 @@
 #define __SCX_COMPAT_H
 
 #include <bpf/btf.h>
-#include <errno.h>
 
 struct btf *__COMPAT_vmlinux_btf __attribute__((weak));
 
@@ -16,8 +15,7 @@ static inline void __COMPAT_load_vmlinux_btf(void)
 {
 	if (!__COMPAT_vmlinux_btf) {
 		__COMPAT_vmlinux_btf = btf__load_vmlinux_btf();
-		SCX_BUG_ON(!__COMPAT_vmlinux_btf, "btf__load_vmlinux_btf() (%s)",
-			   strerror(errno));
+		SCX_BUG_ON(!__COMPAT_vmlinux_btf, "btf__load_vmlinux_btf()");
 	}
 }
 
@@ -35,14 +33,14 @@ static inline bool __COMPAT_read_enum(const char *type, const char *name, u64 *v
 		return false;
 
 	t = btf__type_by_id(__COMPAT_vmlinux_btf, tid);
-	SCX_BUG_ON(!t, "btf__type_by_id(%d) (%s)", tid, strerror(errno));
+	SCX_BUG_ON(!t, "btf__type_by_id(%d)", tid);
 
 	if (btf_is_enum(t)) {
 		struct btf_enum *e = btf_enum(t);
 
 		for (i = 0; i < BTF_INFO_VLEN(t->info); i++) {
 			n = btf__name_by_offset(__COMPAT_vmlinux_btf, e[i].name_off);
-			SCX_BUG_ON(!n, "btf__name_by_offset() (%s)", strerror(errno));
+			SCX_BUG_ON(!n, "btf__name_by_offset()");
 			if (!strcmp(n, name)) {
 				*v = e[i].val;
 				return true;
@@ -53,7 +51,7 @@ static inline bool __COMPAT_read_enum(const char *type, const char *name, u64 *v
 
 		for (i = 0; i < BTF_INFO_VLEN(t->info); i++) {
 			n = btf__name_by_offset(__COMPAT_vmlinux_btf, e[i].name_off);
-			SCX_BUG_ON(!n, "btf__name_by_offset() (%s)", strerror(errno));
+			SCX_BUG_ON(!n, "btf__name_by_offset()");
 			if (!strcmp(n, name)) {
 				*v = btf_enum64_value(&e[i]);
 				return true;
@@ -64,13 +62,12 @@ static inline bool __COMPAT_read_enum(const char *type, const char *name, u64 *v
 	return false;
 }
 
-static inline u64 __COMPAT_SCX_OPS_SWITCH_PARTIAL(void)
-{
-	u64 v = 0;
-
-	__COMPAT_read_enum("scx_ops_flags", "SCX_OPS_SWITCH_PARTIAL", &v);
-	return v;
-}
+#define __COMPAT_ENUM_OR_ZERO(__type, __ent)					\
+({										\
+	u64 __val = 0;								\
+	__COMPAT_read_enum(__type, __ent, &__val);				\
+	__val;									\
+})
 
 /*
  * An ops flag, %SCX_OPS_SWITCH_PARTIAL, replaced scx_bpf_switch_all() which had
@@ -78,6 +75,7 @@ static inline u64 __COMPAT_SCX_OPS_SWITCH_PARTIAL(void)
  * %__COMPAT_SCX_OPS_SWITCH_PARTIAL and %__COMPAT_scx_bpf_switch_all() defined
  * in compat.bpf.h.
  */
-#define __COMPAT_SCX_OPS_SWITCH_PARTIAL __COMPAT_SCX_OPS_SWITCH_PARTIAL()
+#define __COMPAT_SCX_OPS_SWITCH_PARTIAL						\
+	__COMPAT_ENUM_OR_ZERO("scx_ops_flags", "SCX_OPS_SWITCH_PARTIAL")
 
 #endif
-- 
2.43.0.232.ge79552d197

