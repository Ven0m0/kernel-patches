From 8000aff1e7adde5630ab41a22c8cfdfedc84c560 Mon Sep 17 00:00:00 2001
From: Tejun Heo <tj@kernel.org>
Date: Tue, 28 Nov 2023 08:52:46 -1000
Subject: [PATCH 042/130] scx_{rusty|layered}: ravg_read is now provided by
 scx_utils crate, remove .rs.h file

---
 tools/sched_ext/ravg_read.rs.h          | 82 -------------------------
 tools/sched_ext/scx_layered/Cargo.toml  |  1 +
 tools/sched_ext/scx_layered/src/main.rs |  3 +-
 tools/sched_ext/scx_rusty/Cargo.toml    |  1 +
 tools/sched_ext/scx_rusty/src/main.rs   |  3 +-
 5 files changed, 4 insertions(+), 86 deletions(-)
 delete mode 100644 tools/sched_ext/ravg_read.rs.h

diff --git a/tools/sched_ext/ravg_read.rs.h b/tools/sched_ext/ravg_read.rs.h
deleted file mode 100644
index 4efaa2390..000000000
--- a/tools/sched_ext/ravg_read.rs.h
+++ /dev/null
@@ -1,82 +0,0 @@
-/// ravg_read() implementation for rust userland. See ravg_read() in
-/// ravg_impl.bpf.h. We don't yet have a good mechanism to share BPF and
-/// matching rust code across multiple schedulers. For now, include both BPF
-/// and rust code from scheduler implementations.
-fn ravg_read(
-    val: u64,
-    val_at: u64,
-    old: u64,
-    cur: u64,
-    now: u64,
-    half_life: u32,
-    frac_bits: u32,
-) -> f64 {
-    let ravg_1: f64 = (1 << frac_bits) as f64;
-    let half_life = half_life as u64;
-    let val = val as f64;
-    let mut old = old as f64 / ravg_1;
-    let mut cur = cur as f64 / ravg_1;
-
-    let now = now.max(val_at);
-    let normalized_dur = |dur| dur as f64 / half_life as f64;
-
-    //
-    // The following is f64 implementation of BPF ravg_accumulate().
-    //
-    let cur_seq = (now / half_life) as i64;
-    let val_seq = (val_at / half_life) as i64;
-    let seq_delta = (cur_seq - val_seq) as i32;
-
-    if seq_delta > 0 {
-        let full_decay = 2f64.powi(seq_delta);
-
-        // Decay $old and fold $cur into it.
-        old /= full_decay;
-        old += cur / full_decay;
-        cur = 0.0;
-
-        // Fold the oldest period whicy may be partial.
-        old += val * normalized_dur(half_life - val_at % half_life) / full_decay;
-
-        // Pre-computed decayed full-period values.
-        const FULL_SUMS: [f64; 20] = [
-            0.5,
-            0.75,
-            0.875,
-            0.9375,
-            0.96875,
-            0.984375,
-            0.9921875,
-            0.99609375,
-            0.998046875,
-            0.9990234375,
-            0.99951171875,
-            0.999755859375,
-            0.9998779296875,
-            0.99993896484375,
-            0.999969482421875,
-            0.9999847412109375,
-            0.9999923706054688,
-            0.9999961853027344,
-            0.9999980926513672,
-            0.9999990463256836,
-            // Use the same value beyond this point.
-        ];
-
-        // Fold the full periods in the middle.
-        if seq_delta >= 2 {
-            let idx = ((seq_delta - 2) as usize).min(FULL_SUMS.len() - 1);
-            old += val * FULL_SUMS[idx];
-        }
-
-        // Accumulate the current period duration into @cur.
-        cur += val * normalized_dur(now % half_life);
-    } else {
-        cur += val * normalized_dur(now - val_at);
-    }
-
-    //
-    // The following is the blending part of BPF ravg_read().
-    //
-    old * (1.0 - normalized_dur(now % half_life) / 2.0) + cur / 2.0
-}
diff --git a/tools/sched_ext/scx_layered/Cargo.toml b/tools/sched_ext/scx_layered/Cargo.toml
index 6ba1b98d2..6567ec748 100644
--- a/tools/sched_ext/scx_layered/Cargo.toml
+++ b/tools/sched_ext/scx_layered/Cargo.toml
@@ -7,6 +7,7 @@ description = "Userspace scheduling with BPF for Ads"
 license = "GPL-2.0-only"
 
 [dependencies]
+scx_utils = "0.1"
 anyhow = "1.0"
 bitvec = "1.0"
 clap = { version = "4.1", features = ["derive", "env", "unicode", "wrap_help"] }
diff --git a/tools/sched_ext/scx_layered/src/main.rs b/tools/sched_ext/scx_layered/src/main.rs
index 8f9e1a7ba..3562fb8bb 100644
--- a/tools/sched_ext/scx_layered/src/main.rs
+++ b/tools/sched_ext/scx_layered/src/main.rs
@@ -33,6 +33,7 @@
 use log::debug;
 use log::info;
 use log::trace;
+use scx_utils::ravg::ravg_read;
 use serde::Deserialize;
 use serde::Serialize;
 
@@ -49,8 +50,6 @@
 const NR_LAYER_MATCH_KINDS: usize = layered_sys::layer_match_kind_NR_LAYER_MATCH_KINDS as usize;
 const CORE_CACHE_LEVEL: u32 = 2;
 
-include!("../../ravg_read.rs.h");
-
 lazy_static::lazy_static! {
     static ref NR_POSSIBLE_CPUS: usize = libbpf_rs::num_possible_cpus().unwrap();
     static ref USAGE_DECAY: f64 = 0.5f64.powf(1.0 / USAGE_HALF_LIFE_F64);
diff --git a/tools/sched_ext/scx_rusty/Cargo.toml b/tools/sched_ext/scx_rusty/Cargo.toml
index b0edd3b93..77c0205c2 100644
--- a/tools/sched_ext/scx_rusty/Cargo.toml
+++ b/tools/sched_ext/scx_rusty/Cargo.toml
@@ -7,6 +7,7 @@ description = "Userspace scheduling with BPF"
 license = "GPL-2.0-only"
 
 [dependencies]
+scx_utils = "0.1"
 anyhow = "1.0.65"
 bitvec = { version = "1.0", features = ["serde"] }
 clap = { version = "4.1", features = ["derive", "env", "unicode", "wrap_help"] }
diff --git a/tools/sched_ext/scx_rusty/src/main.rs b/tools/sched_ext/scx_rusty/src/main.rs
index 841f9a28a..57c568b3e 100644
--- a/tools/sched_ext/scx_rusty/src/main.rs
+++ b/tools/sched_ext/scx_rusty/src/main.rs
@@ -33,13 +33,12 @@
 use log::trace;
 use log::warn;
 use ordered_float::OrderedFloat;
+use scx_utils::ravg::ravg_read;
 
 const RAVG_FRAC_BITS: u32 = rusty_sys::ravg_consts_RAVG_FRAC_BITS;
 const MAX_DOMS: usize = rusty_sys::consts_MAX_DOMS as usize;
 const MAX_CPUS: usize = rusty_sys::consts_MAX_CPUS as usize;
 
-include!("../../ravg_read.rs.h");
-
 /// scx_rusty: A multi-domain BPF / userspace hybrid scheduler
 ///
 /// The BPF part does simple vtime or round robin scheduling in each domain
-- 
2.43.0.232.ge79552d197

