From fd1a610b5bf37d0d7eaf439620a2eb9f822f5a58 Mon Sep 17 00:00:00 2001
From: Thinker Lee <thinker.li@gmail.com>
Date: Tue, 16 Jan 2024 18:05:12 -0800
Subject: [PATCH 101/149] selftests/scx: Check if MAYBE_NULL works for the 2nd
 argument of .dispatch.

Check if the verifier can catch the invalid access if a .dispatch
program doesn't check the 2nd argument before accessing the pointed
memory. Also check if the verifier allows a program which check the
2nd argument before accessing the pointed memory.
---
 tools/testing/selftests/scx/Makefile          |  5 ++-
 tools/testing/selftests/scx/maybe_null.bpf.c  | 26 ++++++++++++
 tools/testing/selftests/scx/maybe_null.c      | 42 +++++++++++++++++++
 .../selftests/scx/maybe_null_fail.bpf.c       | 25 +++++++++++
 tools/testing/selftests/scx/runner.c          |  2 +
 5 files changed, 99 insertions(+), 1 deletion(-)
 create mode 100644 tools/testing/selftests/scx/maybe_null.bpf.c
 create mode 100644 tools/testing/selftests/scx/maybe_null.c
 create mode 100644 tools/testing/selftests/scx/maybe_null_fail.bpf.c

diff --git a/tools/testing/selftests/scx/Makefile b/tools/testing/selftests/scx/Makefile
index c3bf6c19d..8d10a11c3 100644
--- a/tools/testing/selftests/scx/Makefile
+++ b/tools/testing/selftests/scx/Makefile
@@ -161,6 +161,7 @@ auto-test-targets :=			\
 	ddsp_bogus_dsq_fail		\
 	ddsp_vtimelocal_fail		\
 	init_enable_count		\
+	maybe_null			\
 	minimal				\
 	select_cpu_dfl			\
 	select_cpu_dfl_nodispatch	\
@@ -175,6 +176,8 @@ testcase-targets := $(addsuffix .o,$(addprefix $(SCXOBJ_DIR)/,$(auto-test-target
 $(SCXOBJ_DIR)/runner.o: runner.c | $(SCXOBJ_DIR)
 	$(CC) $(CFLAGS) -c $< -o $@
 
+$(SCXOBJ_DIR)/maybe_null.o: $(INCLUDE_DIR)/maybe_null_fail.bpf.skel.h
+
 # Create all of the test targets object files, whose testcase objects will be
 # registered into the runner in ELF constructors.
 #
@@ -188,7 +191,7 @@ $(testcase-targets): $(SCXOBJ_DIR)/%.o: %.c $(SCXOBJ_DIR)/runner.o $$(if $$(wild
 
 runner: $(SCXOBJ_DIR)/runner.o $(BPFOBJ) $(testcase-targets)
 	@echo "$(testcase-targets)"
-	$(CC) $(CFLAGS) $(LDFLAGS) -o $@ $^
+	$(CC) $(CFLAGS) -o $@ $^ $(LDFLAGS)
 
 TEST_GEN_PROGS := runner
 
diff --git a/tools/testing/selftests/scx/maybe_null.bpf.c b/tools/testing/selftests/scx/maybe_null.bpf.c
new file mode 100644
index 000000000..d45a77281
--- /dev/null
+++ b/tools/testing/selftests/scx/maybe_null.bpf.c
@@ -0,0 +1,26 @@
+/* SPDX-License-Identifier: GPL-2.0 */
+/*
+ * Copyright (c) 2023 Meta Platforms, Inc. and affiliates.
+ */
+
+#include <scx/common.bpf.h>
+
+char _license[] SEC("license") = "GPL";
+
+u64 vtime_test;
+
+void BPF_STRUCT_OPS(maybe_null_running, struct task_struct *p)
+{}
+
+void BPF_STRUCT_OPS(maybe_null_success_dispatch, s32 cpu, struct task_struct *p)
+{
+        if (p != NULL)
+          vtime_test = p->scx.dsq_vtime;
+}
+
+SEC(".struct_ops.link")
+struct sched_ext_ops maybe_null_success = {
+        .dispatch               = maybe_null_success_dispatch,
+	.enable			= maybe_null_running,
+	.name			= "minimal",
+};
diff --git a/tools/testing/selftests/scx/maybe_null.c b/tools/testing/selftests/scx/maybe_null.c
new file mode 100644
index 000000000..578820d21
--- /dev/null
+++ b/tools/testing/selftests/scx/maybe_null.c
@@ -0,0 +1,42 @@
+/* SPDX-License-Identifier: GPL-2.0 */
+/*
+ * Copyright (c) 2023 Meta Platforms, Inc. and affiliates.
+ * Copyright (c) 2023 David Vernet <dvernet@meta.com>
+ * Copyright (c) 2023 Tejun Heo <tj@kernel.org>
+ */
+#include <bpf/bpf.h>
+#include <scx/common.h>
+#include <sys/wait.h>
+#include <unistd.h>
+#include "maybe_null.bpf.skel.h"
+#include "maybe_null_fail.bpf.skel.h"
+#include "scx_test.h"
+
+static enum scx_test_status run(void *ctx)
+{
+        struct maybe_null *skel;
+        struct maybe_null_fail *fail_skel;
+
+        skel = maybe_null__open_and_load();
+        if (!skel) {
+                SCX_ERR("Failed to open and load maybe_null skel");
+                return SCX_TEST_FAIL;
+        }
+        maybe_null__destroy(skel);
+
+        fail_skel = maybe_null_fail__open_and_load();
+        if (fail_skel) {
+                maybe_null_fail__destroy(fail_skel);
+                SCX_ERR("Should failed to open and load maybe_null_fail skel");
+                return SCX_TEST_FAIL;
+        }
+
+	return SCX_TEST_PASS;
+}
+
+struct scx_test maybe_null = {
+	.name = "maybe_null",
+	.description = "Verify if PTR_MAYBE_NULL work for .dispatch",
+	.run = run,
+};
+REGISTER_SCX_TEST(&maybe_null)
diff --git a/tools/testing/selftests/scx/maybe_null_fail.bpf.c b/tools/testing/selftests/scx/maybe_null_fail.bpf.c
new file mode 100644
index 000000000..c09a5b7ec
--- /dev/null
+++ b/tools/testing/selftests/scx/maybe_null_fail.bpf.c
@@ -0,0 +1,25 @@
+/* SPDX-License-Identifier: GPL-2.0 */
+/*
+ * Copyright (c) 2023 Meta Platforms, Inc. and affiliates.
+ */
+
+#include <scx/common.bpf.h>
+
+char _license[] SEC("license") = "GPL";
+
+u64 vtime_test;
+
+void BPF_STRUCT_OPS(maybe_null_running, struct task_struct *p)
+{}
+
+void BPF_STRUCT_OPS(maybe_null_fail_dispatch, s32 cpu, struct task_struct *p)
+{
+          vtime_test = p->scx.dsq_vtime;
+}
+
+SEC(".struct_ops.link")
+struct sched_ext_ops maybe_null_fail = {
+        .dispatch               = maybe_null_fail_dispatch,
+	.enable			= maybe_null_running,
+	.name			= "minimal",
+};
diff --git a/tools/testing/selftests/scx/runner.c b/tools/testing/selftests/scx/runner.c
index cfb57f6a0..17262c30b 100644
--- a/tools/testing/selftests/scx/runner.c
+++ b/tools/testing/selftests/scx/runner.c
@@ -55,6 +55,8 @@ static const char *status_to_result(enum scx_test_status status)
 	case SCX_TEST_FAIL:
 		return "not ok";
 	}
+
+        return NULL;
 }
 
 static void print_test_result(const struct scx_test *test,
-- 
2.43.0.232.ge79552d197

