From a2955af6b4a19bbaae98fe28005637aa14ad2261 Mon Sep 17 00:00:00 2001
From: David Vernet <void@manifault.com>
Date: Sun, 28 Jan 2024 22:18:39 -0600
Subject: [PATCH 117/126] scx: Update spaces -> tabs for maybe_null testcase

This testcase was mixing tabs and spaces, let's make it use tabs.

Signed-off-by: David Vernet <void@manifault.com>
---
 tools/testing/selftests/scx/maybe_null.bpf.c  |  6 ++--
 tools/testing/selftests/scx/maybe_null.c      | 28 +++++++++----------
 .../selftests/scx/maybe_null_fail.bpf.c       |  4 +--
 3 files changed, 19 insertions(+), 19 deletions(-)

diff --git a/tools/testing/selftests/scx/maybe_null.bpf.c b/tools/testing/selftests/scx/maybe_null.bpf.c
index 1e9b1fded..ad5e69422 100644
--- a/tools/testing/selftests/scx/maybe_null.bpf.c
+++ b/tools/testing/selftests/scx/maybe_null.bpf.c
@@ -14,13 +14,13 @@ void BPF_STRUCT_OPS(maybe_null_running, struct task_struct *p)
 
 void BPF_STRUCT_OPS(maybe_null_success_dispatch, s32 cpu, struct task_struct *p)
 {
-        if (p != NULL)
-          vtime_test = p->scx.dsq_vtime;
+	if (p != NULL)
+		vtime_test = p->scx.dsq_vtime;
 }
 
 SEC(".struct_ops.link")
 struct sched_ext_ops maybe_null_success = {
-        .dispatch               = maybe_null_success_dispatch,
+	.dispatch               = maybe_null_success_dispatch,
 	.enable			= maybe_null_running,
 	.name			= "minimal",
 };
diff --git a/tools/testing/selftests/scx/maybe_null.c b/tools/testing/selftests/scx/maybe_null.c
index 4f093a5ee..3f26b784f 100644
--- a/tools/testing/selftests/scx/maybe_null.c
+++ b/tools/testing/selftests/scx/maybe_null.c
@@ -12,22 +12,22 @@
 
 static enum scx_test_status run(void *ctx)
 {
-        struct maybe_null *skel;
-        struct maybe_null_fail *fail_skel;
+	struct maybe_null *skel;
+	struct maybe_null_fail *fail_skel;
 
-        skel = maybe_null__open_and_load();
-        if (!skel) {
-                SCX_ERR("Failed to open and load maybe_null skel");
-                return SCX_TEST_FAIL;
-        }
-        maybe_null__destroy(skel);
+	skel = maybe_null__open_and_load();
+	if (!skel) {
+		SCX_ERR("Failed to open and load maybe_null skel");
+		return SCX_TEST_FAIL;
+	}
+	maybe_null__destroy(skel);
 
-        fail_skel = maybe_null_fail__open_and_load();
-        if (fail_skel) {
-                maybe_null_fail__destroy(fail_skel);
-                SCX_ERR("Should failed to open and load maybe_null_fail skel");
-                return SCX_TEST_FAIL;
-        }
+	fail_skel = maybe_null_fail__open_and_load();
+	if (fail_skel) {
+		maybe_null_fail__destroy(fail_skel);
+		SCX_ERR("Should failed to open and load maybe_null_fail skel");
+		return SCX_TEST_FAIL;
+	}
 
 	return SCX_TEST_PASS;
 }
diff --git a/tools/testing/selftests/scx/maybe_null_fail.bpf.c b/tools/testing/selftests/scx/maybe_null_fail.bpf.c
index bc99c13ce..1607fe07b 100644
--- a/tools/testing/selftests/scx/maybe_null_fail.bpf.c
+++ b/tools/testing/selftests/scx/maybe_null_fail.bpf.c
@@ -14,12 +14,12 @@ void BPF_STRUCT_OPS(maybe_null_running, struct task_struct *p)
 
 void BPF_STRUCT_OPS(maybe_null_fail_dispatch, s32 cpu, struct task_struct *p)
 {
-          vtime_test = p->scx.dsq_vtime;
+	vtime_test = p->scx.dsq_vtime;
 }
 
 SEC(".struct_ops.link")
 struct sched_ext_ops maybe_null_fail = {
-        .dispatch               = maybe_null_fail_dispatch,
+	.dispatch               = maybe_null_fail_dispatch,
 	.enable			= maybe_null_running,
 	.name			= "minimal",
 };
-- 
2.43.0.232.ge79552d197

