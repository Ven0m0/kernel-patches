From a63141a08017f946199f23ded85b99963c3f3150 Mon Sep 17 00:00:00 2001
From: Tejun Heo <tj@kernel.org>
Date: Sun, 31 Dec 2023 06:51:41 +0900
Subject: [PATCH 075/130] scx: Use READ/WRITE_ONCE() for
 scx_watchdog_timeout/timestamp

They're accessed without any locking and check_rq_for_timeouts() seems to
assume that last_runnable doesn't get fetched multipled times which isn't
true without READ_ONCE().

Signed-off-by: Tejun Heo <tj@kernel.org>
---
 kernel/sched/ext.c | 11 +++++++----
 kernel/sched/ext.h |  5 +++--
 2 files changed, 10 insertions(+), 6 deletions(-)

diff --git a/kernel/sched/ext.c b/kernel/sched/ext.c
index 631e5dfb7..096a025da 100644
--- a/kernel/sched/ext.c
+++ b/kernel/sched/ext.c
@@ -2244,7 +2244,7 @@ static void scx_watchdog_workfn(struct work_struct *work)
 {
 	int cpu;
 
-	scx_watchdog_timestamp = jiffies;
+	WRITE_ONCE(scx_watchdog_timestamp, jiffies);
 
 	for_each_online_cpu(cpu) {
 		if (unlikely(check_rq_for_timeouts(cpu_rq(cpu))))
@@ -3321,6 +3321,7 @@ static int scx_ops_enable(struct sched_ext_ops *ops)
 {
 	struct scx_task_iter sti;
 	struct task_struct *p;
+	unsigned long timeout;
 	int i, ret;
 
 	mutex_lock(&scx_ops_enable_mutex);
@@ -3402,11 +3403,13 @@ static int scx_ops_enable(struct sched_ext_ops *ops)
 		goto err_disable;
 	}
 
-	scx_watchdog_timeout = SCX_WATCHDOG_MAX_TIMEOUT;
 	if (ops->timeout_ms)
-		scx_watchdog_timeout = msecs_to_jiffies(ops->timeout_ms);
+		timeout = msecs_to_jiffies(ops->timeout_ms);
+	else
+		timeout = SCX_WATCHDOG_MAX_TIMEOUT;
 
-	scx_watchdog_timestamp = jiffies;
+	WRITE_ONCE(scx_watchdog_timeout, timeout);
+	WRITE_ONCE(scx_watchdog_timestamp, jiffies);
 	queue_delayed_work(system_unbound_wq, &scx_watchdog_work,
 			   scx_watchdog_timeout / 2);
 
diff --git a/kernel/sched/ext.h b/kernel/sched/ext.h
index a8f72efe3..3055efbfa 100644
--- a/kernel/sched/ext.h
+++ b/kernel/sched/ext.h
@@ -163,8 +163,9 @@ static inline void scx_notify_sched_tick(void)
 	if (!scx_enabled())
 		return;
 
-	last_check = scx_watchdog_timestamp;
-	if (unlikely(time_after(jiffies, last_check + scx_watchdog_timeout))) {
+	last_check = READ_ONCE(scx_watchdog_timestamp);
+	if (unlikely(time_after(jiffies,
+				last_check + READ_ONCE(scx_watchdog_timeout)))) {
 		u32 dur_ms = jiffies_to_msecs(jiffies - last_check);
 
 		scx_ops_error_kind(SCX_EXIT_ERROR_STALL,
-- 
2.43.0.232.ge79552d197

