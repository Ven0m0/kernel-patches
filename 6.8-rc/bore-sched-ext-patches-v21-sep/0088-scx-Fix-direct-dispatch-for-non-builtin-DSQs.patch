From 9e0e37ec394a46a07b1fa0b836f77789ed40c52d Mon Sep 17 00:00:00 2001
From: David Vernet <void@manifault.com>
Date: Tue, 9 Jan 2024 14:24:37 -0600
Subject: [PATCH 088/130] scx: Fix direct dispatch for non-builtin DSQs

If we've done a direct dispatch from ops.select_cpu(), we can currently
hang the host if we dispatch to a non-local DSQ. This is because we
circumvent some important checks, such as whether we should be bypassing
ops.enqueue() and dispatching directly to the local or global DSQ.

Doing a local dispatch now doesn't hang the host because we happen to be
dispatching to a safe, builtin DSQ. Let's instead update the logic to
only do the direct dispatch after these critical checks.

Signed-off-by: David Vernet <void@manifault.com>
---
 kernel/sched/ext.c | 14 ++++++++++----
 1 file changed, 10 insertions(+), 4 deletions(-)

diff --git a/kernel/sched/ext.c b/kernel/sched/ext.c
index 2a552efee..c10a2597a 100644
--- a/kernel/sched/ext.c
+++ b/kernel/sched/ext.c
@@ -681,6 +681,13 @@ static void dispatch_enqueue(struct scx_dispatch_q *dsq, struct task_struct *p,
 	dsq->nr++;
 	p->scx.dsq = dsq;
 
+	/*
+	 * scx.ddsq_id is only relevant on the direct dispatch path, but we
+	 * clear it here because the direct dispatch verdict may be overridden
+	 * on the enqueue path during e.g. bypass.
+	 */
+	p->scx.ddsq_id = SCX_DSQ_INVALID;
+
 	/*
 	 * We're transitioning out of QUEUEING or DISPATCHING. store_release to
 	 * match waiters' load_acquire.
@@ -854,7 +861,6 @@ static void direct_dispatch(struct task_struct *p, u64 enq_flags)
 
 	dsq = find_dsq_for_dispatch(task_rq(p), p->scx.ddsq_id, p);
 	dispatch_enqueue(dsq, p, enq_flags | SCX_ENQ_CLEAR_OPSS);
-	p->scx.ddsq_id = SCX_DSQ_INVALID;
 }
 
 static bool test_rq_online(struct rq *rq)
@@ -874,9 +880,6 @@ static void do_enqueue_task(struct rq *rq, struct task_struct *p, u64 enq_flags,
 
 	WARN_ON_ONCE(!(p->scx.flags & SCX_TASK_QUEUED));
 
-	if (p->scx.ddsq_id != SCX_DSQ_INVALID)
-		goto direct;
-
 	/* rq migration */
 	if (sticky_cpu == cpu_of(rq))
 		goto local_norefill;
@@ -896,6 +899,9 @@ static void do_enqueue_task(struct rq *rq, struct task_struct *p, u64 enq_flags,
 			goto global;
 	}
 
+	if (p->scx.ddsq_id != SCX_DSQ_INVALID)
+		goto direct;
+
 	/* see %SCX_OPS_ENQ_EXITING */
 	if (!static_branch_unlikely(&scx_ops_enq_exiting) &&
 	    unlikely(p->flags & PF_EXITING))
-- 
2.43.0.232.ge79552d197

