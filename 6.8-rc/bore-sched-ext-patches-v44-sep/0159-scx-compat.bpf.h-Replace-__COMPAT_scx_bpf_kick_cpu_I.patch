From a14203f6023fa6f214153f720f7f22cfa31c5e09 Mon Sep 17 00:00:00 2001
From: Tejun Heo <tj@kernel.org>
Date: Wed, 6 Mar 2024 07:20:50 -1000
Subject: [PATCH 159/161] scx/compat.bpf.h: Replace
 __COMPAT_scx_bpf_kick_cpu_IDLE() with __COMPAT_SCX_KICK_IDLE

This is less clumsy and more in line with __COMPAT_SCX_OPS_SWITCH_PARTIAL.
---
 tools/sched_ext/include/scx/compat.bpf.h | 13 +++++++++----
 tools/sched_ext/scx_central.bpf.c        |  2 +-
 tools/sched_ext/scx_qmap.bpf.c           |  2 +-
 3 files changed, 11 insertions(+), 6 deletions(-)

diff --git a/tools/sched_ext/include/scx/compat.bpf.h b/tools/sched_ext/include/scx/compat.bpf.h
index 9759cd04f..5a0513046 100644
--- a/tools/sched_ext/include/scx/compat.bpf.h
+++ b/tools/sched_ext/include/scx/compat.bpf.h
@@ -7,15 +7,20 @@
 #ifndef __SCX_COMPAT_BPF_H
 #define __SCX_COMPAT_BPF_H
 
-/* SCX_KICK_IDLE is a later addition, use if available */
-static inline void __COMPAT_scx_bpf_kick_cpu_IDLE(s32 cpu)
+static inline u64 __COMPAT_SCX_KICK_IDLE(void)
 {
 	if (bpf_core_enum_value_exists(enum scx_kick_flags, SCX_KICK_IDLE))
-		scx_bpf_kick_cpu(cpu, SCX_KICK_IDLE);
+		return SCX_KICK_IDLE;
 	else
-		scx_bpf_kick_cpu(cpu, 0);
+		return 0;
 }
 
+/*
+ * %SCX_KICK_IDLE is a later addition. To support both before and after, use
+ * %__COMPAT_SCX_KICK_IDLE which becomes 0 on kernels which don't support it.
+ */
+#define __COMPAT_SCX_KICK_IDLE __COMPAT_SCX_KICK_IDLE()
+
 /*
  * scx_switch_all() was replaced by %SCX_OPS_SWITCH_PARTIAL. See
  * %__COMPAT_SCX_OPS_SWITCH_PARTIAL in compat.h.
diff --git a/tools/sched_ext/scx_central.bpf.c b/tools/sched_ext/scx_central.bpf.c
index a07b36a1a..1b2ed7e4d 100644
--- a/tools/sched_ext/scx_central.bpf.c
+++ b/tools/sched_ext/scx_central.bpf.c
@@ -175,7 +175,7 @@ static bool dispatch_to_cpu(s32 cpu)
 		scx_bpf_dispatch(p, SCX_DSQ_LOCAL_ON | cpu, SCX_SLICE_INF, 0);
 
 		if (cpu != central_cpu)
-			__COMPAT_scx_bpf_kick_cpu_IDLE(cpu);
+			scx_bpf_kick_cpu(cpu, __COMPAT_SCX_KICK_IDLE);
 
 		bpf_task_release(p);
 		return true;
diff --git a/tools/sched_ext/scx_qmap.bpf.c b/tools/sched_ext/scx_qmap.bpf.c
index 5fd468b75..a7b0b385c 100644
--- a/tools/sched_ext/scx_qmap.bpf.c
+++ b/tools/sched_ext/scx_qmap.bpf.c
@@ -192,7 +192,7 @@ void BPF_STRUCT_OPS(qmap_enqueue, struct task_struct *p, u64 enq_flags)
 		scx_bpf_dispatch(p, SCX_DSQ_GLOBAL, 0, enq_flags);
 		cpu = scx_bpf_pick_idle_cpu(p->cpus_ptr, 0);
 		if (cpu >= 0)
-			__COMPAT_scx_bpf_kick_cpu_IDLE(cpu);
+			scx_bpf_kick_cpu(cpu, __COMPAT_SCX_KICK_IDLE);
 		return;
 	}
 
-- 
2.43.0.232.ge79552d197

