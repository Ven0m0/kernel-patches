From 4f14c34d750feb4955dffb930e414b10a8ca0077 Mon Sep 17 00:00:00 2001
From: Tejun Heo <tj@kernel.org>
Date: Tue, 5 Mar 2024 15:04:50 -1000
Subject: [PATCH 156/161] tools/sched_ext, tools/testing/selftests/sched_ext:
 Fix build after scx_bpf_switch_all() removal

scx_bpf_switch_all() is replaced by SCX_OPS_SWITCH_PARTIAL flag. Remove it
from selftests. Add and use __COMPAT_scx_bpf_switch_all() in the example
schedulers so that they can load on kernels before and after. This means
that the example schedulers will always attach all tasks ignoring the user
request. This will be fixed in the next commit.
---
 tools/sched_ext/include/scx/common.bpf.h               |  1 -
 tools/sched_ext/include/scx/compat.bpf.h               | 10 ++++++++++
 tools/sched_ext/scx_central.bpf.c                      |  2 +-
 tools/sched_ext/scx_flatcg.bpf.c                       |  2 +-
 tools/sched_ext/scx_qmap.bpf.c                         |  2 +-
 tools/sched_ext/scx_simple.bpf.c                       |  2 +-
 .../selftests/sched_ext/ddsp_bogus_dsq_fail.bpf.c      |  8 --------
 .../selftests/sched_ext/ddsp_vtimelocal_fail.bpf.c     |  8 --------
 .../selftests/sched_ext/enq_last_no_enq_fails.bpf.c    |  8 --------
 .../selftests/sched_ext/enq_select_cpu_fails.bpf.c     |  8 --------
 .../selftests/sched_ext/init_enable_count.bpf.c        |  9 ---------
 tools/testing/selftests/sched_ext/select_cpu_dfl.bpf.c |  8 --------
 .../sched_ext/select_cpu_dfl_nodispatch.bpf.c          |  8 --------
 .../selftests/sched_ext/select_cpu_dispatch.bpf.c      |  8 --------
 .../sched_ext/select_cpu_dispatch_bad_dsq.bpf.c        |  8 --------
 .../sched_ext/select_cpu_dispatch_dbl_dsp.bpf.c        |  8 --------
 .../testing/selftests/sched_ext/select_cpu_vtime.bpf.c |  2 --
 17 files changed, 14 insertions(+), 88 deletions(-)

diff --git a/tools/sched_ext/include/scx/common.bpf.h b/tools/sched_ext/include/scx/common.bpf.h
index 54e51a8fd..6b675160c 100644
--- a/tools/sched_ext/include/scx/common.bpf.h
+++ b/tools/sched_ext/include/scx/common.bpf.h
@@ -53,7 +53,6 @@ void ___scx_bpf_error_format_checker(const char *fmt, ...) {}
 	___scx_bpf_error_format_checker(fmt, ##args);				\
 })
 
-void scx_bpf_switch_all(void) __ksym;
 s32 scx_bpf_create_dsq(u64 dsq_id, s32 node) __ksym;
 bool scx_bpf_consume(u64 dsq_id) __ksym;
 void scx_bpf_dispatch(struct task_struct *p, u64 dsq_id, u64 slice, u64 enq_flags) __ksym;
diff --git a/tools/sched_ext/include/scx/compat.bpf.h b/tools/sched_ext/include/scx/compat.bpf.h
index 2465ded0a..23959c837 100644
--- a/tools/sched_ext/include/scx/compat.bpf.h
+++ b/tools/sched_ext/include/scx/compat.bpf.h
@@ -7,6 +7,7 @@
 #ifndef __SCX_COMPAT_BPF_H
 #define __SCX_COMPAT_BPF_H
 
+/* SCX_KICK_IDLE is a later addition, use if available */
 static inline void __COMPAT_scx_bpf_kick_cpu_IDLE(s32 cpu)
 {
 	if (bpf_core_enum_value_exists(enum scx_kick_flags, SCX_KICK_IDLE))
@@ -15,4 +16,13 @@ static inline void __COMPAT_scx_bpf_kick_cpu_IDLE(s32 cpu)
 		scx_bpf_kick_cpu(cpu, 0);
 }
 
+/* scx_switch_all() was replaced by SCX_OPS_SWITCH_PARTIAL */
+void scx_bpf_switch_all(void) __ksym __weak;
+
+static inline void __COMPAT_scx_bpf_switch_all(void)
+{
+	if (!bpf_core_enum_value_exists(enum scx_ops_flags, SCX_OPS_SWITCH_PARTIAL))
+		scx_bpf_switch_all();
+}
+
 #endif
diff --git a/tools/sched_ext/scx_central.bpf.c b/tools/sched_ext/scx_central.bpf.c
index 7c629a3d6..2ecb384c7 100644
--- a/tools/sched_ext/scx_central.bpf.c
+++ b/tools/sched_ext/scx_central.bpf.c
@@ -307,7 +307,7 @@ int BPF_STRUCT_OPS_SLEEPABLE(central_init)
 	int ret;
 
 	if (!switch_partial)
-		scx_bpf_switch_all();
+		__COMPAT_scx_bpf_switch_all();
 
 	ret = scx_bpf_create_dsq(FALLBACK_DSQ_ID, -1);
 	if (ret)
diff --git a/tools/sched_ext/scx_flatcg.bpf.c b/tools/sched_ext/scx_flatcg.bpf.c
index d6a947bc9..41695e52d 100644
--- a/tools/sched_ext/scx_flatcg.bpf.c
+++ b/tools/sched_ext/scx_flatcg.bpf.c
@@ -930,7 +930,7 @@ void BPF_STRUCT_OPS(fcg_cgroup_move, struct task_struct *p,
 s32 BPF_STRUCT_OPS(fcg_init)
 {
 	if (!switch_partial)
-		scx_bpf_switch_all();
+		__COMPAT_scx_bpf_switch_all();
 	return 0;
 }
 
diff --git a/tools/sched_ext/scx_qmap.bpf.c b/tools/sched_ext/scx_qmap.bpf.c
index 79cae5353..5fd468b75 100644
--- a/tools/sched_ext/scx_qmap.bpf.c
+++ b/tools/sched_ext/scx_qmap.bpf.c
@@ -374,7 +374,7 @@ s32 BPF_STRUCT_OPS(qmap_init_task, struct task_struct *p,
 s32 BPF_STRUCT_OPS(qmap_init)
 {
 	if (!switch_partial)
-		scx_bpf_switch_all();
+		__COMPAT_scx_bpf_switch_all();
 	return 0;
 }
 
diff --git a/tools/sched_ext/scx_simple.bpf.c b/tools/sched_ext/scx_simple.bpf.c
index 95035aa29..1d5a830bc 100644
--- a/tools/sched_ext/scx_simple.bpf.c
+++ b/tools/sched_ext/scx_simple.bpf.c
@@ -131,7 +131,7 @@ void BPF_STRUCT_OPS(simple_enable, struct task_struct *p)
 s32 BPF_STRUCT_OPS_SLEEPABLE(simple_init)
 {
 	if (!switch_partial)
-		scx_bpf_switch_all();
+		__COMPAT_scx_bpf_switch_all();
 
 	return scx_bpf_create_dsq(SHARED_DSQ, -1);
 }
diff --git a/tools/testing/selftests/sched_ext/ddsp_bogus_dsq_fail.bpf.c b/tools/testing/selftests/sched_ext/ddsp_bogus_dsq_fail.bpf.c
index dd32b1899..0fa67ba63 100644
--- a/tools/testing/selftests/sched_ext/ddsp_bogus_dsq_fail.bpf.c
+++ b/tools/testing/selftests/sched_ext/ddsp_bogus_dsq_fail.bpf.c
@@ -33,18 +33,10 @@ void BPF_STRUCT_OPS(ddsp_bogus_dsq_fail_exit, struct scx_exit_info *ei)
 	uei_record(&uei, ei);
 }
 
-s32 BPF_STRUCT_OPS(ddsp_bogus_dsq_fail_init)
-{
-	scx_bpf_switch_all();
-
-	return 0;
-}
-
 SEC(".struct_ops.link")
 struct sched_ext_ops ddsp_bogus_dsq_fail_ops = {
 	.select_cpu		= ddsp_bogus_dsq_fail_select_cpu,
 	.exit			= ddsp_bogus_dsq_fail_exit,
-	.init			= ddsp_bogus_dsq_fail_init,
 	.name			= "ddsp_bogus_dsq_fail",
 	.timeout_ms		= 1000U,
 };
diff --git a/tools/testing/selftests/sched_ext/ddsp_vtimelocal_fail.bpf.c b/tools/testing/selftests/sched_ext/ddsp_vtimelocal_fail.bpf.c
index 9b21c1d57..a86f365e6 100644
--- a/tools/testing/selftests/sched_ext/ddsp_vtimelocal_fail.bpf.c
+++ b/tools/testing/selftests/sched_ext/ddsp_vtimelocal_fail.bpf.c
@@ -30,17 +30,9 @@ void BPF_STRUCT_OPS(ddsp_vtimelocal_fail_exit, struct scx_exit_info *ei)
 	uei_record(&uei, ei);
 }
 
-s32 BPF_STRUCT_OPS(ddsp_vtimelocal_fail_init)
-{
-	scx_bpf_switch_all();
-
-	return 0;
-}
-
 SEC(".struct_ops.link")
 struct sched_ext_ops ddsp_vtimelocal_fail_ops = {
 	.select_cpu		= ddsp_vtimelocal_fail_select_cpu,
-	.init			= ddsp_vtimelocal_fail_init,
 	.exit			= ddsp_vtimelocal_fail_exit,
 	.name			= "ddsp_vtimelocal_fail",
 	.timeout_ms		= 1000U,
diff --git a/tools/testing/selftests/sched_ext/enq_last_no_enq_fails.bpf.c b/tools/testing/selftests/sched_ext/enq_last_no_enq_fails.bpf.c
index 4b0f84568..b0b99531d 100644
--- a/tools/testing/selftests/sched_ext/enq_last_no_enq_fails.bpf.c
+++ b/tools/testing/selftests/sched_ext/enq_last_no_enq_fails.bpf.c
@@ -12,16 +12,8 @@
 
 char _license[] SEC("license") = "GPL";
 
-s32 BPF_STRUCT_OPS(enq_last_no_enq_fails_init)
-{
-	scx_bpf_switch_all();
-
-	return 0;
-}
-
 SEC(".struct_ops.link")
 struct sched_ext_ops enq_last_no_enq_fails_ops = {
-	.init			= enq_last_no_enq_fails_init,
 	.name			= "enq_last_no_enq_fails",
 	/* Need to define ops.enqueue() with SCX_OPS_ENQ_LAST */
 	.flags			= SCX_OPS_ENQ_LAST,
diff --git a/tools/testing/selftests/sched_ext/enq_select_cpu_fails.bpf.c b/tools/testing/selftests/sched_ext/enq_select_cpu_fails.bpf.c
index 40ea393b2..b3dfc1033 100644
--- a/tools/testing/selftests/sched_ext/enq_select_cpu_fails.bpf.c
+++ b/tools/testing/selftests/sched_ext/enq_select_cpu_fails.bpf.c
@@ -34,18 +34,10 @@ void BPF_STRUCT_OPS(enq_select_cpu_fails_enqueue, struct task_struct *p,
 	scx_bpf_dispatch(p, SCX_DSQ_GLOBAL, SCX_SLICE_DFL, enq_flags);
 }
 
-s32 BPF_STRUCT_OPS(enq_select_cpu_fails_init)
-{
-	scx_bpf_switch_all();
-
-	return 0;
-}
-
 SEC(".struct_ops.link")
 struct sched_ext_ops enq_select_cpu_fails_ops = {
 	.select_cpu		= enq_select_cpu_fails_select_cpu,
 	.enqueue		= enq_select_cpu_fails_enqueue,
-	.init			= enq_select_cpu_fails_init,
 	.name			= "enq_select_cpu_fails",
 	.timeout_ms		= 1000U,
 };
diff --git a/tools/testing/selftests/sched_ext/init_enable_count.bpf.c b/tools/testing/selftests/sched_ext/init_enable_count.bpf.c
index a5053aeb0..ad58e8164 100644
--- a/tools/testing/selftests/sched_ext/init_enable_count.bpf.c
+++ b/tools/testing/selftests/sched_ext/init_enable_count.bpf.c
@@ -44,20 +44,11 @@ void BPF_STRUCT_OPS(cnt_disable, struct task_struct *p)
 	__sync_fetch_and_add(&disable_cnt, 1);
 }
 
-s32 BPF_STRUCT_OPS(cnt_init)
-{
-	if (switch_all)
-		scx_bpf_switch_all();
-
-	return 0;
-}
-
 SEC(".struct_ops.link")
 struct sched_ext_ops init_enable_count_ops = {
 	.init_task	= cnt_init_task,
 	.exit_task	= cnt_exit_task,
 	.enable		= cnt_enable,
 	.disable	= cnt_disable,
-	.init		= cnt_init,
 	.name		= "init_enable_count",
 };
diff --git a/tools/testing/selftests/sched_ext/select_cpu_dfl.bpf.c b/tools/testing/selftests/sched_ext/select_cpu_dfl.bpf.c
index f2fa80628..2ed2991af 100644
--- a/tools/testing/selftests/sched_ext/select_cpu_dfl.bpf.c
+++ b/tools/testing/selftests/sched_ext/select_cpu_dfl.bpf.c
@@ -33,16 +33,8 @@ void BPF_STRUCT_OPS(select_cpu_dfl_enqueue, struct task_struct *p,
 	scx_bpf_dispatch(p, SCX_DSQ_GLOBAL, SCX_SLICE_DFL, enq_flags);
 }
 
-s32 BPF_STRUCT_OPS(select_cpu_dfl_init)
-{
-	scx_bpf_switch_all();
-
-	return 0;
-}
-
 SEC(".struct_ops.link")
 struct sched_ext_ops select_cpu_dfl_ops = {
 	.enqueue		= select_cpu_dfl_enqueue,
-	.init			= select_cpu_dfl_init,
 	.name			= "select_cpu_dfl",
 };
diff --git a/tools/testing/selftests/sched_ext/select_cpu_dfl_nodispatch.bpf.c b/tools/testing/selftests/sched_ext/select_cpu_dfl_nodispatch.bpf.c
index 636ea1de1..4bb5abb2d 100644
--- a/tools/testing/selftests/sched_ext/select_cpu_dfl_nodispatch.bpf.c
+++ b/tools/testing/selftests/sched_ext/select_cpu_dfl_nodispatch.bpf.c
@@ -80,18 +80,10 @@ s32 BPF_STRUCT_OPS(select_cpu_dfl_nodispatch_init_task,
 		return -ENOMEM;
 }
 
-s32 BPF_STRUCT_OPS(select_cpu_dfl_nodispatch_init)
-{
-	scx_bpf_switch_all();
-
-	return 0;
-}
-
 SEC(".struct_ops.link")
 struct sched_ext_ops select_cpu_dfl_nodispatch_ops = {
 	.select_cpu		= select_cpu_dfl_nodispatch_select_cpu,
 	.enqueue		= select_cpu_dfl_nodispatch_enqueue,
 	.init_task		= select_cpu_dfl_nodispatch_init_task,
-	.init			= select_cpu_dfl_nodispatch_init,
 	.name			= "select_cpu_dfl_nodispatch",
 };
diff --git a/tools/testing/selftests/sched_ext/select_cpu_dispatch.bpf.c b/tools/testing/selftests/sched_ext/select_cpu_dispatch.bpf.c
index 0fda97769..f0b96a4a0 100644
--- a/tools/testing/selftests/sched_ext/select_cpu_dispatch.bpf.c
+++ b/tools/testing/selftests/sched_ext/select_cpu_dispatch.bpf.c
@@ -33,17 +33,9 @@ s32 BPF_STRUCT_OPS(select_cpu_dispatch_select_cpu, struct task_struct *p,
 	return cpu;
 }
 
-s32 BPF_STRUCT_OPS(select_cpu_dispatch_init)
-{
-	scx_bpf_switch_all();
-
-	return 0;
-}
-
 SEC(".struct_ops.link")
 struct sched_ext_ops select_cpu_dispatch_ops = {
 	.select_cpu		= select_cpu_dispatch_select_cpu,
-	.init			= select_cpu_dispatch_init,
 	.name			= "select_cpu_dispatch",
 	.timeout_ms		= 1000U,
 };
diff --git a/tools/testing/selftests/sched_ext/select_cpu_dispatch_bad_dsq.bpf.c b/tools/testing/selftests/sched_ext/select_cpu_dispatch_bad_dsq.bpf.c
index c9105add9..c3f577952 100644
--- a/tools/testing/selftests/sched_ext/select_cpu_dispatch_bad_dsq.bpf.c
+++ b/tools/testing/selftests/sched_ext/select_cpu_dispatch_bad_dsq.bpf.c
@@ -23,13 +23,6 @@ s32 BPF_STRUCT_OPS(select_cpu_dispatch_bad_dsq_select_cpu, struct task_struct *p
 	return prev_cpu;
 }
 
-s32 BPF_STRUCT_OPS(select_cpu_dispatch_bad_dsq_init)
-{
-	scx_bpf_switch_all();
-
-	return 0;
-}
-
 void BPF_STRUCT_OPS(select_cpu_dispatch_bad_dsq_exit, struct scx_exit_info *ei)
 {
 	uei_record(&uei, ei);
@@ -38,7 +31,6 @@ void BPF_STRUCT_OPS(select_cpu_dispatch_bad_dsq_exit, struct scx_exit_info *ei)
 SEC(".struct_ops.link")
 struct sched_ext_ops select_cpu_dispatch_bad_dsq_ops = {
 	.select_cpu		= select_cpu_dispatch_bad_dsq_select_cpu,
-	.init			= select_cpu_dispatch_bad_dsq_init,
 	.exit			= select_cpu_dispatch_bad_dsq_exit,
 	.name			= "select_cpu_dispatch_bad_dsq",
 	.timeout_ms		= 1000U,
diff --git a/tools/testing/selftests/sched_ext/select_cpu_dispatch_dbl_dsp.bpf.c b/tools/testing/selftests/sched_ext/select_cpu_dispatch_dbl_dsp.bpf.c
index 82d814839..173c94ca6 100644
--- a/tools/testing/selftests/sched_ext/select_cpu_dispatch_dbl_dsp.bpf.c
+++ b/tools/testing/selftests/sched_ext/select_cpu_dispatch_dbl_dsp.bpf.c
@@ -24,13 +24,6 @@ s32 BPF_STRUCT_OPS(select_cpu_dispatch_dbl_dsp_select_cpu, struct task_struct *p
 	return prev_cpu;
 }
 
-s32 BPF_STRUCT_OPS(select_cpu_dispatch_dbl_dsp_init)
-{
-	scx_bpf_switch_all();
-
-	return 0;
-}
-
 void BPF_STRUCT_OPS(select_cpu_dispatch_dbl_dsp_exit, struct scx_exit_info *ei)
 {
 	uei_record(&uei, ei);
@@ -39,7 +32,6 @@ void BPF_STRUCT_OPS(select_cpu_dispatch_dbl_dsp_exit, struct scx_exit_info *ei)
 SEC(".struct_ops.link")
 struct sched_ext_ops select_cpu_dispatch_dbl_dsp_ops = {
 	.select_cpu		= select_cpu_dispatch_dbl_dsp_select_cpu,
-	.init			= select_cpu_dispatch_dbl_dsp_init,
 	.exit			= select_cpu_dispatch_dbl_dsp_exit,
 	.name			= "select_cpu_dispatch_dbl_dsp",
 	.timeout_ms		= 1000U,
diff --git a/tools/testing/selftests/sched_ext/select_cpu_vtime.bpf.c b/tools/testing/selftests/sched_ext/select_cpu_vtime.bpf.c
index b8bdadf3e..7f3ebf4fc 100644
--- a/tools/testing/selftests/sched_ext/select_cpu_vtime.bpf.c
+++ b/tools/testing/selftests/sched_ext/select_cpu_vtime.bpf.c
@@ -76,8 +76,6 @@ void BPF_STRUCT_OPS(select_cpu_vtime_enable, struct task_struct *p)
 
 s32 BPF_STRUCT_OPS_SLEEPABLE(select_cpu_vtime_init)
 {
-	scx_bpf_switch_all();
-
 	return scx_bpf_create_dsq(VTIME_DSQ, -1);
 }
 
-- 
2.43.0.232.ge79552d197

