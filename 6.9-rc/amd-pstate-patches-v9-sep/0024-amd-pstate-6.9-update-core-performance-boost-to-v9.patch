From 8f1154de784eb3bccf5572feb2f5e78ff46fb544 Mon Sep 17 00:00:00 2001
From: Piotr Gorski <lucjan.lucjanov@gmail.com>
Date: Mon, 6 May 2024 14:34:40 +0200
Subject: [PATCH 24/24] amd-pstate-6.9: update core performance boost to v9

Signed-off-by: Piotr Gorski <lucjan.lucjanov@gmail.com>
---
 Documentation/admin-guide/pm/amd-pstate.rst | 26 ++++++-
 drivers/cpufreq/amd-pstate.c                | 82 +++++++++++++++------
 include/linux/amd-pstate.h                  |  1 +
 3 files changed, 85 insertions(+), 24 deletions(-)

diff --git a/Documentation/admin-guide/pm/amd-pstate.rst b/Documentation/admin-guide/pm/amd-pstate.rst
index 82fbd01da..8c48b00fc 100644
--- a/Documentation/admin-guide/pm/amd-pstate.rst
+++ b/Documentation/admin-guide/pm/amd-pstate.rst
@@ -281,6 +281,27 @@ integer values defined between 0 to 255 when EPP feature is enabled by platform
 firmware, if EPP feature is disabled, driver will ignore the written value
 This attribute is read-write.
 
+``amd_pstate_boost_cpb``
+The `amd_pstate_boost_cpb` sysfs attribute provides control over the CPU core
+performance boost, allowing users to manage the maximum frequency limitation
+of the CPU. This attribute can be used to enable or disable the boost feature
+on individual CPUs.
+
+When the boost feature is enabled, the CPU can dynamically increase its frequency
+beyond the base frequency, providing enhanced performance for demanding workloads.
+On the other hand, disabling the boost feature restricts the CPU to operate at the
+base frequency, which may be desirable in certain scenarios to prioritize power
+efficiency or manage temperature.
+
+To manipulate the `amd_pstate_boost_cpb` attribute, users can write a value of `0`
+to disable the boost or `1` to enable it, for the respective CPU using the sysfs path
+`/sys/devices/system/cpu/cpuX/cpufreq/amd_pstate_boost_cpb`, where `X` represents the
+CPU number.
+
+It is important to note that modifying the global variable
+`amd_pstate_global_params.cpb_boost` will override the individual CPU settings.
+
+
 Other performance and frequency values can be read back from
 ``/sys/devices/system/cpu/cpuX/acpi_cppc/``, see :ref:`cppc_sysfs`.
 
@@ -444,9 +465,8 @@ control its functionality at the system level.  They are located in the
         Specifies whether core performance boost is requested to be enabled or disabled
         If core performance boost is disabled while a core is in a boosted P-state, the
         core automatically transitions to the highest performance non-boosted P-state.
-        AMD Core Performance Boost(CPB) is controlled by this new attribute file which
-        allow user to change all cores frequency boosting state. It supports both
-        ``active``, ``passive`` and ``guided`` mode control with below value write to it.
+        AMD Core Performance Boost(CPB) is controlled by this attribute file which allows
+        user to change all cores frequency boosting state. It supports all amd-pstate modes.
 
         "0" Disable Core Performance Boosting
         "1" Enable  Core Performance Boosting
diff --git a/drivers/cpufreq/amd-pstate.c b/drivers/cpufreq/amd-pstate.c
index e706788c1..44531711a 100644
--- a/drivers/cpufreq/amd-pstate.c
+++ b/drivers/cpufreq/amd-pstate.c
@@ -677,7 +677,7 @@ static int amd_pstate_boost_init(struct amd_cpudata *cpudata)
 	u64 boost_val;
 	int ret;
 
-	if (!boot_cpu_has(X86_FEATURE_CPB)) {
+	if (!cpu_feature_enabled(X86_FEATURE_CPB)) {
 		cpudata->boost_supported = false;
 		current_pstate_driver->boost_enabled = false;
 		pr_debug_once("Boost CPB capabilities not present in the processor\n");
@@ -691,8 +691,10 @@ static int amd_pstate_boost_init(struct amd_cpudata *cpudata)
 	}
 
 	amd_pstate_global_params.cpb_supported = !(boost_val & MSR_K7_HWCR_CPB_DIS);
-	if (amd_pstate_global_params.cpb_supported)
+	if (amd_pstate_global_params.cpb_supported) {
 		current_pstate_driver->boost_enabled = true;
+		cpudata->boost_state = true;
+	}
 
 	amd_pstate_global_params.cpb_boost = amd_pstate_global_params.cpb_supported;
 
@@ -1298,15 +1300,17 @@ static ssize_t prefcore_show(struct device *dev,
 	return sysfs_emit(buf, "%s\n", str_enabled_disabled(amd_pstate_prefcore));
 }
 
-static int amd_cpu_boost_update(struct amd_cpudata *cpudata, u32 on)
+static int amd_pstate_cpu_boost_update(struct cpufreq_policy *policy, bool on)
 {
-	struct cpufreq_policy *policy = cpufreq_cpu_acquire(cpudata->cpu);
+	struct amd_cpudata *cpudata = policy->driver_data;
 	struct cppc_perf_ctrls perf_ctrls;
 	u32 highest_perf, nominal_perf, nominal_freq, max_freq;
 	int ret;
 
-	if (!policy)
+	if (!policy) {
+		pr_err("policy is null\n");
 		return -ENODATA;
+	}
 
 	highest_perf = READ_ONCE(cpudata->highest_perf);
 	nominal_perf = READ_ONCE(cpudata->nominal_perf);
@@ -1343,11 +1347,54 @@ static int amd_cpu_boost_update(struct amd_cpudata *cpudata, u32 on)
 				      policy->cpuinfo.max_freq);
 	}
 
-	cpufreq_cpu_release(policy);
-
 	return ret;
 }
 
+static int amd_pstate_cpu_boost(int cpu, bool state)
+{
+	int ret;
+	struct cpufreq_policy *policy = cpufreq_cpu_get(cpu);
+	struct amd_cpudata *cpudata = policy->driver_data;
+
+	if (!policy) {
+		pr_err("policy is NULL\n");
+		ret = -ENODATA;
+		goto err_exit;
+	}
+
+	ret = amd_pstate_cpu_boost_update(policy, state);
+	refresh_frequency_limits(policy);
+	cpudata->boost_state = !!state;
+
+err_exit:
+	cpufreq_cpu_put(policy);
+	return ret < 0 ? ret : 0;
+}
+
+static ssize_t show_amd_pstate_boost_cpb(struct cpufreq_policy *policy, char *buf)
+{
+	struct amd_cpudata *cpudata = policy->driver_data;
+	bool boost_val;
+
+	boost_val = READ_ONCE(cpudata->boost_state);
+
+	return sysfs_emit(buf, "%u\n", boost_val);
+}
+
+static ssize_t store_amd_pstate_boost_cpb(
+		struct cpufreq_policy *policy, const char *buf, size_t count)
+{
+	bool boost_val;
+	int ret;
+
+	if (sscanf(buf, "%d", &boost_val) != 1)
+		return -EINVAL;
+
+	ret = amd_pstate_cpu_boost(policy->cpu, boost_val);
+
+	return ret < 0 ? ret : count;
+}
+
 static ssize_t cpb_boost_show(struct device *dev,
 			   struct device_attribute *attr, char *buf)
 {
@@ -1371,24 +1418,14 @@ static ssize_t cpb_boost_store(struct device *dev, struct device_attribute *b,
 		return ret;
 
 	mutex_lock(&amd_pstate_driver_lock);
-	amd_pstate_global_params.cpb_boost = !!new_state;
-
 	for_each_present_cpu(cpu) {
-
-		struct cpufreq_policy *policy = cpufreq_cpu_get(cpu);
-		struct amd_cpudata *cpudata = policy->driver_data;
-
-		if (!cpudata) {
-			pr_err("cpudata is NULL\n");
-			ret = -ENODATA;
-			cpufreq_cpu_put(policy);
+		ret = amd_pstate_cpu_boost(cpu, new_state);
+		if (ret < 0) {
+			pr_warn("failed to update cpu boost for CPU%d (%d)\n", cpu, ret);
 			goto err_exit;
 		}
-
-		amd_cpu_boost_update(cpudata, amd_pstate_global_params.cpb_boost);
-		refresh_frequency_limits(policy);
-		cpufreq_cpu_put(policy);
 	}
+	amd_pstate_global_params.cpb_boost = !!new_state;
 
 err_exit:
 	mutex_unlock(&amd_pstate_driver_lock);
@@ -1403,6 +1440,7 @@ cpufreq_freq_attr_ro(amd_pstate_prefcore_ranking);
 cpufreq_freq_attr_ro(amd_pstate_hw_prefcore);
 cpufreq_freq_attr_rw(energy_performance_preference);
 cpufreq_freq_attr_ro(energy_performance_available_preferences);
+cpufreq_freq_attr_rw(amd_pstate_boost_cpb);
 static DEVICE_ATTR_RW(status);
 static DEVICE_ATTR_RO(prefcore);
 static DEVICE_ATTR_RW(cpb_boost);
@@ -1413,6 +1451,7 @@ static struct freq_attr *amd_pstate_attr[] = {
 	&amd_pstate_highest_perf,
 	&amd_pstate_prefcore_ranking,
 	&amd_pstate_hw_prefcore,
+	&amd_pstate_boost_cpb,
 	NULL,
 };
 
@@ -1424,6 +1463,7 @@ static struct freq_attr *amd_pstate_epp_attr[] = {
 	&amd_pstate_hw_prefcore,
 	&energy_performance_preference,
 	&energy_performance_available_preferences,
+	&amd_pstate_boost_cpb,
 	NULL,
 };
 
diff --git a/include/linux/amd-pstate.h b/include/linux/amd-pstate.h
index 8ba5dd4d3..56f616a5c 100644
--- a/include/linux/amd-pstate.h
+++ b/include/linux/amd-pstate.h
@@ -106,6 +106,7 @@ struct amd_cpudata {
 	u32	policy;
 	u64	cppc_cap1_cached;
 	bool	suspended;
+	bool	boost_state;
 };
 
 /*
-- 
2.44.0.325.g11c821f2f2

