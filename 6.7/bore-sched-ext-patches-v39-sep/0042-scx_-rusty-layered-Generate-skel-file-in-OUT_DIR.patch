From 7133be2ebfa4471db4107e24c44055ff39cfc216 Mon Sep 17 00:00:00 2001
From: Tejun Heo <tj@kernel.org>
Date: Mon, 27 Nov 2023 22:00:40 -1000
Subject: [PATCH 042/129] scx_{rusty|layered}: Generate skel file in $OUT_DIR

Currently, skel files are put in src/bpf/.output. Place it inside $OUT_DIR
where build artifacts belong.
---
 tools/sched_ext/scx_layered/build.rs       | 24 ++++++----------------
 tools/sched_ext/scx_layered/src/layered.rs | 12 +++++++++++
 tools/sched_ext/scx_layered/src/main.rs    |  1 -
 tools/sched_ext/scx_rusty/build.rs         | 24 ++++++----------------
 tools/sched_ext/scx_rusty/src/main.rs      |  1 -
 tools/sched_ext/scx_rusty/src/rusty.rs     | 12 +++++++++++
 6 files changed, 36 insertions(+), 38 deletions(-)
 create mode 100644 tools/sched_ext/scx_layered/src/layered.rs
 create mode 100644 tools/sched_ext/scx_rusty/src/rusty.rs

diff --git a/tools/sched_ext/scx_layered/build.rs b/tools/sched_ext/scx_layered/build.rs
index ea0bbd48a..0f113716d 100644
--- a/tools/sched_ext/scx_layered/build.rs
+++ b/tools/sched_ext/scx_layered/build.rs
@@ -5,8 +5,6 @@
 extern crate bindgen;
 
 use std::env;
-use std::fs::create_dir_all;
-use std::path::Path;
 use std::path::PathBuf;
 
 use glob::glob;
@@ -43,17 +41,16 @@ fn bindgen_layered() {
 fn gen_bpf_sched(name: &str) {
     let bpf_cflags = env::var("SCX_RUST_BPF_CFLAGS").unwrap();
     let clang = env::var("SCX_RUST_CLANG").unwrap();
-    eprintln!("{}", clang);
-    let outpath = format!("./src/bpf/.output/{}.skel.rs", name);
-    let skel = Path::new(&outpath);
     let src = format!("./src/bpf/{}.bpf.c", name);
-    let obj = format!("./src/bpf/.output/{}.bpf.o", name);
+    let out_path = PathBuf::from(env::var("OUT_DIR").unwrap());
+    let skel_path = out_path.join(format!("{}.bpf.skel.rs", name));
+    let obj = out_path.join(format!("{}.bpf.o", name));
     SkeletonBuilder::new()
-        .source(src.clone())
-	.obj(obj)
+        .source(&src)
+        .obj(&obj)
         .clang(clang)
         .clang_args(bpf_cflags)
-        .build_and_generate(skel)
+        .build_and_generate(&skel_path)
         .unwrap();
 
     // Trigger rebuild if any .[hc] files are changed in the directory.
@@ -64,14 +61,5 @@ fn gen_bpf_sched(name: &str) {
 
 fn main() {
     bindgen_layered();
-    // It's unfortunate we cannot use `OUT_DIR` to store the generated skeleton.
-    // Reasons are because the generated skeleton contains compiler attributes
-    // that cannot be `include!()`ed via macro. And we cannot use the `#[path = "..."]`
-    // trick either because you cannot yet `concat!(env!("OUT_DIR"), "/skel.rs")` inside
-    // the path attribute either (see https://github.com/rust-lang/rust/pull/83366).
-    //
-    // However, there is hope! When the above feature stabilizes we can clean this
-    // all up.
-    create_dir_all("./src/bpf/.output").unwrap();
     gen_bpf_sched("layered");
 }
diff --git a/tools/sched_ext/scx_layered/src/layered.rs b/tools/sched_ext/scx_layered/src/layered.rs
new file mode 100644
index 000000000..660499863
--- /dev/null
+++ b/tools/sched_ext/scx_layered/src/layered.rs
@@ -0,0 +1,12 @@
+// Copyright (c) Meta Platforms, Inc. and affiliates.
+
+// This software may be used and distributed according to the terms of the
+// GNU General Public License version 2.
+
+// We can't directly include the generated skeleton in main.rs as it may
+// contain compiler attributes that can't be `include!()`ed via macro and we
+// can't use the `#[path = "..."]` because `concat!(env!("OUT_DIR"),
+// "/bpf.skel.rs")` does not work inside the path attribute yet (see
+// https://github.com/rust-lang/rust/pull/83366).
+
+include!(concat!(env!("OUT_DIR"), "/layered.bpf.skel.rs"));
diff --git a/tools/sched_ext/scx_layered/src/main.rs b/tools/sched_ext/scx_layered/src/main.rs
index 7eb2edf53..8f9e1a7ba 100644
--- a/tools/sched_ext/scx_layered/src/main.rs
+++ b/tools/sched_ext/scx_layered/src/main.rs
@@ -2,7 +2,6 @@
 
 // This software may be used and distributed according to the terms of the
 // GNU General Public License version 2.
-#[path = "bpf/.output/layered.skel.rs"]
 mod layered;
 pub use layered::*;
 pub mod layered_sys;
diff --git a/tools/sched_ext/scx_rusty/build.rs b/tools/sched_ext/scx_rusty/build.rs
index c54b8f33c..6397a1ed0 100644
--- a/tools/sched_ext/scx_rusty/build.rs
+++ b/tools/sched_ext/scx_rusty/build.rs
@@ -5,8 +5,6 @@
 extern crate bindgen;
 
 use std::env;
-use std::fs::create_dir_all;
-use std::path::Path;
 use std::path::PathBuf;
 
 use libbpf_cargo::SkeletonBuilder;
@@ -42,31 +40,21 @@ fn bindgen_rusty() {
 fn gen_bpf_sched(name: &str) {
     let bpf_cflags = env::var("SCX_RUST_BPF_CFLAGS").unwrap();
     let clang = env::var("SCX_RUST_CLANG").unwrap();
-    eprintln!("{}", clang);
-    let outpath = format!("./src/bpf/.output/{}.skel.rs", name);
-    let skel = Path::new(&outpath);
     let src = format!("./src/bpf/{}.bpf.c", name);
-    let obj = format!("./src/bpf/.output/{}.bpf.o", name);
+    let out_path = PathBuf::from(env::var("OUT_DIR").unwrap());
+    let skel_path = out_path.join(format!("{}.bpf.skel.rs", name));
+    let obj = out_path.join(format!("{}.bpf.o", name));
     SkeletonBuilder::new()
-        .source(src.clone())
-	.obj(obj)
+        .source(&src)
+	.obj(&obj)
         .clang(clang)
         .clang_args(bpf_cflags)
-        .build_and_generate(skel)
+        .build_and_generate(&skel_path)
         .unwrap();
     println!("cargo:rerun-if-changed={}", src);
 }
 
 fn main() {
     bindgen_rusty();
-    // It's unfortunate we cannot use `OUT_DIR` to store the generated skeleton.
-    // Reasons are because the generated skeleton contains compiler attributes
-    // that cannot be `include!()`ed via macro. And we cannot use the `#[path = "..."]`
-    // trick either because you cannot yet `concat!(env!("OUT_DIR"), "/skel.rs")` inside
-    // the path attribute either (see https://github.com/rust-lang/rust/pull/83366).
-    //
-    // However, there is hope! When the above feature stabilizes we can clean this
-    // all up.
-    create_dir_all("./src/bpf/.output").unwrap();
     gen_bpf_sched("rusty");
 }
diff --git a/tools/sched_ext/scx_rusty/src/main.rs b/tools/sched_ext/scx_rusty/src/main.rs
index 3b0bcd742..841f9a28a 100644
--- a/tools/sched_ext/scx_rusty/src/main.rs
+++ b/tools/sched_ext/scx_rusty/src/main.rs
@@ -2,7 +2,6 @@
 
 // This software may be used and distributed according to the terms of the
 // GNU General Public License version 2.
-#[path = "bpf/.output/rusty.skel.rs"]
 mod rusty;
 pub use rusty::*;
 pub mod rusty_sys;
diff --git a/tools/sched_ext/scx_rusty/src/rusty.rs b/tools/sched_ext/scx_rusty/src/rusty.rs
new file mode 100644
index 000000000..485ad5150
--- /dev/null
+++ b/tools/sched_ext/scx_rusty/src/rusty.rs
@@ -0,0 +1,12 @@
+// Copyright (c) Meta Platforms, Inc. and affiliates.
+
+// This software may be used and distributed according to the terms of the
+// GNU General Public License version 2.
+
+// We can't directly include the generated skeleton in main.rs as it may
+// contain compiler attributes that can't be `include!()`ed via macro and we
+// can't use the `#[path = "..."]` because `concat!(env!("OUT_DIR"),
+// "/bpf.skel.rs")` does not work inside the path attribute yet (see
+// https://github.com/rust-lang/rust/pull/83366).
+
+include!(concat!(env!("OUT_DIR"), "/rusty.bpf.skel.rs"));
-- 
2.43.0.232.ge79552d197

