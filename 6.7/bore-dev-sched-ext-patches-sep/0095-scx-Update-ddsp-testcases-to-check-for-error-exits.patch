From b1ac2cbc9ab94cd5268fab4759f9ec11c69abfa7 Mon Sep 17 00:00:00 2001
From: David Vernet <void@manifault.com>
Date: Wed, 10 Jan 2024 12:29:02 -0600
Subject: [PATCH 095/100] scx: Update ddsp testcases to check for error exits

We're checking that we don't crash when we encounter these error
conditions, but let's also test that we exit with the expected error
condition. The next patch will update this to be built into the test
framework.

Signed-off-by: David Vernet <void@manifault.com>
---
 tools/testing/selftests/scx/ddsp_bogus_dsq_fail.bpf.c  | 8 ++++++++
 tools/testing/selftests/scx/ddsp_bogus_dsq_fail.c      | 4 ++++
 tools/testing/selftests/scx/ddsp_vtimelocal_fail.bpf.c | 8 ++++++++
 tools/testing/selftests/scx/ddsp_vtimelocal_fail.c     | 4 ++++
 4 files changed, 24 insertions(+)

diff --git a/tools/testing/selftests/scx/ddsp_bogus_dsq_fail.bpf.c b/tools/testing/selftests/scx/ddsp_bogus_dsq_fail.bpf.c
index 78bd8feac..dd32b1899 100644
--- a/tools/testing/selftests/scx/ddsp_bogus_dsq_fail.bpf.c
+++ b/tools/testing/selftests/scx/ddsp_bogus_dsq_fail.bpf.c
@@ -8,6 +8,8 @@
 
 char _license[] SEC("license") = "GPL";
 
+struct user_exit_info uei;
+
 s32 BPF_STRUCT_OPS(ddsp_bogus_dsq_fail_select_cpu, struct task_struct *p,
 		   s32 prev_cpu, u64 wake_flags)
 {
@@ -26,6 +28,11 @@ s32 BPF_STRUCT_OPS(ddsp_bogus_dsq_fail_select_cpu, struct task_struct *p,
 	return prev_cpu;
 }
 
+void BPF_STRUCT_OPS(ddsp_bogus_dsq_fail_exit, struct scx_exit_info *ei)
+{
+	uei_record(&uei, ei);
+}
+
 s32 BPF_STRUCT_OPS(ddsp_bogus_dsq_fail_init)
 {
 	scx_bpf_switch_all();
@@ -36,6 +43,7 @@ s32 BPF_STRUCT_OPS(ddsp_bogus_dsq_fail_init)
 SEC(".struct_ops.link")
 struct sched_ext_ops ddsp_bogus_dsq_fail_ops = {
 	.select_cpu		= ddsp_bogus_dsq_fail_select_cpu,
+	.exit			= ddsp_bogus_dsq_fail_exit,
 	.init			= ddsp_bogus_dsq_fail_init,
 	.name			= "ddsp_bogus_dsq_fail",
 	.timeout_ms		= 1000U,
diff --git a/tools/testing/selftests/scx/ddsp_bogus_dsq_fail.c b/tools/testing/selftests/scx/ddsp_bogus_dsq_fail.c
index b12e804a0..0310fa58f 100644
--- a/tools/testing/selftests/scx/ddsp_bogus_dsq_fail.c
+++ b/tools/testing/selftests/scx/ddsp_bogus_dsq_fail.c
@@ -11,6 +11,8 @@
 #include "ddsp_bogus_dsq_fail.bpf.skel.h"
 #include "scx_test.h"
 
+#define SCX_EXIT_ERROR 1024
+
 static enum scx_test_status setup(void **ctx)
 {
 	struct ddsp_bogus_dsq_fail *skel;
@@ -31,6 +33,8 @@ static enum scx_test_status run(void *ctx)
 	SCX_FAIL_IF(!link, "Failed to attach struct_ops");
 
 	sleep(1);
+
+	SCX_EQ(skel->bss->uei.kind, SCX_EXIT_ERROR);
 	bpf_link__destroy(link);
 
 	return SCX_TEST_PASS;
diff --git a/tools/testing/selftests/scx/ddsp_vtimelocal_fail.bpf.c b/tools/testing/selftests/scx/ddsp_vtimelocal_fail.bpf.c
index 14a40be19..9b21c1d57 100644
--- a/tools/testing/selftests/scx/ddsp_vtimelocal_fail.bpf.c
+++ b/tools/testing/selftests/scx/ddsp_vtimelocal_fail.bpf.c
@@ -8,6 +8,8 @@
 
 char _license[] SEC("license") = "GPL";
 
+struct user_exit_info uei;
+
 s32 BPF_STRUCT_OPS(ddsp_vtimelocal_fail_select_cpu, struct task_struct *p,
 		   s32 prev_cpu, u64 wake_flags)
 {
@@ -23,6 +25,11 @@ s32 BPF_STRUCT_OPS(ddsp_vtimelocal_fail_select_cpu, struct task_struct *p,
 	return prev_cpu;
 }
 
+void BPF_STRUCT_OPS(ddsp_vtimelocal_fail_exit, struct scx_exit_info *ei)
+{
+	uei_record(&uei, ei);
+}
+
 s32 BPF_STRUCT_OPS(ddsp_vtimelocal_fail_init)
 {
 	scx_bpf_switch_all();
@@ -34,6 +41,7 @@ SEC(".struct_ops.link")
 struct sched_ext_ops ddsp_vtimelocal_fail_ops = {
 	.select_cpu		= ddsp_vtimelocal_fail_select_cpu,
 	.init			= ddsp_vtimelocal_fail_init,
+	.exit			= ddsp_vtimelocal_fail_exit,
 	.name			= "ddsp_vtimelocal_fail",
 	.timeout_ms		= 1000U,
 };
diff --git a/tools/testing/selftests/scx/ddsp_vtimelocal_fail.c b/tools/testing/selftests/scx/ddsp_vtimelocal_fail.c
index 03bbadfaa..211e84886 100644
--- a/tools/testing/selftests/scx/ddsp_vtimelocal_fail.c
+++ b/tools/testing/selftests/scx/ddsp_vtimelocal_fail.c
@@ -10,6 +10,8 @@
 #include "ddsp_vtimelocal_fail.bpf.skel.h"
 #include "scx_test.h"
 
+#define SCX_EXIT_ERROR 1024
+
 static enum scx_test_status setup(void **ctx)
 {
 	struct ddsp_vtimelocal_fail *skel;
@@ -30,6 +32,8 @@ static enum scx_test_status run(void *ctx)
 	SCX_FAIL_IF(!link, "Failed to attach struct_ops");
 
 	sleep(1);
+
+	SCX_EQ(skel->bss->uei.kind, SCX_EXIT_ERROR);
 	bpf_link__destroy(link);
 
 	return SCX_TEST_PASS;
-- 
2.43.0.232.ge79552d197

