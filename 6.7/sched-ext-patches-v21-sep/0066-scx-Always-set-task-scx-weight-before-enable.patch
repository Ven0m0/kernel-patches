From 0ed0f8a4646592d8c688932cff40ad6dc6296779 Mon Sep 17 00:00:00 2001
From: David Vernet <void@manifault.com>
Date: Wed, 13 Dec 2023 15:03:51 -0600
Subject: [PATCH 066/120] scx: Always set task scx weight before enable

We were previously only calling it on the fork path, but we need to be
calling it on the enable path as well.

Signed-off-by: David Vernet <void@manifault.com>
---
 kernel/sched/ext.c | 31 ++++++++++++++++---------------
 1 file changed, 16 insertions(+), 15 deletions(-)

diff --git a/kernel/sched/ext.c b/kernel/sched/ext.c
index 9ff5f208d..dab874f0b 100644
--- a/kernel/sched/ext.c
+++ b/kernel/sched/ext.c
@@ -2332,6 +2332,13 @@ static int scx_ops_prepare_task(struct task_struct *p, struct task_group *tg)
 	return 0;
 }
 
+static void set_task_scx_weight(struct task_struct *p)
+{
+	u32 weight = sched_prio_to_weight[p->static_prio - MAX_RT_PRIO];
+
+	p->scx.weight = sched_weight_to_cgroup(weight);
+}
+
 static void scx_ops_enable_task(struct task_struct *p)
 {
 	lockdep_assert_rq_held(task_rq(p));
@@ -2341,6 +2348,15 @@ static void scx_ops_enable_task(struct task_struct *p)
 		struct scx_enable_args args = {
 			SCX_ENABLE_ARGS_INIT_CGROUP(task_group(p))
 		};
+
+		/*
+		 * Set the weight manually before calling ops.enable() so that
+		 * the scheduler doesn't see a stale value if they inspect the
+		 * task struct. ops.set_weight() is invoked afterwards in the
+		 * caller, as it would be odd to receive a callback on the task
+		 * before we tell the scheduler that it's been fully enabled.
+		 */
+		set_task_scx_weight(p);
 		SCX_CALL_OP_TASK(SCX_KF_REST, enable, p, &args);
 	}
 	p->scx.flags &= ~SCX_TASK_OPS_PREPPED;
@@ -2366,13 +2382,6 @@ static void scx_ops_disable_task(struct task_struct *p)
 	}
 }
 
-static void set_task_scx_weight(struct task_struct *p)
-{
-	u32 weight = sched_prio_to_weight[p->static_prio - MAX_RT_PRIO];
-
-	p->scx.weight = sched_weight_to_cgroup(weight);
-}
-
 /**
  * refresh_scx_weight - Refresh a task's ext weight
  * @p: task to refresh ext weight for
@@ -2419,14 +2428,6 @@ void scx_post_fork(struct task_struct *p)
 		struct rq *rq;
 
 		rq = task_rq_lock(p, &rf);
-		/*
-		 * Set the weight manually before calling ops.enable() so that
-		 * the scheduler doesn't see a stale value if they inspect the
-		 * task struct. We'll invoke ops.set_weight() afterwards, as it
-		 * would be odd to receive a callback on the task before we
-		 * tell the scheduler that it's been fully enabled.
-		 */
-		set_task_scx_weight(p);
 		scx_ops_enable_task(p);
 		refresh_scx_weight(p);
 		task_rq_unlock(rq, p, &rf);
-- 
2.43.0.232.ge79552d197

