From 8776809dfaa135cf4a5f2e0caa740ae6e8c2f8d2 Mon Sep 17 00:00:00 2001
From: David Vernet <void@manifault.com>
Date: Fri, 5 Jan 2024 17:03:59 -0600
Subject: [PATCH 074/105] scx: Make select_cpu_dfl test a bit less brittle

select_cpu_dfl checks whether a task that's successfully dispatched from
the default select_cpu implementation isn't subsequently enqueued. It's
only doing the check for non-pcpu threads, but that's not really the
condition we want to look for. We don't want to do the check for any
task that's being enqueued on the enable path, because it won't have
gone through the select_cpu path. Instead, let's just check the task
name to verify it's the test task.

Signed-off-by: David Vernet <void@manifault.com>
---
 tools/testing/selftests/scx/select_cpu_dfl.bpf.c | 10 ++++++++--
 1 file changed, 8 insertions(+), 2 deletions(-)

diff --git a/tools/testing/selftests/scx/select_cpu_dfl.bpf.c b/tools/testing/selftests/scx/select_cpu_dfl.bpf.c
index 091bf1ed9..f2fa80628 100644
--- a/tools/testing/selftests/scx/select_cpu_dfl.bpf.c
+++ b/tools/testing/selftests/scx/select_cpu_dfl.bpf.c
@@ -14,14 +14,20 @@ char _license[] SEC("license") = "GPL";
 
 bool saw_local = false;
 
+static bool task_is_test(const struct task_struct *p)
+{
+	return !bpf_strncmp(p->comm, 9, "select_cpu");
+}
+
 void BPF_STRUCT_OPS(select_cpu_dfl_enqueue, struct task_struct *p,
 		    u64 enq_flags)
 {
 	const struct cpumask *idle_mask = scx_bpf_get_idle_cpumask();
 
-	if (p->nr_cpus_allowed > 1 &&
-	    bpf_cpumask_test_cpu(scx_bpf_task_cpu(p), idle_mask))
+	if (task_is_test(p) &&
+	    bpf_cpumask_test_cpu(scx_bpf_task_cpu(p), idle_mask)) {
 		saw_local = true;
+	}
 	scx_bpf_put_idle_cpumask(idle_mask);
 
 	scx_bpf_dispatch(p, SCX_DSQ_GLOBAL, SCX_SLICE_DFL, enq_flags);
-- 
2.43.0.232.ge79552d197

