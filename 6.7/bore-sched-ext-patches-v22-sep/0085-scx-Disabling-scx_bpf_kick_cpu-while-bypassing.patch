From d07867d914b68575753b7da5cad4012433d6b339 Mon Sep 17 00:00:00 2001
From: Tejun Heo <tj@kernel.org>
Date: Mon, 8 Jan 2024 10:21:24 -1000
Subject: [PATCH 085/110] scx: Disabling scx_bpf_kick_cpu() while bypassing

scx_bpf_kick_cpu() uses irq_work. However, if called while e.g. suspending,
IRQ handling may already be offline and scheduling irq_work can hang
indefinitely. There's no need for kicking while bypassing anyway, let's
suppress scx_bpf_kick_cpu() while bypassing.

Signed-off-by: Tejun Heo <tj@kernel.org>
---
 kernel/sched/ext.c | 11 +++++++++++
 1 file changed, 11 insertions(+)

diff --git a/kernel/sched/ext.c b/kernel/sched/ext.c
index 238e2b539..98dcaafb2 100644
--- a/kernel/sched/ext.c
+++ b/kernel/sched/ext.c
@@ -3063,6 +3063,9 @@ bool task_should_scx(struct task_struct *p)
  * d. pick_next_task() suppresses zero slice warning.
  *
  * e. scx_prio_less() reverts to the default core_sched_at order.
+ *
+ * f. scx_bpf_kick_cpu() is disabled to avoid irq_work malfunction during PM
+ *    operations.
  */
 static void scx_ops_bypass(bool bypass)
 {
@@ -4319,6 +4322,14 @@ void scx_bpf_kick_cpu(s32 cpu, u64 flags)
 		return;
 	}
 
+	/*
+	 * While bypassing for PM ops, IRQ handling may not be online which can
+	 * lead to irq_work_queue() malfunction such as infinite busy wait for
+	 * IRQ status update. Suppress kicking.
+	 */
+	if (scx_ops_bypassing())
+		return;
+
 	preempt_disable();
 	rq = this_rq();
 
-- 
2.43.0.232.ge79552d197

