From 8d627c31ac7f9bc917c2ab21df5c56b6cb169339 Mon Sep 17 00:00:00 2001
From: David Vernet <void@manifault.com>
Date: Fri, 5 Jan 2024 10:37:13 -0600
Subject: [PATCH 071/131] scx: Add missing DSQ fallback test files

I forgot to include these in the patch set that fixes and tests us
gracefully falling back to the global DSQ.

Signed-off-by: David Vernet <void@manifault.com>
---
 .../selftests/scx/dsp_localdsq_fail.bpf.c     | 39 +++++++++++++++++++
 .../testing/selftests/scx/dsp_localdsq_fail.c | 36 +++++++++++++++++
 2 files changed, 75 insertions(+)
 create mode 100644 tools/testing/selftests/scx/dsp_localdsq_fail.bpf.c
 create mode 100644 tools/testing/selftests/scx/dsp_localdsq_fail.c

diff --git a/tools/testing/selftests/scx/dsp_localdsq_fail.bpf.c b/tools/testing/selftests/scx/dsp_localdsq_fail.bpf.c
new file mode 100644
index 000000000..e27a95a87
--- /dev/null
+++ b/tools/testing/selftests/scx/dsp_localdsq_fail.bpf.c
@@ -0,0 +1,39 @@
+/* SPDX-License-Identifier: GPL-2.0 */
+/*
+ * Copyright (c) 2024 Meta Platforms, Inc. and affiliates.
+ * Copyright (c) 2024 David Vernet <dvernet@meta.com>
+ * Copyright (c) 2024 Tejun Heo <tj@kernel.org>
+ */
+#include <scx/common.bpf.h>
+
+char _license[] SEC("license") = "GPL";
+
+s32 BPF_STRUCT_OPS(dsp_localdsq_fail_select_cpu, struct task_struct *p,
+		   s32 prev_cpu, u64 wake_flags)
+{
+	s32 cpu = scx_bpf_pick_idle_cpu(p->cpus_ptr, 0);
+
+	if (cpu >= 0) {
+		/* Shouldn't be allowed to vtime dispatch to a builtin DSQ. */
+		scx_bpf_dispatch_vtime(p, SCX_DSQ_LOCAL, SCX_SLICE_DFL,
+				       p->scx.dsq_vtime, 0);
+		return cpu;
+	}
+
+	return prev_cpu;
+}
+
+s32 BPF_STRUCT_OPS(dsp_localdsq_fail_init)
+{
+	scx_bpf_switch_all();
+
+	return 0;
+}
+
+SEC(".struct_ops.link")
+struct sched_ext_ops dsp_localdsq_fail_ops = {
+	.select_cpu		= dsp_localdsq_fail_select_cpu,
+	.init			= dsp_localdsq_fail_init,
+	.name			= "dsp_localdsq_fail",
+	.timeout_ms		= 1000U,
+};
diff --git a/tools/testing/selftests/scx/dsp_localdsq_fail.c b/tools/testing/selftests/scx/dsp_localdsq_fail.c
new file mode 100644
index 000000000..4840386ba
--- /dev/null
+++ b/tools/testing/selftests/scx/dsp_localdsq_fail.c
@@ -0,0 +1,36 @@
+/* SPDX-License-Identifier: GPL-2.0 */
+/*
+ * Copyright (c) 2024 Meta Platforms, Inc. and affiliates.
+ * Copyright (c) 2024 David Vernet <dvernet@meta.com>
+ * Copyright (c) 2024 Tejun Heo <tj@kernel.org>
+ */
+#include <stdio.h>
+#include <unistd.h>
+#include <signal.h>
+#include <libgen.h>
+#include <bpf/bpf.h>
+#include <scx/common.h>
+#include <sys/wait.h>
+#include "dsp_localdsq_fail.bpf.skel.h"
+#include "scx_test.h"
+
+int main(int argc, char **argv)
+{
+	struct dsp_localdsq_fail *skel;
+	struct bpf_link *link;
+
+	libbpf_set_strict_mode(LIBBPF_STRICT_ALL);
+
+	skel = dsp_localdsq_fail__open_and_load();
+	SCX_BUG_ON(!skel, "Failed to open and load skel");
+
+	link = bpf_map__attach_struct_ops(skel->maps.dsp_localdsq_fail_ops);
+	SCX_BUG_ON(!link, "Failed to attach struct_ops");
+
+	sleep(1);
+
+	bpf_link__destroy(link);
+	dsp_localdsq_fail__destroy(skel);
+
+	return 0;
+}
-- 
2.43.0.232.ge79552d197

