From d8579a7d54020dd55225b880a067cf02e61b61d8 Mon Sep 17 00:00:00 2001
From: Tejun Heo <tj@kernel.org>
Date: Wed, 29 Nov 2023 08:23:05 -1000
Subject: [PATCH 046/130] scx_{rusty|layered}: Factor out build.rs's into
 scx_utils::build_helpers

This greatly simplifies build.rs and allows building more common logic into
build_helpers such as discovering BPF_CFLAGS on its own without depending on
upper level Makefile. Some caveats:

- Dropped static libbpf-sys dep. scx_utils is out of kernel tree and pulls
  in libbpf-sys through libbpf-cargo which conflicts with the explicit
  libbpf-sys dependency. This means that we use packaged version of
  libbpf-cargo for skel generation. Should be fine.

- Path dependency for scx_utils is temporary during development. Should be
  dropped later.
---
 tools/sched_ext/scx_layered/Cargo.toml |  7 +--
 tools/sched_ext/scx_layered/build.rs   | 65 +-------------------------
 tools/sched_ext/scx_rusty/Cargo.toml   |  7 +--
 tools/sched_ext/scx_rusty/build.rs     | 65 +-------------------------
 4 files changed, 8 insertions(+), 136 deletions(-)

diff --git a/tools/sched_ext/scx_layered/Cargo.toml b/tools/sched_ext/scx_layered/Cargo.toml
index 6567ec748..53726a223 100644
--- a/tools/sched_ext/scx_layered/Cargo.toml
+++ b/tools/sched_ext/scx_layered/Cargo.toml
@@ -7,7 +7,6 @@ description = "Userspace scheduling with BPF for Ads"
 license = "GPL-2.0-only"
 
 [dependencies]
-scx_utils = "0.1"
 anyhow = "1.0"
 bitvec = "1.0"
 clap = { version = "4.1", features = ["derive", "env", "unicode", "wrap_help"] }
@@ -15,17 +14,15 @@ ctrlc = { version = "3.1", features = ["termination"] }
 fb_procfs = "0.7"
 lazy_static = "1.4"
 libbpf-rs = "0.21"
-libbpf-sys = { version = "1.2.0", features = ["novendor", "static"] }
 libc = "0.2"
 log = "0.4"
+scx_utils = { path = "/home/htejun/os/scx/rust/scx_utils", version = "0.1" }
 serde = { version = "1.0", features = ["derive"] }
 serde_json = "1.0"
 simplelog = "0.12"
 
 [build-dependencies]
-bindgen = { version = "0.61" }
-libbpf-cargo = "0.21"
-glob = "0.3"
+scx_utils = { path = "/home/htejun/os/scx/rust/scx_utils", version = "0.1" }
 
 [features]
 enable_backtrace = []
diff --git a/tools/sched_ext/scx_layered/build.rs b/tools/sched_ext/scx_layered/build.rs
index ff3bb0b76..bbaa1ea71 100644
--- a/tools/sched_ext/scx_layered/build.rs
+++ b/tools/sched_ext/scx_layered/build.rs
@@ -2,69 +2,8 @@
 
 // This software may be used and distributed according to the terms of the
 // GNU General Public License version 2.
-extern crate bindgen;
-
-use std::env;
-use std::path::PathBuf;
-
-use glob::glob;
-use libbpf_cargo::SkeletonBuilder;
-
-const HEADER_PATH: &str = "src/bpf/intf.h";
-const SKEL_NAME: &str = "bpf";
-
-fn bindgen_bpf_intf() {
-    // Tell cargo to invalidate the built crate whenever the wrapper changes
-    println!("cargo:rerun-if-changed={}", HEADER_PATH);
-
-    // The bindgen::Builder is the main entry point
-    // to bindgen, and lets you build up options for
-    // the resulting bindings.
-    let bindings = bindgen::Builder::default()
-        // Should run clang with the same -I options as BPF compilation.
-        .clang_args(env::var("BPF_CFLAGS").unwrap().split_whitespace())
-        // The input header we would like to generate
-        // bindings for.
-        .header(HEADER_PATH)
-        // Tell cargo to invalidate the built crate whenever any of the
-        // included header files changed.
-        .parse_callbacks(Box::new(bindgen::CargoCallbacks))
-        // Finish the builder and generate the bindings.
-        .generate()
-        // Unwrap the Result and panic on failure.
-        .expect("Unable to generate bindings");
-
-    // Write the bindings to the $OUT_DIR/bindings.rs file.
-    let out_path = PathBuf::from(env::var("OUT_DIR").unwrap());
-    bindings
-        .write_to_file(out_path.join("bpf_intf.rs"))
-        .expect("Couldn't write bindings!");
-}
-
-fn gen_bpf_skel() {
-    let bpf_cflags = env::var("BPF_CFLAGS").unwrap();
-    let bpf_clang = env::var("BPF_CLANG").unwrap();
-
-    let src = format!("./src/bpf/main.bpf.c");
-    let out_path = PathBuf::from(env::var("OUT_DIR").unwrap());
-    let obj = out_path.join(format!("{}.bpf.o", SKEL_NAME));
-    let skel_path = out_path.join(format!("{}_skel.rs", SKEL_NAME));
-
-    SkeletonBuilder::new()
-        .source(&src)
-        .obj(&obj)
-        .clang(bpf_clang)
-        .clang_args(bpf_cflags)
-        .build_and_generate(&skel_path)
-        .unwrap();
-
-    // Trigger rebuild if any .[hc] files are changed in the directory.
-    for path in glob("src/bpf/*.[hc]").unwrap().filter_map(Result::ok) {
-        println!("cargo:rerun-if-changed={}", path.to_str().unwrap());
-    }
-}
 
 fn main() {
-    bindgen_bpf_intf();
-    gen_bpf_skel();
+    scx_utils::build_helpers::bindgen_bpf_intf(None, None);
+    scx_utils::build_helpers::gen_bpf_skel(None, None, None);
 }
diff --git a/tools/sched_ext/scx_rusty/Cargo.toml b/tools/sched_ext/scx_rusty/Cargo.toml
index 68db432c5..a25eb1099 100644
--- a/tools/sched_ext/scx_rusty/Cargo.toml
+++ b/tools/sched_ext/scx_rusty/Cargo.toml
@@ -7,7 +7,6 @@ description = "Userspace scheduling with BPF"
 license = "GPL-2.0-only"
 
 [dependencies]
-scx_utils = "0.1"
 anyhow = "1.0.65"
 bitvec = { version = "1.0", features = ["serde"] }
 clap = { version = "4.1", features = ["derive", "env", "unicode", "wrap_help"] }
@@ -15,16 +14,14 @@ ctrlc = { version = "3.1", features = ["termination"] }
 fb_procfs = "0.7.0"
 hex = "0.4.3"
 libbpf-rs = "0.21.0"
-libbpf-sys = { version = "1.2.0", features = ["novendor", "static"] }
 libc = "0.2.137"
 log = "0.4.17"
 ordered-float = "3.4.0"
+scx_utils = { path = "/home/htejun/os/scx/rust/scx_utils", version = "0.1" }
 simplelog = "0.12.0"
 
 [build-dependencies]
-bindgen = { version = "0.61.0" }
-libbpf-cargo = "0.21.0"
-glob = "0.3"
+scx_utils = { path = "/home/htejun/os/scx/rust/scx_utils", version = "0.1" }
 
 [features]
 enable_backtrace = []
diff --git a/tools/sched_ext/scx_rusty/build.rs b/tools/sched_ext/scx_rusty/build.rs
index ff3bb0b76..bbaa1ea71 100644
--- a/tools/sched_ext/scx_rusty/build.rs
+++ b/tools/sched_ext/scx_rusty/build.rs
@@ -2,69 +2,8 @@
 
 // This software may be used and distributed according to the terms of the
 // GNU General Public License version 2.
-extern crate bindgen;
-
-use std::env;
-use std::path::PathBuf;
-
-use glob::glob;
-use libbpf_cargo::SkeletonBuilder;
-
-const HEADER_PATH: &str = "src/bpf/intf.h";
-const SKEL_NAME: &str = "bpf";
-
-fn bindgen_bpf_intf() {
-    // Tell cargo to invalidate the built crate whenever the wrapper changes
-    println!("cargo:rerun-if-changed={}", HEADER_PATH);
-
-    // The bindgen::Builder is the main entry point
-    // to bindgen, and lets you build up options for
-    // the resulting bindings.
-    let bindings = bindgen::Builder::default()
-        // Should run clang with the same -I options as BPF compilation.
-        .clang_args(env::var("BPF_CFLAGS").unwrap().split_whitespace())
-        // The input header we would like to generate
-        // bindings for.
-        .header(HEADER_PATH)
-        // Tell cargo to invalidate the built crate whenever any of the
-        // included header files changed.
-        .parse_callbacks(Box::new(bindgen::CargoCallbacks))
-        // Finish the builder and generate the bindings.
-        .generate()
-        // Unwrap the Result and panic on failure.
-        .expect("Unable to generate bindings");
-
-    // Write the bindings to the $OUT_DIR/bindings.rs file.
-    let out_path = PathBuf::from(env::var("OUT_DIR").unwrap());
-    bindings
-        .write_to_file(out_path.join("bpf_intf.rs"))
-        .expect("Couldn't write bindings!");
-}
-
-fn gen_bpf_skel() {
-    let bpf_cflags = env::var("BPF_CFLAGS").unwrap();
-    let bpf_clang = env::var("BPF_CLANG").unwrap();
-
-    let src = format!("./src/bpf/main.bpf.c");
-    let out_path = PathBuf::from(env::var("OUT_DIR").unwrap());
-    let obj = out_path.join(format!("{}.bpf.o", SKEL_NAME));
-    let skel_path = out_path.join(format!("{}_skel.rs", SKEL_NAME));
-
-    SkeletonBuilder::new()
-        .source(&src)
-        .obj(&obj)
-        .clang(bpf_clang)
-        .clang_args(bpf_cflags)
-        .build_and_generate(&skel_path)
-        .unwrap();
-
-    // Trigger rebuild if any .[hc] files are changed in the directory.
-    for path in glob("src/bpf/*.[hc]").unwrap().filter_map(Result::ok) {
-        println!("cargo:rerun-if-changed={}", path.to_str().unwrap());
-    }
-}
 
 fn main() {
-    bindgen_bpf_intf();
-    gen_bpf_skel();
+    scx_utils::build_helpers::bindgen_bpf_intf(None, None);
+    scx_utils::build_helpers::gen_bpf_skel(None, None, None);
 }
-- 
2.43.0.232.ge79552d197

