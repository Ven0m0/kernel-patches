From 782cb95d0c9f479416051a067dc6a2a484c235ea Mon Sep 17 00:00:00 2001
From: Tejun Heo <tj@kernel.org>
Date: Tue, 28 Nov 2023 21:25:12 -1000
Subject: [PATCH 045/128] scx_{rusty|layered}: Run bindgen's clang with
 CLANG_CFLAGS and remove explicit paths from includes

So that build env can decide where to put these headers.
---
 tools/sched_ext/scx_layered/build.rs           | 12 ++++++++----
 tools/sched_ext/scx_layered/src/bpf/intf.h     |  2 +-
 tools/sched_ext/scx_layered/src/bpf/main.bpf.c |  4 ++--
 tools/sched_ext/scx_rusty/build.rs             | 12 ++++++++----
 tools/sched_ext/scx_rusty/src/bpf/intf.h       |  2 +-
 tools/sched_ext/scx_rusty/src/bpf/main.bpf.c   |  4 ++--
 6 files changed, 22 insertions(+), 14 deletions(-)

diff --git a/tools/sched_ext/scx_layered/build.rs b/tools/sched_ext/scx_layered/build.rs
index 4f240bfbc..ff3bb0b76 100644
--- a/tools/sched_ext/scx_layered/build.rs
+++ b/tools/sched_ext/scx_layered/build.rs
@@ -21,6 +21,8 @@ fn bindgen_bpf_intf() {
     // to bindgen, and lets you build up options for
     // the resulting bindings.
     let bindings = bindgen::Builder::default()
+        // Should run clang with the same -I options as BPF compilation.
+        .clang_args(env::var("BPF_CFLAGS").unwrap().split_whitespace())
         // The input header we would like to generate
         // bindings for.
         .header(HEADER_PATH)
@@ -41,21 +43,23 @@ fn bindgen_bpf_intf() {
 
 fn gen_bpf_skel() {
     let bpf_cflags = env::var("BPF_CFLAGS").unwrap();
-    let clang = env::var("BPF_CLANG").unwrap();
+    let bpf_clang = env::var("BPF_CLANG").unwrap();
+
     let src = format!("./src/bpf/main.bpf.c");
     let out_path = PathBuf::from(env::var("OUT_DIR").unwrap());
-    let skel_path = out_path.join(format!("{}_skel.rs", SKEL_NAME));
     let obj = out_path.join(format!("{}.bpf.o", SKEL_NAME));
+    let skel_path = out_path.join(format!("{}_skel.rs", SKEL_NAME));
+
     SkeletonBuilder::new()
         .source(&src)
         .obj(&obj)
-        .clang(clang)
+        .clang(bpf_clang)
         .clang_args(bpf_cflags)
         .build_and_generate(&skel_path)
         .unwrap();
 
     // Trigger rebuild if any .[hc] files are changed in the directory.
-    for path in glob("./src/bpf/*.[hc]").unwrap().filter_map(Result::ok) {
+    for path in glob("src/bpf/*.[hc]").unwrap().filter_map(Result::ok) {
         println!("cargo:rerun-if-changed={}", path.to_str().unwrap());
     }
 }
diff --git a/tools/sched_ext/scx_layered/src/bpf/intf.h b/tools/sched_ext/scx_layered/src/bpf/intf.h
index 9b9e6cb90..8513779d5 100644
--- a/tools/sched_ext/scx_layered/src/bpf/intf.h
+++ b/tools/sched_ext/scx_layered/src/bpf/intf.h
@@ -18,7 +18,7 @@ typedef unsigned long long u64;
 typedef long long s64;
 #endif
 
-#include "../../../ravg.bpf.h"
+#include "ravg.bpf.h"
 
 enum consts {
 	MAX_CPUS_SHIFT		= 9,
diff --git a/tools/sched_ext/scx_layered/src/bpf/main.bpf.c b/tools/sched_ext/scx_layered/src/bpf/main.bpf.c
index 4b3330785..d4714f89e 100644
--- a/tools/sched_ext/scx_layered/src/bpf/main.bpf.c
+++ b/tools/sched_ext/scx_layered/src/bpf/main.bpf.c
@@ -1,5 +1,5 @@
 /* Copyright (c) Meta Platforms, Inc. and affiliates. */
-#include "../../../scx_common.bpf.h"
+#include "scx_common.bpf.h"
 #include "intf.h"
 
 #include <errno.h>
@@ -27,7 +27,7 @@ static u32 preempt_cursor;
 #define trace(fmt, args...)	do { if (debug > 1) bpf_printk(fmt, ##args); } while (0)
 
 #include "util.bpf.c"
-#include "../../../ravg_impl.bpf.h"
+#include "ravg_impl.bpf.h"
 
 struct user_exit_info uei;
 
diff --git a/tools/sched_ext/scx_rusty/build.rs b/tools/sched_ext/scx_rusty/build.rs
index 4f240bfbc..ff3bb0b76 100644
--- a/tools/sched_ext/scx_rusty/build.rs
+++ b/tools/sched_ext/scx_rusty/build.rs
@@ -21,6 +21,8 @@ fn bindgen_bpf_intf() {
     // to bindgen, and lets you build up options for
     // the resulting bindings.
     let bindings = bindgen::Builder::default()
+        // Should run clang with the same -I options as BPF compilation.
+        .clang_args(env::var("BPF_CFLAGS").unwrap().split_whitespace())
         // The input header we would like to generate
         // bindings for.
         .header(HEADER_PATH)
@@ -41,21 +43,23 @@ fn bindgen_bpf_intf() {
 
 fn gen_bpf_skel() {
     let bpf_cflags = env::var("BPF_CFLAGS").unwrap();
-    let clang = env::var("BPF_CLANG").unwrap();
+    let bpf_clang = env::var("BPF_CLANG").unwrap();
+
     let src = format!("./src/bpf/main.bpf.c");
     let out_path = PathBuf::from(env::var("OUT_DIR").unwrap());
-    let skel_path = out_path.join(format!("{}_skel.rs", SKEL_NAME));
     let obj = out_path.join(format!("{}.bpf.o", SKEL_NAME));
+    let skel_path = out_path.join(format!("{}_skel.rs", SKEL_NAME));
+
     SkeletonBuilder::new()
         .source(&src)
         .obj(&obj)
-        .clang(clang)
+        .clang(bpf_clang)
         .clang_args(bpf_cflags)
         .build_and_generate(&skel_path)
         .unwrap();
 
     // Trigger rebuild if any .[hc] files are changed in the directory.
-    for path in glob("./src/bpf/*.[hc]").unwrap().filter_map(Result::ok) {
+    for path in glob("src/bpf/*.[hc]").unwrap().filter_map(Result::ok) {
         println!("cargo:rerun-if-changed={}", path.to_str().unwrap());
     }
 }
diff --git a/tools/sched_ext/scx_rusty/src/bpf/intf.h b/tools/sched_ext/scx_rusty/src/bpf/intf.h
index 34e2e5af7..54d28696a 100644
--- a/tools/sched_ext/scx_rusty/src/bpf/intf.h
+++ b/tools/sched_ext/scx_rusty/src/bpf/intf.h
@@ -19,7 +19,7 @@ typedef unsigned int u32;
 typedef unsigned long long u64;
 #endif
 
-#include "../../../ravg.bpf.h"
+#include "ravg.bpf.h"
 
 enum consts {
 	MAX_CPUS		= 512,
diff --git a/tools/sched_ext/scx_rusty/src/bpf/main.bpf.c b/tools/sched_ext/scx_rusty/src/bpf/main.bpf.c
index befd8d4c6..c82ad8973 100644
--- a/tools/sched_ext/scx_rusty/src/bpf/main.bpf.c
+++ b/tools/sched_ext/scx_rusty/src/bpf/main.bpf.c
@@ -35,8 +35,8 @@
  * task weight, dom mask and current dom in the task_data map and executes the
  * load balance based on userspace populating the lb_data map.
  */
-#include "../../../scx_common.bpf.h"
-#include "../../../ravg_impl.bpf.h"
+#include "scx_common.bpf.h"
+#include "ravg_impl.bpf.h"
 #include "intf.h"
 
 #include <errno.h>
-- 
2.43.0.232.ge79552d197

