From bcdc9337b81a51e3b44967dd8b7f6e9bec61858b Mon Sep 17 00:00:00 2001
From: Stephan Mueller <smueller@chronox.de>
Date: Fri, 15 Nov 2024 07:57:38 +0100
Subject: [PATCH 28/29] Add support for CONFIG_VDSO_GETRANDOM

Signed-off-by: Stephan Mueller <smueller@chronox.de>
---
 drivers/char/lrng/lrng_es_mgr.c | 29 ++++++++++++++++++++++++++---
 1 file changed, 26 insertions(+), 3 deletions(-)

diff --git a/drivers/char/lrng/lrng_es_mgr.c b/drivers/char/lrng/lrng_es_mgr.c
index 6135b1b52..e4816e2de 100644
--- a/drivers/char/lrng/lrng_es_mgr.c
+++ b/drivers/char/lrng/lrng_es_mgr.c
@@ -13,6 +13,11 @@
 #include <linux/workqueue.h>
 #include <asm/archrandom.h>
 
+#ifdef CONFIG_VDSO_GETRANDOM
+#include <vdso/getrandom.h>
+#include <vdso/datapage.h>
+#endif
+
 #include "lrng_drng_atomic.h"
 #include "lrng_drng_mgr.h"
 #include "lrng_es_aux.h"
@@ -102,8 +107,9 @@ bool lrng_enforce_panic_on_permanent_health_failure(void)
 	return lrng_panic_on_permanent_health_failure;
 }
 
-bool lrng_ntg1_2024_compliant(void)
+bool lrng_ntg1_2022_compliant(void)
 {
+	/* Implies use of /dev/random w/ O_SYNC / getrandom w/ GRND_RANDOM */
 	return ntg1;
 }
 
@@ -168,6 +174,11 @@ void lrng_reset_state(void)
 	lrng_state.lrng_fully_seeded = false;
 	lrng_state.lrng_min_seeded = false;
 	lrng_state.all_online_numa_node_seeded = false;
+
+#ifdef CONFIG_VDSO_GETRANDOM
+	WRITE_ONCE(_vdso_rng_data.is_ready, false);
+#endif
+
 	pr_debug("reset LRNG\n");
 }
 
@@ -204,6 +215,14 @@ bool lrng_state_operational(void)
 
 static void lrng_init_wakeup(void)
 {
+#ifdef CONFIG_VDSO_GETRANDOM
+	/*
+	 * The LRNG does not enable the user space ChaCha20
+	 * DRNG in the VDSO.
+	 */
+	/* WRITE_ONCE(_vdso_rng_data.is_ready, true); */
+#endif
+
 	wake_up_all(&lrng_init_wait);
 	lrng_init_wakeup_dev();
 	lrng_kick_random_ready();
@@ -227,7 +246,7 @@ static u32 lrng_avail_entropy_thresh(void)
 bool lrng_fully_seeded(bool fully_seeded, u32 collected_entropy,
 		       struct entropy_buf *eb)
 {
-	/* AIS20/31 NTG.1: two entropy sources with each delivering 240 bits */
+	/* AIS20/31 NTG.1: two entropy sources with each delivering 220 bits */
 	if (ntg1) {
 		u32 i, result = 0, ent_thresh = lrng_avail_entropy_thresh();
 
@@ -270,6 +289,10 @@ void lrng_unset_fully_seeded(struct lrng_drng *drng)
 		lrng_state.lrng_operational = false;
 		lrng_state.lrng_fully_seeded = false;
 
+#ifdef CONFIG_VDSO_GETRANDOM
+		WRITE_ONCE(_vdso_rng_data.is_ready, false);
+#endif
+
 		/* If sufficient entropy is available, reseed now. */
 		lrng_es_add_entropy();
 	}
@@ -329,7 +352,7 @@ void lrng_init_ops(struct entropy_buf *eb)
 		return;
 
 	requested_bits = ntg1 ?
-		/* Approximation so that two ES should deliver 240 bits each */
+		/* Approximation so that two ES should deliver 220 bits each */
 		(lrng_avail_entropy() + LRNG_AIS2031_NPTRNG_MIN_ENTROPY) :
 		/* Apply SP800-90C oversampling if applicable */
 		lrng_get_seed_entropy_osr(state->all_online_numa_node_seeded);
-- 
2.47.0

