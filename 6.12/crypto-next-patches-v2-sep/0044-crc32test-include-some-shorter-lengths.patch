From bd487bcaec8abff3af595d9e898274f377eb77fd Mon Sep 17 00:00:00 2001
From: Eric Biggers <ebiggers@google.com>
Date: Fri, 18 Oct 2024 15:37:18 -0700
Subject: [PATCH 44/73] crc32test: include some shorter lengths

Signed-off-by: Eric Biggers <ebiggers@google.com>
---
 lib/crc32test.c | 62 ++++++++++++++++++++++++-------------------------
 1 file changed, 31 insertions(+), 31 deletions(-)

diff --git a/lib/crc32test.c b/lib/crc32test.c
index 9b4af7941..0d39156b9 100644
--- a/lib/crc32test.c
+++ b/lib/crc32test.c
@@ -551,38 +551,38 @@ static u8 const __aligned(8) test_buf[] __initconst =
 static struct crc_test {
 	u32 crc;	/* random starting crc */
 	u32 start;	/* random 6 bit offset in buf */
-	u32 length;	/* random 11 bit length of test */
+	u32 length;	/* length of test in bytes */
 	u32 crc_le;	/* expected crc32_le result */
 	u32 crc_be;	/* expected crc32_be result */
 	u32 crc32c_le;	/* expected crc32c_le result */
 } const test[] __initconst =
 {
-	{0x674bf11d, 0x00000038, 0x00000542, 0x0af6d466, 0xd8b6e4c1, 0xf6e93d6c},
-	{0x35c672c6, 0x0000003a, 0x000001aa, 0xc6d3dfba, 0x28aaf3ad, 0x0fe92aca},
-	{0x496da28e, 0x00000039, 0x000005af, 0xd933660f, 0x5d57e81f, 0x52e1ebb8},
-	{0x09a9b90e, 0x00000027, 0x000001f8, 0xb45fe007, 0xf45fca9a, 0x0798af9a},
-	{0xdc97e5a9, 0x00000025, 0x000003b6, 0xf81a3562, 0xe0126ba2, 0x18eb3152},
-	{0x47c58900, 0x0000000a, 0x000000b9, 0x8e58eccf, 0xf3afc793, 0xd00d08c7},
-	{0x292561e8, 0x0000000c, 0x00000403, 0xa2ba8aaf, 0x0b797aed, 0x8ba966bc},
-	{0x415037f6, 0x00000003, 0x00000676, 0xa17d52e8, 0x7f0fdf35, 0x11d694a2},
-	{0x3466e707, 0x00000026, 0x00000042, 0x258319be, 0x75c484a2, 0x6ab3208d},
-	{0xafd1281b, 0x00000023, 0x000002ee, 0x4428eaf8, 0x06c7ad10, 0xba4603c5},
-	{0xd3857b18, 0x00000028, 0x000004a2, 0x5c430821, 0xb062b7cb, 0xe6071c6f},
-	{0x1d825a8f, 0x0000002b, 0x0000050b, 0xd2c45f0c, 0xd68634e0, 0x179ec30a},
-	{0x5033e3bc, 0x0000000b, 0x00000078, 0xa3ea4113, 0xac6d31fb, 0x0903beb8},
-	{0x94f1fb5e, 0x0000000f, 0x000003a2, 0xfbfc50b1, 0x3cfe50ed, 0x6a7cb4fa},
-	{0xc9a0fe14, 0x00000009, 0x00000473, 0x5fb61894, 0x87070591, 0xdb535801},
-	{0x88a034b1, 0x0000001c, 0x000005ad, 0xc1b16053, 0x46f95c67, 0x92bed597},
-	{0xf0f72239, 0x00000020, 0x0000026d, 0xa6fa58f3, 0xf8c2c1dd, 0x192a3f1b},
-	{0xcc20a5e3, 0x0000003b, 0x0000067a, 0x7740185a, 0x308b979a, 0xccbaec1a},
-	{0xce589c95, 0x0000002b, 0x00000641, 0xd055e987, 0x40aae25b, 0x7eabae4d},
-	{0x78edc885, 0x00000035, 0x000005be, 0xa39cb14b, 0x035b0d1f, 0x28c72982},
-	{0x9d40a377, 0x0000003b, 0x00000038, 0x1f47ccd2, 0x197fbc9d, 0xc3cd4d18},
-	{0x703d0e01, 0x0000003c, 0x000006f1, 0x88735e7c, 0xfed57c5a, 0xbca8f0e7},
-	{0x776bf505, 0x0000000f, 0x000005b2, 0x5cc4fc01, 0xf32efb97, 0x713f60b3},
-	{0x4a3e7854, 0x00000027, 0x000004b8, 0x8d923c82, 0x0cbfb4a2, 0xebd08fd5},
-	{0x209172dd, 0x0000003b, 0x00000356, 0xb89e9c2b, 0xd7868138, 0x64406c59},
-	{0x3ba4cc5b, 0x0000002f, 0x00000203, 0xe51601a9, 0x5b2a1032, 0x7421890e},
+	{0x674bf11d, 0x00000038, 0x00000000, 0x674bf11d, 0x674bf11d, 0x674bf11d},
+	{0x35c672c6, 0x0000003a, 0x00000001, 0x18828105, 0x4d55063c, 0x072c4332},
+	{0x496da28e, 0x00000039, 0x00000002, 0x3135192c, 0x8cca04a8, 0xfdb12ad7},
+	{0x09a9b90e, 0x00000027, 0x00000003, 0xe1c1625b, 0x991284d9, 0xb18b6dad},
+	{0xdc97e5a9, 0x00000025, 0x00000004, 0x270d9703, 0x0edbf7e7, 0x5693a40b},
+	{0x47c58900, 0x0000000a, 0x00000005, 0x8068426f, 0xb3abc9e2, 0x9957bd20},
+	{0x292561e8, 0x0000000c, 0x00000006, 0x30828b0d, 0x78e7d51e, 0x779edd81},
+	{0x415037f6, 0x00000003, 0x00000007, 0x48d66bf4, 0x38746803, 0x7aa8d777},
+	{0x3466e707, 0x00000026, 0x00000008, 0x29ce77be, 0xbbb7f678, 0xdb128a5e},
+	{0xafd1281b, 0x00000023, 0x00000009, 0xbeeeb093, 0x6dfc4a9a, 0xe32a2c13},
+	{0xd3857b18, 0x00000028, 0x0000000a, 0xf64727e9, 0xefb78d41, 0x79e71c98},
+	{0x1d825a8f, 0x0000002b, 0x0000000b, 0x065ececb, 0x3a964aa5, 0xca466bcc},
+	{0x5033e3bc, 0x0000000b, 0x0000000c, 0x2c56aee8, 0x8f661ce9, 0x563ad546},
+	{0x94f1fb5e, 0x0000000f, 0x0000000d, 0x7c1935de, 0x0743ffab, 0x023497b3},
+	{0xc9a0fe14, 0x00000009, 0x0000000e, 0xd99f2388, 0x9ff73f94, 0xf3e84e0d},
+	{0x88a034b1, 0x0000001c, 0x0000000f, 0xbf4e1f7d, 0x4ba005c2, 0x3d21d3e1},
+	{0xf0f72239, 0x00000020, 0x0000003b, 0x5ca412b2, 0x10f37894, 0x2718543f},
+	{0xcc20a5e3, 0x0000003b, 0x00000062, 0x04915e52, 0xaff95e4e, 0x8e302139},
+	{0xce589c95, 0x0000002b, 0x00000014, 0x15498b8a, 0xc235801a, 0x0b301e99},
+	{0x78edc885, 0x00000035, 0x00000034, 0xa4b73bde, 0xfbf5d6b8, 0xc9654e58},
+	{0x9d40a377, 0x0000003b, 0x00000067, 0xa84defc3, 0x3b49c057, 0x88fe219d},
+	{0x703d0e01, 0x0000003c, 0x00000069, 0x8f11b3bd, 0x655f04aa, 0x151070f8},
+	{0x776bf505, 0x0000000f, 0x00000051, 0x17af1415, 0xfe779e80, 0x36114089},
+	{0x4a3e7854, 0x00000027, 0x00000032, 0x933b4355, 0xd8f45725, 0xf3a46d3f},
+	{0x209172dd, 0x0000003b, 0x00000044, 0x987e6827, 0xa036b48d, 0xc6065b30},
+	{0x3ba4cc5b, 0x0000002f, 0x0000006b, 0xb70ae691, 0x1a3eb5a8, 0xb44f861f},
 	{0xfc62f297, 0x00000000, 0x00000079, 0x71a8e1a2, 0x5d88685f, 0xe9347603},
 	{0x64280b8b, 0x00000016, 0x000007ab, 0x0fa7a30c, 0xda3a455f, 0x1bef9060},
 	{0x97dd724b, 0x00000033, 0x000007ad, 0x5788b2f4, 0xd7326d32, 0x34720072},
@@ -674,7 +674,7 @@ static int __init crc32c_test(void)
 	static u32 crc;
 
 	/* pre-warm the cache */
-	for (i = 0; i < 100; i++) {
+	for (i = 0; i < ARRAY_SIZE(test); i++) {
 		bytes += test[i].length;
 
 		crc ^= __crc32c_le(test[i].crc, test_buf +
@@ -685,7 +685,7 @@ static int __init crc32c_test(void)
 	local_irq_save(flags);
 
 	nsec = ktime_get_ns();
-	for (i = 0; i < 100; i++) {
+	for (i = 0; i < ARRAY_SIZE(test); i++) {
 		if (test[i].crc32c_le != __crc32c_le(test[i].crc, test_buf +
 		    test[i].start, test[i].length))
 			errors++;
@@ -754,7 +754,7 @@ static int __init crc32_test(void)
 	static u32 crc;
 
 	/* pre-warm the cache */
-	for (i = 0; i < 100; i++) {
+	for (i = 0; i < ARRAY_SIZE(test); i++) {
 		bytes += 2*test[i].length;
 
 		crc ^= crc32_le(test[i].crc, test_buf +
@@ -768,7 +768,7 @@ static int __init crc32_test(void)
 	local_irq_save(flags);
 
 	nsec = ktime_get_ns();
-	for (i = 0; i < 100; i++) {
+	for (i = 0; i < ARRAY_SIZE(test); i++) {
 		if (test[i].crc_le != crc32_le(test[i].crc, test_buf +
 		    test[i].start, test[i].length))
 			errors++;
-- 
2.47.0

