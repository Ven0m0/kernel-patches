From c01bbf1bcea815412f49848628f5d674d11f5e63 Mon Sep 17 00:00:00 2001
From: Eric Naim <dnaim@cachyos.org>
Date: Mon, 18 Nov 2024 00:16:55 +0800
Subject: [PATCH 18/39] Revert "sched/fair: Dequeue sched_delayed tasks when
 waking to a busy CPU"

This reverts commit e463e7f7cf9a041d08555ffe8ff7c704b23ba1c5.

It seems that while this fixes some regressions during write tasks, it introduces new regressions during read.

Signed-off-by: Eric Naim <dnaim@cachyos.org>
---
 kernel/sched/core.c  | 46 +++++++++++++++++---------------------------
 kernel/sched/sched.h |  5 -----
 2 files changed, 18 insertions(+), 33 deletions(-)

diff --git a/kernel/sched/core.c b/kernel/sched/core.c
index a55dfdf8e..a1c353a62 100644
--- a/kernel/sched/core.c
+++ b/kernel/sched/core.c
@@ -3734,38 +3734,28 @@ ttwu_do_activate(struct rq *rq, struct task_struct *p, int wake_flags,
  */
 static int ttwu_runnable(struct task_struct *p, int wake_flags)
 {
-	CLASS(__task_rq_lock, rq_guard)(p);
-	struct rq *rq = rq_guard.rq;
-
-	if (!task_on_rq_queued(p))
-		return 0;
-
-	update_rq_clock(rq);
-	if (p->se.sched_delayed) {
-		int queue_flags = ENQUEUE_DELAYED | ENQUEUE_NOCLOCK;
+	struct rq_flags rf;
+	struct rq *rq;
+	int ret = 0;
 
-		/*
-		 * Since sched_delayed means we cannot be current anywhere,
-		 * dequeue it here and have it fall through to the
-		 * select_task_rq() case further along the ttwu() path.
-		 */
-		if (rq->nr_running > 1 && p->nr_cpus_allowed > 1) {
-			dequeue_task(rq, p, DEQUEUE_SLEEP | queue_flags);
-			return 0;
+	rq = __task_rq_lock(p, &rf);
+	if (task_on_rq_queued(p)) {
+		update_rq_clock(rq);
+		if (p->se.sched_delayed)
+			enqueue_task(rq, p, ENQUEUE_NOCLOCK | ENQUEUE_DELAYED);
+		if (!task_on_cpu(rq, p)) {
+			/*
+			 * When on_rq && !on_cpu the task is preempted, see if
+			 * it should preempt the task that is current now.
+			 */
+			wakeup_preempt(rq, p, wake_flags);
 		}
-
-		enqueue_task(rq, p, queue_flags);
-	}
-	if (!task_on_cpu(rq, p)) {
-		/*
-		 * When on_rq && !on_cpu the task is preempted, see if
-		 * it should preempt the task that is current now.
-		 */
-		wakeup_preempt(rq, p, wake_flags);
+		ttwu_do_wakeup(p);
+		ret = 1;
 	}
-	ttwu_do_wakeup(p);
+	__task_rq_unlock(rq, &rf);
 
-	return 1;
+	return ret;
 }
 
 #ifdef CONFIG_SMP
diff --git a/kernel/sched/sched.h b/kernel/sched/sched.h
index 147ad6540..c03b3d7b3 100644
--- a/kernel/sched/sched.h
+++ b/kernel/sched/sched.h
@@ -1780,11 +1780,6 @@ task_rq_unlock(struct rq *rq, struct task_struct *p, struct rq_flags *rf)
 	raw_spin_unlock_irqrestore(&p->pi_lock, rf->flags);
 }
 
-DEFINE_LOCK_GUARD_1(__task_rq_lock, struct task_struct,
-		    _T->rq = __task_rq_lock(_T->lock, &_T->rf),
-		    __task_rq_unlock(_T->rq, &_T->rf),
-		    struct rq *rq; struct rq_flags rf)
-
 DEFINE_LOCK_GUARD_1(task_rq_lock, struct task_struct,
 		    _T->rq = task_rq_lock(_T->lock, &_T->rf),
 		    task_rq_unlock(_T->rq, _T->lock, &_T->rf),
-- 
2.47.1

