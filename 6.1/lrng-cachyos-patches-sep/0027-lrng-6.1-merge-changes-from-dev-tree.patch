From c70675991da9bfb57a72c35526eb61d034305964 Mon Sep 17 00:00:00 2001
From: Piotr Gorski <lucjan.lucjanov@gmail.com>
Date: Mon, 12 Dec 2022 09:13:29 +0100
Subject: [PATCH 27/27] lrng-6.1: merge changes from dev tree

Signed-off-by: Piotr Gorski <lucjan.lucjanov@gmail.com>
---
 MAINTAINERS                                   |   7 +
 drivers/char/lrng/Kconfig                     |  13 ++
 drivers/char/lrng/lrng_definitions.h          |   7 +
 drivers/char/lrng/lrng_drng_atomic.c          |   2 +-
 drivers/char/lrng/lrng_drng_mgr.c             | 120 ++++++++++++++----
 drivers/char/lrng/lrng_es_mgr.c               |  45 +++----
 drivers/char/lrng/lrng_es_mgr.h               |   8 +-
 drivers/char/lrng/lrng_interface_aux.c        |  50 ++++++++
 .../char/lrng/lrng_interface_random_kernel.c  |  11 +-
 drivers/char/lrng/lrng_proc.c                 |   2 +-
 10 files changed, 211 insertions(+), 54 deletions(-)

diff --git a/MAINTAINERS b/MAINTAINERS
index 886d3f69e..1dcd54dee 100644
--- a/MAINTAINERS
+++ b/MAINTAINERS
@@ -11851,6 +11851,13 @@ F:	Documentation/litmus-tests/
 F:	Documentation/memory-barriers.txt
 F:	tools/memory-model/
 
+LINUX RANDOM NUMBER GENERATOR (LRNG) DRIVER
+M:	Stephan Mueller <smueller@chronox.de>
+S:	Maintained
+W:	https://www.chronox.de/lrng.html
+F:	drivers/char/lrng/
+F:	include/linux/lrng.h
+
 LIS3LV02D ACCELEROMETER DRIVER
 M:	Eric Piel <eric.piel@tremplin-utc.net>
 S:	Maintained
diff --git a/drivers/char/lrng/Kconfig b/drivers/char/lrng/Kconfig
index 508dc8f48..08ab921a1 100644
--- a/drivers/char/lrng/Kconfig
+++ b/drivers/char/lrng/Kconfig
@@ -10,6 +10,12 @@ config RANDOM_DEFAULT_IMPL
 	  The default random number generator as provided with
 	  drivers/char/random.c is selected with this option.
 
+config LRNG_AUTO_SELECTED
+	bool
+	default y if !RANDOM_DEFAULT_IMPL
+	default n if RANDOM_DEFAULT_IMPL
+	select LRNG
+
 config LRNG
 	bool "Linux Random Number Generator"
 	default n
@@ -890,6 +896,13 @@ config LRNG_RUNTIME_MAX_WO_RESEED_CONFIG
 	  operations without a reseed that has full entropy. The
 	  interface is lrng_drng.max_wo_reseed.
 
+config LRNG_RUNTIME_FORCE_SEEDING_DISABLE
+	bool "Enable runtime configuration of force seeding"
+	help
+	  When enabling this option, the LRNG provides an interface
+	  allowing the disabling of the force seeding when the DRNG
+	  is not fully seeded but entropy is available.
+
 config LRNG_TEST_CPU_ES_COMPRESSION
 	bool "Force CPU ES compression operation"
 	help
diff --git a/drivers/char/lrng/lrng_definitions.h b/drivers/char/lrng/lrng_definitions.h
index c0d2fcff8..f1059334e 100644
--- a/drivers/char/lrng/lrng_definitions.h
+++ b/drivers/char/lrng/lrng_definitions.h
@@ -121,6 +121,13 @@
  */
 #define LRNG_POOL_SIZE	(sizeof(struct shash_desc) + HASH_MAX_DESCSIZE)
 
+/*
+ * How many attempts to reach fully seeded are allowed before trying to force
+ * reseed from available entropy (pull data from entropy sources in a repeated
+ * fashion allowing to sum up the entropy).
+ */
+#define LRNG_FORCE_FULLY_SEEDED_ATTEMPT	5
+
 /****************************** Helper code ***********************************/
 
 static inline u32 lrng_fast_noise_entropylevel(u32 ent_bits, u32 requested_bits)
diff --git a/drivers/char/lrng/lrng_drng_atomic.c b/drivers/char/lrng/lrng_drng_atomic.c
index b58a32017..ce9b5b48d 100644
--- a/drivers/char/lrng/lrng_drng_atomic.c
+++ b/drivers/char/lrng/lrng_drng_atomic.c
@@ -118,7 +118,7 @@ void lrng_drng_atomic_seed_es(void)
 	pr_debug("atomic DRNG seeding attempt to pull %u bits of entropy directly from entropy sources\n",
 		 requested_bits);
 
-	lrng_fill_seed_buffer(&seedbuf, requested_bits);
+	lrng_fill_seed_buffer(&seedbuf, requested_bits, false);
 	spin_lock_irqsave(&drng->spin_lock, flags);
 	lrng_drng_inject(&lrng_drng_atomic, (u8 *)&seedbuf, sizeof(seedbuf),
 			 lrng_fully_seeded(drng->fully_seeded,
diff --git a/drivers/char/lrng/lrng_drng_mgr.c b/drivers/char/lrng/lrng_drng_mgr.c
index 7ac03fc07..8939f1777 100644
--- a/drivers/char/lrng/lrng_drng_mgr.c
+++ b/drivers/char/lrng/lrng_drng_mgr.c
@@ -85,6 +85,13 @@ MODULE_PARM_DESC(max_wo_reseed,
 		 "Maximum number of DRNG generate operation without full reseed\n");
 #endif
 
+static bool force_seeding = true;
+#ifdef CONFIG_LRNG_RUNTIME_FORCE_SEEDING_DISABLE
+module_param(force_seeding, bool, 0444);
+MODULE_PARM_DESC(force_seeding,
+		 "Allow disabling of the forced seeding when insufficient entropy is availabe\n");
+#endif
+
 /* Wait queue to wait until the LRNG is initialized - can freely be used */
 DECLARE_WAIT_QUEUE_HEAD(lrng_init_wait);
 
@@ -118,11 +125,13 @@ struct lrng_drng *lrng_drng_node_instance(void)
 
 void lrng_drng_reset(struct lrng_drng *drng)
 {
-	atomic_set(&drng->requests, LRNG_DRNG_RESEED_THRESH);
+	/* Ensure reseed during next call */
+	atomic_set(&drng->requests, 1);
 	atomic_set(&drng->requests_since_fully_seeded, 0);
 	drng->last_seeded = jiffies;
 	drng->fully_seeded = false;
-	drng->force_reseed = true;
+	/* Do not set force, as this flag is used for the emergency reseeding */
+	drng->force_reseed = false;
 	pr_debug("reset DRNG\n");
 }
 
@@ -244,20 +253,58 @@ void lrng_drng_inject(struct lrng_drng *drng, const u8 *inbuf, u32 inbuflen,
  */
 static u32 lrng_drng_seed_es_nolock(struct lrng_drng *drng)
 {
-	struct entropy_buf seedbuf __aligned(LRNG_KCAPI_ALIGN);
-	u32 collected_entropy;
+	struct entropy_buf seedbuf __aligned(LRNG_KCAPI_ALIGN),
+			   collected_seedbuf;
+	u32 collected_entropy = 0;
+	unsigned int i, num_es_delivered = 0;
+	bool forced = drng->force_reseed;
+
+	for_each_lrng_es(i)
+		collected_seedbuf.e_bits[i] = 0;
+
+	do {
+		/* Count the number of ES which delivered entropy */
+		num_es_delivered = 0;
 
-	lrng_fill_seed_buffer(&seedbuf,
-			      lrng_get_seed_entropy_osr(drng->fully_seeded));
+		if (collected_entropy)
+			pr_debug("Force fully seeding level by repeatedly pull entropy from available entropy sources\n");
+
+		lrng_fill_seed_buffer(&seedbuf,
+			lrng_get_seed_entropy_osr(drng->fully_seeded),
+				      forced && !drng->fully_seeded);
+
+		collected_entropy += lrng_entropy_rate_eb(&seedbuf);
+
+		/* Sum iterations up. */
+		for_each_lrng_es(i) {
+			collected_seedbuf.e_bits[i] += seedbuf.e_bits[i];
+			num_es_delivered += !!seedbuf.e_bits[i];
+		}
 
-	collected_entropy = lrng_entropy_rate_eb(&seedbuf);
-	lrng_drng_inject(drng, (u8 *)&seedbuf, sizeof(seedbuf),
-			 lrng_fully_seeded(drng->fully_seeded,
-					   collected_entropy, &seedbuf),
-			 "regular");
+		lrng_drng_inject(drng, (u8 *)&seedbuf, sizeof(seedbuf),
+				 lrng_fully_seeded(drng->fully_seeded,
+						   collected_entropy,
+						   &collected_seedbuf),
+				 "regular");
 
-	/* Set the seeding state of the LRNG */
-	lrng_init_ops(&seedbuf);
+		/* Set the seeding state of the LRNG */
+		lrng_init_ops(&collected_seedbuf);
+
+	/*
+	 * Emergency reseeding: If we reached the min seed threshold now
+	 * multiple times but never reached fully seeded level and we collect
+	 * entropy, keep doing it until we reached fully seeded level for
+	 * at least one DRNG. This operation is not continued if the
+	 * ES do not deliver entropy such that we cannot reach the fully seeded
+	 * level.
+	 *
+	 * The emergency reseeding implies that the consecutively injected
+	 * entropy can be added up. This is applicable due to the fact that
+	 * the entire operation is atomic which means that the DRNG is not
+	 * producing data while this is ongoing.
+	 */
+	} while (force_seeding && forced && !drng->fully_seeded &&
+		 num_es_delivered >= (lrng_ntg1_2022_compliant() ? 2 : 1));
 
 	memzero_explicit(&seedbuf, sizeof(seedbuf));
 
@@ -293,7 +340,7 @@ static void lrng_drng_seed(struct lrng_drng *drng)
 	}
 }
 
-static void _lrng_drng_seed_work(struct lrng_drng *drng, u32 node)
+static void lrng_drng_seed_work_one(struct lrng_drng *drng, u32 node)
 {
 	pr_debug("reseed triggered by system events for DRNG on NUMA node %d\n",
 		 node);
@@ -307,7 +354,7 @@ static void _lrng_drng_seed_work(struct lrng_drng *drng, u32 node)
 /*
  * DRNG reseed trigger: Kernel thread handler triggered by the schedule_work()
  */
-void lrng_drng_seed_work(struct work_struct *dummy)
+static void __lrng_drng_seed_work(bool force)
 {
 	struct lrng_drng **lrng_drng = lrng_drng_instances();
 	u32 node;
@@ -317,25 +364,32 @@ void lrng_drng_seed_work(struct work_struct *dummy)
 			struct lrng_drng *drng = lrng_drng[node];
 
 			if (drng && !drng->fully_seeded) {
-				_lrng_drng_seed_work(drng, node);
-				goto out;
+				drng->force_reseed |= force;
+				lrng_drng_seed_work_one(drng, node);
+				return;
 			}
 		}
 	} else {
 		if (!lrng_drng_init.fully_seeded) {
-			_lrng_drng_seed_work(&lrng_drng_init, 0);
-			goto out;
+			lrng_drng_init.force_reseed |= force;
+			lrng_drng_seed_work_one(&lrng_drng_init, 0);
+			return;
 		}
 	}
 
 	if (!lrng_drng_pr.fully_seeded) {
-		_lrng_drng_seed_work(&lrng_drng_pr, 0);
-		goto out;
+		lrng_drng_pr.force_reseed |= force;
+		lrng_drng_seed_work_one(&lrng_drng_pr, 0);
+		return;
 	}
 
 	lrng_pool_all_numa_nodes_seeded(true);
+}
+
+void lrng_drng_seed_work(struct work_struct *dummy)
+{
+	__lrng_drng_seed_work(false);
 
-out:
 	/* Allow the seeding operation to be called again */
 	lrng_pool_unlock();
 }
@@ -539,8 +593,25 @@ void lrng_reset(void)
 
 /******************* Generic LRNG kernel output interfaces ********************/
 
+static void lrng_force_fully_seeded(void)
+{
+	static unsigned int ctr = 0;
+
+	if (lrng_pool_all_numa_nodes_seeded_get())
+		return;
+
+	if (ctr++ < LRNG_FORCE_FULLY_SEEDED_ATTEMPT)
+		return;
+
+	lrng_pool_lock();
+	__lrng_drng_seed_work(true);
+	lrng_pool_unlock();
+	ctr = 0;
+}
+
 static int lrng_drng_sleep_while_not_all_nodes_seeded(unsigned int nonblock)
 {
+	lrng_force_fully_seeded();
 	if (lrng_pool_all_numa_nodes_seeded_get())
 		return 0;
 	if (nonblock)
@@ -552,6 +623,7 @@ static int lrng_drng_sleep_while_not_all_nodes_seeded(unsigned int nonblock)
 
 int lrng_drng_sleep_while_nonoperational(int nonblock)
 {
+	lrng_force_fully_seeded();
 	if (likely(lrng_state_operational()))
 		return 0;
 	if (nonblock)
@@ -562,6 +634,7 @@ int lrng_drng_sleep_while_nonoperational(int nonblock)
 
 int lrng_drng_sleep_while_non_min_seeded(void)
 {
+	lrng_force_fully_seeded();
 	if (likely(lrng_state_min_seeded()))
 		return 0;
 	return wait_event_interruptible(lrng_init_wait,
@@ -607,7 +680,8 @@ ssize_t lrng_get_seed(u64 *buf, size_t nbytes, unsigned int flags)
 	for (;;) {
 		lrng_fill_seed_buffer(eb,
 			lrng_get_seed_entropy_osr(flags &
-						  LRNG_GET_SEED_FULLY_SEEDED));
+						  LRNG_GET_SEED_FULLY_SEEDED),
+						  false);
 		collected_bits = lrng_entropy_rate_eb(eb);
 
 		/* Break the collection loop if we got entropy, ... */
diff --git a/drivers/char/lrng/lrng_es_mgr.c b/drivers/char/lrng/lrng_es_mgr.c
index 9bfcae617..3eda5fe19 100644
--- a/drivers/char/lrng/lrng_es_mgr.c
+++ b/drivers/char/lrng/lrng_es_mgr.c
@@ -90,7 +90,7 @@ MODULE_PARM_DESC(ntg1, "Enable AIS20/31 NTG.1 compliant seeding strategy\n");
 
 /********************************** Helper ***********************************/
 
-bool lrng_ntg1_compliant(void)
+bool lrng_ntg1_2022_compliant(void)
 {
 	/* Implies use of /dev/random w/ O_SYNC / getrandom w/ GRND_RANDOM */
 	return ntg1;
@@ -367,10 +367,9 @@ void lrng_init_ops(struct entropy_buf *eb)
 	}
 }
 
-int __init lrng_rand_initialize(void)
+void __init lrng_rand_initialize_early(void)
 {
 	struct seed {
-		ktime_t time;
 		unsigned long data[((LRNG_MAX_DIGESTSIZE +
 				     sizeof(unsigned long) - 1) /
 				    sizeof(unsigned long))];
@@ -379,19 +378,7 @@ int __init lrng_rand_initialize(void)
 	size_t longs = 0;
 	unsigned int i;
 
-	seed.time = ktime_get_real();
-
 	for (i = 0; i < ARRAY_SIZE(seed.data); i += longs) {
-#ifdef CONFIG_LRNG_RANDOM_IF
-		longs = arch_get_random_seed_longs_early(
-			seed.data + i, ARRAY_SIZE(seed.data) - i);
-		if (longs)
-			continue;
-		longs = arch_get_random_longs_early(seed.data + i,
-						    ARRAY_SIZE(seed.data) - i);
-		if (longs)
-			continue;
-#else
 		longs = arch_get_random_seed_longs(seed.data + i,
 						   ARRAY_SIZE(seed.data) - i);
 		if (longs)
@@ -400,14 +387,21 @@ int __init lrng_rand_initialize(void)
 					      ARRAY_SIZE(seed.data) - i);
 		if (longs)
 			continue;
-#endif
-		seed.data[i] = random_get_entropy();
 		longs = 1;
 	}
-	memcpy(&seed.utsname, utsname(), sizeof(*(utsname())));
+	memcpy(&seed.utsname, init_utsname(), sizeof(*(init_utsname())));
 
 	lrng_pool_insert_aux((u8 *)&seed, sizeof(seed), 0);
 	memzero_explicit(&seed, sizeof(seed));
+}
+
+void __init lrng_rand_initialize(void)
+{
+	unsigned long entropy = random_get_entropy();
+	ktime_t time = ktime_get_real();
+
+	lrng_pool_insert_aux((u8 *)&entropy, sizeof(entropy), 0);
+	lrng_pool_insert_aux((u8 *)&time, sizeof(time), 0);
 
 	/* Initialize the seed work queue */
 	INIT_WORK(&lrng_state.lrng_seed_work, lrng_drng_seed_work);
@@ -416,12 +410,17 @@ int __init lrng_rand_initialize(void)
 	invalidate_batched_entropy();
 
 	lrng_state.can_invalidate = true;
+}
 
+#ifndef CONFIG_LRNG_RANDOM_IF
+static int __init lrng_rand_initialize_call(void)
+{
+	lrng_rand_initialize_early();
+	lrng_rand_initialize();
 	return 0;
 }
 
-#ifndef CONFIG_LRNG_RANDOM_IF
-early_initcall(lrng_rand_initialize);
+early_initcall(lrng_rand_initialize_call);
 #endif
 
 /* Interface requesting a reseed of the DRNG */
@@ -451,7 +450,8 @@ void lrng_es_add_entropy(void)
 }
 
 /* Fill the seed buffer with data from the noise sources */
-void lrng_fill_seed_buffer(struct entropy_buf *eb, u32 requested_bits)
+void lrng_fill_seed_buffer(struct entropy_buf *eb, u32 requested_bits,
+			   bool force)
 {
 	struct lrng_state *state = &lrng_state;
 	u32 i, req_ent = lrng_sp80090c_compliant() ?
@@ -468,7 +468,8 @@ void lrng_fill_seed_buffer(struct entropy_buf *eb, u32 requested_bits)
 	 * operated SP800-90C compliant we want to comply with SP800-90A section
 	 * 9.2 mandating that DRNG is reseeded with the security strength.
 	 */
-	if (state->lrng_fully_seeded && (lrng_avail_entropy() < req_ent)) {
+	if (!force &&
+	    state->lrng_fully_seeded && (lrng_avail_entropy() < req_ent)) {
 		for_each_lrng_es(i)
 			eb->e_bits[i] = 0;
 
diff --git a/drivers/char/lrng/lrng_es_mgr.h b/drivers/char/lrng/lrng_es_mgr.h
index 8fa24ebbd..cc24f2390 100644
--- a/drivers/char/lrng/lrng_es_mgr.h
+++ b/drivers/char/lrng/lrng_es_mgr.h
@@ -23,11 +23,12 @@ extern struct lrng_es_cb *lrng_es[];
 #define for_each_lrng_es(ctr)		\
 	for ((ctr) = 0; (ctr) < lrng_ext_es_last; (ctr)++)
 
-bool lrng_ntg1_compliant(void);
+bool lrng_ntg1_2022_compliant(void);
 bool lrng_pool_all_numa_nodes_seeded_get(void);
 bool lrng_state_min_seeded(void);
 void lrng_debug_report_seedlevel(const char *name);
-int lrng_rand_initialize(void);
+void lrng_rand_initialize_early(void);
+void lrng_rand_initialize(void);
 bool lrng_state_operational(void);
 
 extern u32 lrng_write_wakeup_bits;
@@ -47,7 +48,8 @@ bool lrng_fully_seeded(bool fully_seeded, u32 collected_entropy,
 		       struct entropy_buf *eb);
 u32 lrng_entropy_rate_eb(struct entropy_buf *eb);
 void lrng_unset_fully_seeded(struct lrng_drng *drng);
-void lrng_fill_seed_buffer(struct entropy_buf *eb, u32 requested_bits);
+void lrng_fill_seed_buffer(struct entropy_buf *eb, u32 requested_bits,
+			   bool force);
 void lrng_init_ops(struct entropy_buf *eb);
 
 #endif /* _LRNG_ES_MGR_H */
diff --git a/drivers/char/lrng/lrng_interface_aux.c b/drivers/char/lrng/lrng_interface_aux.c
index 0eb49bd6b..36b8a32f2 100644
--- a/drivers/char/lrng/lrng_interface_aux.c
+++ b/drivers/char/lrng/lrng_interface_aux.c
@@ -19,6 +19,8 @@ struct batched_entropy {
 	union {
 		u64 entropy_u64[LRNG_DRNG_BLOCKSIZE / sizeof(u64)];
 		u32 entropy_u32[LRNG_DRNG_BLOCKSIZE / sizeof(u32)];
+		u16 entropy_u16[LRNG_DRNG_BLOCKSIZE / sizeof(u16)];
+		u8 entropy_u8[LRNG_DRNG_BLOCKSIZE / sizeof(u8)];
 	};
 	unsigned int position;
 	spinlock_t batch_lock;
@@ -77,6 +79,54 @@ u32 get_random_u32(void)
 }
 EXPORT_SYMBOL(get_random_u32);
 
+static DEFINE_PER_CPU(struct batched_entropy, batched_entropy_u16) = {
+	.batch_lock	= __SPIN_LOCK_UNLOCKED(batched_entropy_u16.lock),
+};
+
+u16 get_random_u16(void)
+{
+	u16 ret;
+	unsigned long flags;
+	struct batched_entropy *batch;
+
+	lrng_debug_report_seedlevel("get_random_u16");
+
+	batch = raw_cpu_ptr(&batched_entropy_u16);
+	spin_lock_irqsave(&batch->batch_lock, flags);
+	if (batch->position % ARRAY_SIZE(batch->entropy_u16) == 0) {
+		lrng_get_random_bytes(batch->entropy_u16, LRNG_DRNG_BLOCKSIZE);
+		batch->position = 0;
+	}
+	ret = batch->entropy_u16[batch->position++];
+	spin_unlock_irqrestore(&batch->batch_lock, flags);
+	return ret;
+}
+EXPORT_SYMBOL(get_random_u16);
+
+static DEFINE_PER_CPU(struct batched_entropy, batched_entropy_u8) = {
+	.batch_lock	= __SPIN_LOCK_UNLOCKED(batched_entropy_u8.lock),
+};
+
+u8 get_random_u8(void)
+{
+	u8 ret;
+	unsigned long flags;
+	struct batched_entropy *batch;
+
+	lrng_debug_report_seedlevel("get_random_u8");
+
+	batch = raw_cpu_ptr(&batched_entropy_u8);
+	spin_lock_irqsave(&batch->batch_lock, flags);
+	if (batch->position % ARRAY_SIZE(batch->entropy_u8) == 0) {
+		lrng_get_random_bytes(batch->entropy_u8, LRNG_DRNG_BLOCKSIZE);
+		batch->position = 0;
+	}
+	ret = batch->entropy_u8[batch->position++];
+	spin_unlock_irqrestore(&batch->batch_lock, flags);
+	return ret;
+}
+EXPORT_SYMBOL(get_random_u8);
+
 #ifdef CONFIG_SMP
 /*
  * This function is called when the CPU is coming up, with entry
diff --git a/drivers/char/lrng/lrng_interface_random_kernel.c b/drivers/char/lrng/lrng_interface_random_kernel.c
index 471390bfd..cf2250112 100644
--- a/drivers/char/lrng/lrng_interface_random_kernel.c
+++ b/drivers/char/lrng/lrng_interface_random_kernel.c
@@ -30,12 +30,15 @@ static int __init lrng_parse_trust_bootloader(char *arg)
 }
 early_param("random.trust_bootloader", lrng_parse_trust_bootloader);
 
-int __init random_init(const char *command_line)
+void __init random_init_early(const char *command_line)
 {
-	int ret = lrng_rand_initialize();
-
+	lrng_rand_initialize_early();
 	lrng_pool_insert_aux(command_line, strlen(command_line), 0);
-	return ret;
+}
+
+void __init random_init(void)
+{
+	lrng_rand_initialize();
 }
 
 /************************ LRNG kernel input interfaces ************************/
diff --git a/drivers/char/lrng/lrng_proc.c b/drivers/char/lrng/lrng_proc.c
index 2818591be..a9c8d90c7 100644
--- a/drivers/char/lrng/lrng_proc.c
+++ b/drivers/char/lrng/lrng_proc.c
@@ -42,7 +42,7 @@ static int lrng_proc_type_show(struct seq_file *m, void *v)
 		 lrng_security_strength(),
 		 numa_drngs,
 		 lrng_sp80090c_compliant() ? "SP800-90C, " : "",
-		 lrng_ntg1_compliant() ? " / 2022" : "",
+		 lrng_ntg1_2022_compliant() ? " / 2022" : "",
 		 lrng_state_min_seeded() ? "true" : "false",
 		 lrng_state_fully_seeded() ? "true" : "false",
 		 lrng_avail_entropy());
-- 
2.39.0.rc2.1.gbd5df96b79

