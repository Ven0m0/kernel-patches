From 2b530ce040afe70b6fc8c6d76a7075f3176d2f8f Mon Sep 17 00:00:00 2001
From: Oleksandr Natalenko <oleksandr@natalenko.name>
Date: Sun, 29 Jan 2023 00:32:13 +0100
Subject: [PATCH 4/4] ddcci-6.1: update to the latest git HEAD

Plus 6.1 kernel changes adoption.

Signed-off-by: Oleksandr Natalenko <oleksandr@natalenko.name>
---
 drivers/char/ddcci.c                      | 365 ++++++++++++++--------
 drivers/video/backlight/ddcci-backlight.c |  50 +--
 include/linux/ddcci.h                     |   3 +-
 3 files changed, 261 insertions(+), 157 deletions(-)

diff --git a/drivers/char/ddcci.c b/drivers/char/ddcci.c
index 2861c5374..77fee6e03 100644
--- a/drivers/char/ddcci.c
+++ b/drivers/char/ddcci.c
@@ -1,4 +1,3 @@
-// SPDX-License-Identifier: GPL-2.0-or-later
 /*
  *  DDC/CI sub-bus driver
  *
@@ -12,7 +11,8 @@
  * any later version.
  */
 
-#include <linux/fcntl.h>
+#define pr_fmt(fmt) KBUILD_MODNAME ": " fmt
+#include <asm-generic/fcntl.h>
 #include <linux/cdev.h>
 #include <linux/delay.h>
 #include <linux/device.h>
@@ -20,6 +20,8 @@
 #include <linux/i2c.h>
 #include <linux/module.h>
 #include <linux/mutex.h>
+#include <linux/rwsem.h>
+#include <linux/sem.h>
 #include <linux/slab.h>
 #include <linux/uaccess.h>
 #include <linux/version.h>
@@ -37,14 +39,14 @@ static int autoprobe_addr_count = 5;
 static dev_t ddcci_cdev_first;
 static dev_t ddcci_cdev_next;
 static dev_t ddcci_cdev_end;
-static DEFINE_MUTEX(core_lock);
+static DEFINE_SEMAPHORE(core_lock);
 
 struct bus_type ddcci_bus_type;
 EXPORT_SYMBOL_GPL(ddcci_bus_type);
 
 /* Assert neccessary string array sizes  */
 #ifndef sizeof_field
-# define sizeof_field(t, m) FIELD_SIZEOF(t, m)
+# define sizeof_field(t,m) FIELD_SIZEOF(t,m)
 #endif
 static_assert(sizeof_field(struct ddcci_device, prot) > 8);
 static_assert(sizeof_field(struct ddcci_device, type) > 8);
@@ -56,7 +58,7 @@ static_assert(sizeof_field(struct ddcci_device, module) > 8);
 struct ddcci_bus_drv_data {
 	unsigned long quirks;
 	struct i2c_client *i2c_dev;
-	struct mutex mut;
+	struct semaphore sem;
 	unsigned char recv_buffer[DDCCI_RECV_BUFFER_SIZE];
 };
 
@@ -64,31 +66,30 @@ struct ddcci_bus_drv_data {
 static void ddcci_modalias_clean(char *string, size_t n, char replacement)
 {
 	int i;
-
 	for (i = 0; i < n; ++i) {
 		char c = string[i];
-
-		if (c == 0)
+		if (c == 0) {
 			return;
-		else if (isalpha(c))
+		} else if (c < '0' || (c > '9' && c < 'A') || (c > 'Z' && c < 'a') || c > 'z') {
 			string[i] = replacement;
+		}
 	}
 }
 
 /* Write a message to the DDC/CI bus using i2c_smbus_write_byte() */
 static int __ddcci_write_bytewise(struct i2c_client *client, unsigned char addr,
-				  bool p_flag, const unsigned char *__restrict buf,
+				  bool p_flag, const unsigned char * __restrict buf,
 				  unsigned char len)
 {
 	int ret = 0;
-	unsigned char outer_addr = (unsigned char) (client->addr << 1);
-	unsigned int xor = outer_addr; /* initial xor value */
+	unsigned char outer_addr = (unsigned char)(client->addr << 1);
+	unsigned xor = outer_addr; /* initial xor value */
 
-	/* Consistency checks, maximum allowed by DDCCI spec */
-	if (len > 32)
+	/* Consistency checks */
+	if (len > 127)
 		return -EINVAL;
 
-	/* Special case: reply to 0x6E is always 0x51 */
+	/* Special case: sender to 0x6E is always 0x51 */
 	if (addr == DDCCI_DEFAULT_DEVICE_ADDR) {
 		addr = DDCCI_HOST_ADDR_ODD;
 	} else {
@@ -104,7 +105,7 @@ static int __ddcci_write_bytewise(struct i2c_client *client, unsigned char addr,
 
 	/* second byte: protocol flag and message size */
 	xor ^= ((p_flag << 7) | len);
-	ret = i2c_smbus_write_byte(client, (p_flag << 7) | len);
+	ret = i2c_smbus_write_byte(client, (p_flag << 7)|len);
 	if (ret < 0)
 		return ret;
 
@@ -127,12 +128,12 @@ static int __ddcci_write_block(struct i2c_client *client, unsigned char addr,
 			       unsigned char *sendbuf, bool p_flag,
 			       const unsigned char *data, unsigned char len)
 {
-	unsigned char outer_addr = (unsigned char) (client->addr << 1);
-	unsigned int xor = outer_addr;	/* initial xor value */
+	unsigned char outer_addr = (unsigned char)(client->addr << 1);
+	unsigned xor = outer_addr;	/* initial xor value */
 	unsigned char *ptr = sendbuf;
 
-	/* Consistency checks, maximum allowed by DDCCI spec */
-	if (len > 32)
+	/* Consistency checks */
+	if (len > 127)
 		return -EINVAL;
 
 	/* Special case: sender to 0x6E is always 0x51 */
@@ -148,7 +149,7 @@ static int __ddcci_write_block(struct i2c_client *client, unsigned char addr,
 	*(ptr++) = addr;
 	/* second byte: protocol flag and message size */
 	xor ^= ((p_flag << 7) | len);
-	*(ptr++) = (p_flag << 7) | len;
+	*(ptr++) = (p_flag << 7)|len;
 	/* payload */
 	while (len--) {
 		xor ^= (*data);
@@ -165,7 +166,7 @@ static int __ddcci_write_block(struct i2c_client *client, unsigned char addr,
 /*
  * Write a message to the DDC/CI bus.
  *
- * You must hold the bus mutex when calling this function.
+ * You must hold the bus semaphore when calling this function.
  */
 static int ddcci_write(struct i2c_client *client, unsigned char addr,
 		       bool p_flag, const unsigned char *data,
@@ -229,13 +230,13 @@ static int __ddcci_read(struct i2c_client *client, unsigned char addr,
 	}
 
 	/* validate first byte */
-	if (buf[0] != addr) {
+	if (unlikely(buf[0] != addr)) {
 		ret = (buf[0] == '\0') ? -EAGAIN : -EIO;
 		goto out_err;
 	}
 
 	/* validate second byte (protocol flag) */
-	if ((buf[1] & 0x80) != (p_flag << 7)) {
+	if (unlikely((buf[1] & 0x80) != (p_flag << 7))) {
 		if (!p_flag || !(quirks & DDCCI_QUIRK_NO_PFLAG)) {
 			ret = -EIO;
 			goto out_err;
@@ -244,13 +245,13 @@ static int __ddcci_read(struct i2c_client *client, unsigned char addr,
 
 	/* get and check payload length */
 	payload_len = buf[1] & 0x7F;
-	if (3 + payload_len > packet_length)
+	if (3+payload_len > packet_length)
 		return -EBADMSG;
-	if (3 + payload_len > len)
+	if (3+payload_len > len)
 		return -EMSGSIZE;
 
 	/* calculate checksum */
-	for (i = 0; i < 3 + payload_len; i++)
+	for (i = 0; i < 3+payload_len; i++)
 		xor ^= buf[i];
 
 	/* verify checksum */
@@ -262,7 +263,7 @@ static int __ddcci_read(struct i2c_client *client, unsigned char addr,
 	}
 
 	/* return result */
-	ret = payload_len + 3 + ((quirks & DDCCI_QUIRK_SKIP_FIRST_BYTE) ? 1:0);
+	ret = payload_len+3+((quirks & DDCCI_QUIRK_SKIP_FIRST_BYTE)?1:0);
 
 out_err:
 	return ret;
@@ -271,7 +272,7 @@ static int __ddcci_read(struct i2c_client *client, unsigned char addr,
 /*
  * Read a response from the DDC/CI bus
  *
- * You must hold the bus mutex when calling this function.
+ * You must hold the bus semaphore when calling this function.
  */
 static int ddcci_read(struct i2c_client *client, unsigned char addr,
 		      bool p_flag, unsigned char *buf, unsigned char len)
@@ -338,7 +339,7 @@ static int ddcci_get_caps(struct i2c_client *client, unsigned char addr,
 		msleep(delay);
 		/* read result chunk */
 		result = ddcci_read(client, addr, true, chunkbuf,
-				    (len > 32) ? 35 : len + 3);
+				    (len > 32) ? 35 : len+3);
 		if (result < 0)
 			goto err_free;
 
@@ -356,7 +357,7 @@ static int ddcci_get_caps(struct i2c_client *client, unsigned char addr,
 				result = -EIO;
 				goto err_free;
 			}
-			memcpy(buf, chunkbuf + 3, min((unsigned int)result - 3, len));
+			memcpy(buf, chunkbuf+3, min((unsigned int)result-3, len));
 
 			counter++;
 			/* adjust offset, etc. */
@@ -371,7 +372,7 @@ static int ddcci_get_caps(struct i2c_client *client, unsigned char addr,
 	} while (result > 3 && counter < DDCCI_MAX_CAP_CHUNKS);
 
 	kfree(chunkbuf);
-	return offset + result-3;
+	return offset+result-3;
 err_free:
 	kfree(chunkbuf);
 	return result;
@@ -496,7 +497,7 @@ static int ddcci_identify_device(struct i2c_client *client, unsigned char addr,
 
 	/* get and check payload length */
 	payload_len = buffer[1] & 0x7F;
-	if (3 + payload_len > ret) {
+	if (3+payload_len > ret) {
 		dev_dbg(&client->dev,
 			"[%02x:%02x] identification response: %*ph ...\n",
 			client->addr << 1, addr, ret, buffer);
@@ -511,7 +512,7 @@ static int ddcci_identify_device(struct i2c_client *client, unsigned char addr,
 		client->addr << 1, addr, 3+payload_len, buffer);
 
 	/* calculate checksum */
-	for (i = 0; i < 3 + payload_len; i++)
+	for (i = 0; i < 3+payload_len; i++)
 		xor ^= buffer[i];
 
 	/* verify checksum */
@@ -541,6 +542,7 @@ static int ddcci_identify_device(struct i2c_client *client, unsigned char addr,
 /* Data structure for an open file handle */
 struct ddcci_fp_data {
 	struct ddcci_device *dev;
+	bool exclusive;
 	unsigned char buffer[129];
 };
 
@@ -556,12 +558,42 @@ static int ddcci_cdev_open(struct inode *inode, struct file *filp)
 	if (!fp_data)
 		return -ENOMEM;
 
+	fp_data->exclusive = filp->f_flags & O_EXCL;
+
+	if (fp_data->exclusive) {
+		if (down_write_trylock(&dev->cdev_sem) == 0) {
+			kfree(fp_data);
+			return -EBUSY;
+		}
+	} else {
+		if (down_read_trylock(&dev->cdev_sem) == 0) {
+			kfree(fp_data);
+			return -EBUSY;
+		}
+	}
+
 	fp_data->dev = dev;
 	filp->private_data = fp_data;
 
 	return 0;
 }
 
+/* Called when the character device is closed */
+static int ddcci_cdev_close(struct inode *inode, struct file *filp)
+{
+	struct ddcci_fp_data *fp_data = filp->private_data;
+	struct ddcci_device *dev = fp_data->dev;
+
+	if (fp_data->exclusive)
+		up_write(&dev->cdev_sem);
+	else
+		up_read(&dev->cdev_sem);
+
+	filp->private_data = NULL;
+	kfree(fp_data);
+	return 0;
+}
+
 /* Called when reading from the character device */
 static ssize_t ddcci_cdev_read(struct file *filp, char __user *buffer,
 			       size_t length, loff_t *offset)
@@ -577,10 +609,10 @@ static ssize_t ddcci_cdev_read(struct file *filp, char __user *buffer,
 
 	/* Lock mutex */
 	if (nonblocking) {
-		if (mutex_trylock(&dev->bus_drv_data->mut))
+		if (down_trylock(&dev->bus_drv_data->sem))
 			return -EAGAIN;
 	} else {
-		if (mutex_lock_interruptible(&dev->bus_drv_data->mut))
+		if (down_interruptible(&dev->bus_drv_data->sem))
 			return -ERESTARTSYS;
 	}
 
@@ -597,7 +629,7 @@ static ssize_t ddcci_cdev_read(struct file *filp, char __user *buffer,
 	}
 
 out:
-	mutex_unlock(&dev->bus_drv_data->mut);
+	up(&dev->bus_drv_data->sem);
 	return ret;
 }
 
@@ -619,10 +651,10 @@ static ssize_t ddcci_cdev_write(struct file *filp, const char __user *buffer,
 
 	/* Lock mutex */
 	if (nonblocking) {
-		if (mutex_trylock(&dev->bus_drv_data->mut))
+		if (down_trylock(&dev->bus_drv_data->sem))
 			return -EAGAIN;
 	} else {
-		if (mutex_lock_interruptible(&dev->bus_drv_data->mut))
+		if (down_interruptible(&dev->bus_drv_data->sem))
 			return -ERESTARTSYS;
 	}
 
@@ -640,21 +672,28 @@ static ssize_t ddcci_cdev_write(struct file *filp, const char __user *buffer,
 
 	if (ret >= 0) {
 		msleep(delay);
-		mutex_unlock(&dev->bus_drv_data->mut);
+		up(&dev->bus_drv_data->sem);
 		return count;
 	}
 
 err_out:
-	mutex_unlock(&dev->bus_drv_data->mut);
+	up(&dev->bus_drv_data->sem);
 	return ret;
 }
 
+/* Called when seeking the character device */
+static loff_t ddcci_cdev_seek(struct file *filp, loff_t offset, int anchor)
+{
+	return -EINVAL;
+}
+
 static const struct file_operations ddcci_fops = {
 	.owner = THIS_MODULE,
 	.read = ddcci_cdev_read,
 	.write = ddcci_cdev_write,
 	.open = ddcci_cdev_open,
-	.llseek = no_llseek
+	.release = ddcci_cdev_close,
+	.llseek = ddcci_cdev_seek
 };
 
 /* Set up the character device for a DDC/CI device */
@@ -669,6 +708,9 @@ static int ddcci_setup_char_device(struct ddcci_device *device)
 		goto out;
 	}
 
+	/* Initialize rwsem */
+	init_rwsem(&device->cdev_sem);
+
 	/* Initialize character device node */
 	cdev_init(&device->cdev, &ddcci_fops);
 	device->cdev.owner = THIS_MODULE;
@@ -696,17 +738,17 @@ static ssize_t ddcci_attr_capabilities_show(struct device *dev,
 	ssize_t ret = -ENOENT;
 	size_t len;
 
-	if (device != NULL) {
+	if (likely(device != NULL)) {
 		len = device->capabilities_len;
-		if (len > PAGE_SIZE)
+		if (unlikely(len > PAGE_SIZE))
 			len = PAGE_SIZE;
 		if (len == 0) {
 			ret = len;
 		} else {
 			memcpy(buf, device->capabilities, len);
-			if (len < PAGE_SIZE) {
+			if (likely(len < PAGE_SIZE)) {
 				buf[len] = '\n';
-				ret = len + 1;
+				ret = len+1;
 			}
 		}
 	}
@@ -721,14 +763,14 @@ static ssize_t ddcci_attr_prot_show(struct device *dev,
 	ssize_t ret = -ENOENT;
 	size_t len;
 
-	if (device != NULL) {
+	if (likely(device != NULL)) {
 		len = strnlen(device->prot, sizeof(device->prot));
 		strncpy(buf, device->prot, PAGE_SIZE);
 		if (len == 0) {
 			ret = len;
-		} else if (len < PAGE_SIZE) {
+		} else if (likely(len < PAGE_SIZE)) {
 			buf[len] = '\n';
-			ret = len + 1;
+			ret = len+1;
 		} else {
 			ret = PAGE_SIZE;
 		}
@@ -743,14 +785,14 @@ static ssize_t ddcci_attr_type_show(struct device *dev,
 	ssize_t ret = -ENOENT;
 	size_t len;
 
-	if (device != NULL) {
+	if (likely(device != NULL)) {
 		len = strnlen(device->type, sizeof(device->type));
 		strncpy(buf, device->type, PAGE_SIZE);
 		if (len == 0) {
 			ret = len;
-		} else if (len < PAGE_SIZE) {
+		} else if (likely(len < PAGE_SIZE)) {
 			buf[len] = '\n';
-			ret = len + 1;
+			ret = len+1;
 		} else {
 			ret = PAGE_SIZE;
 		}
@@ -765,14 +807,14 @@ static ssize_t ddcci_attr_model_show(struct device *dev,
 	ssize_t ret = -ENOENT;
 	size_t len;
 
-	if (device != NULL) {
+	if (likely(device != NULL)) {
 		len = strnlen(device->model, sizeof(device->model));
 		strncpy(buf, device->model, PAGE_SIZE);
 		if (len == 0) {
 			ret = len;
-		} else if (len < PAGE_SIZE) {
+		} else if (likely(len < PAGE_SIZE)) {
 			buf[len] = '\n';
-			ret = len + 1;
+			ret = len+1;
 		} else {
 			ret = PAGE_SIZE;
 		}
@@ -785,10 +827,20 @@ static ssize_t ddcci_attr_vendor_show(struct device *dev,
 {
 	struct ddcci_device *device = ddcci_verify_device(dev);
 	ssize_t ret = -ENOENT;
+	size_t len;
 
-	if (device != NULL)
-		ret = sysfs_emit(buf, "%s\n", device->vendor);
-
+	if (likely(device != NULL)) {
+		len = strnlen(device->vendor, sizeof(device->vendor));
+		strncpy(buf, device->vendor, PAGE_SIZE);
+		if (len == 0) {
+			ret = len;
+		} else if (likely(len < PAGE_SIZE)) {
+			buf[len] = '\n';
+			ret = len+1;
+		} else {
+			ret = PAGE_SIZE;
+		}
+	}
 	return ret;
 }
 
@@ -797,10 +849,20 @@ static ssize_t ddcci_attr_module_show(struct device *dev,
 {
 	struct ddcci_device *device = ddcci_verify_device(dev);
 	ssize_t ret = -ENOENT;
+	size_t len;
 
-	if (device != NULL)
-		ret = sysfs_emit(buf, "%s\n", device->module);
-
+	if (likely(device != NULL)) {
+		len = strnlen(device->module, sizeof(device->module));
+		strncpy(buf, device->module, PAGE_SIZE);
+		if (len == 0) {
+			ret = len;
+		} else if (likely(len < PAGE_SIZE)) {
+			buf[len] = '\n';
+			ret = len+1;
+		} else {
+			ret = PAGE_SIZE;
+		}
+	}
 	return ret;
 }
 
@@ -810,7 +872,7 @@ static ssize_t ddcci_attr_serial_show(struct device *dev,
 	struct ddcci_device *device = ddcci_verify_device(dev);
 	ssize_t ret = -ENOENT;
 
-	if (device != NULL)
+	if (likely(device != NULL))
 		ret = scnprintf(buf, PAGE_SIZE, "%d\n", device->device_number);
 
 	return ret;
@@ -825,7 +887,7 @@ static ssize_t ddcci_attr_modalias_show(struct device *dev,
 	char vendor[ARRAY_SIZE(device->model)];
 	char module[ARRAY_SIZE(device->model)];
 
-	if (device != NULL) {
+	if (likely(device != NULL)) {
 		memcpy(model, device->model, sizeof(model));
 		memcpy(vendor, device->vendor, sizeof(vendor));
 		memcpy(module, device->module, sizeof(module));
@@ -845,14 +907,14 @@ static ssize_t ddcci_attr_modalias_show(struct device *dev,
 	return ret;
 }
 
-static DEVICE_ATTR(capabilities, 0444, ddcci_attr_capabilities_show, NULL);
-static DEVICE_ATTR(idProt, 0444, ddcci_attr_prot_show, NULL);
-static DEVICE_ATTR(idType, 0444, ddcci_attr_type_show, NULL);
-static DEVICE_ATTR(idModel, 0444, ddcci_attr_model_show, NULL);
-static DEVICE_ATTR(idVendor, 0444, ddcci_attr_vendor_show, NULL);
-static DEVICE_ATTR(idModule, 0444, ddcci_attr_module_show, NULL);
-static DEVICE_ATTR(idSerial, 0444, ddcci_attr_serial_show, NULL);
-static DEVICE_ATTR(modalias, 0444, ddcci_attr_modalias_show, NULL);
+static DEVICE_ATTR(capabilities, S_IRUGO, ddcci_attr_capabilities_show, NULL);
+static DEVICE_ATTR(idProt, S_IRUGO, ddcci_attr_prot_show, NULL);
+static DEVICE_ATTR(idType, S_IRUGO, ddcci_attr_type_show, NULL);
+static DEVICE_ATTR(idModel, S_IRUGO, ddcci_attr_model_show, NULL);
+static DEVICE_ATTR(idVendor, S_IRUGO, ddcci_attr_vendor_show, NULL);
+static DEVICE_ATTR(idModule, S_IRUGO, ddcci_attr_module_show, NULL);
+static DEVICE_ATTR(idSerial, S_IRUGO, ddcci_attr_serial_show, NULL);
+static DEVICE_ATTR(modalias, S_IRUGO, ddcci_attr_modalias_show, NULL);
 
 static struct attribute *ddcci_char_device_attrs[] = {
 	&dev_attr_capabilities.attr,
@@ -933,11 +995,11 @@ static void ddcci_device_release(struct device *dev)
 
 	/* Teardown chardev */
 	if (dev->devt) {
-		mutex_lock(&core_lock);
+		down(&core_lock);
 		if (device->cdev.dev == ddcci_cdev_next-1)
 			ddcci_cdev_next--;
 		cdev_del(&device->cdev);
-		mutex_unlock(&core_lock);
+		up(&core_lock);
 	}
 
 	/* Free capability string */
@@ -1005,14 +1067,14 @@ static struct device_type ddcci_dependent_type = {
  */
 struct ddcci_device *ddcci_verify_device(struct device *dev)
 {
-	if (!dev)
+	if (unlikely(!dev))
 		return NULL;
 	return (dev->type == &ddcci_device_type
 		|| dev->type == &ddcci_dependent_type)
 			? to_ddcci_device(dev)
 			: NULL;
 }
-EXPORT_SYMBOL_GPL(ddcci_verify_device);
+EXPORT_SYMBOL(ddcci_verify_device);
 
 /**
  * ddcci_quirks - Get quirks for DDC/CI device
@@ -1020,13 +1082,13 @@ EXPORT_SYMBOL_GPL(ddcci_verify_device);
  */
 unsigned long ddcci_quirks(struct ddcci_device *dev)
 {
-	if (WARN_ON(!dev))
+	if (unlikely(WARN_ON(!dev)))
 		return ~0L;
-	if (WARN_ON(!dev->bus_drv_data))
+	if (unlikely(WARN_ON(!dev->bus_drv_data)))
 		return ~0L;
 	return dev->bus_drv_data->quirks;
 }
-EXPORT_SYMBOL_GPL(ddcci_quirks);
+EXPORT_SYMBOL(ddcci_quirks);
 
 /**
  * ddcci_register_driver - register DDC/CI driver
@@ -1037,6 +1099,10 @@ int ddcci_register_driver(struct module *owner, struct ddcci_driver *driver)
 {
 	int ret;
 
+	/* Can't register until after driver model init */
+	if (unlikely(WARN_ON(!ddcci_bus_type.p)))
+		return -EAGAIN;
+
 	pr_debug("registering driver [%s]\n", driver->driver.name);
 
 	/* add the driver to the list of ddcci drivers in the driver core */
@@ -1054,7 +1120,7 @@ int ddcci_register_driver(struct module *owner, struct ddcci_driver *driver)
 
 	return 0;
 }
-EXPORT_SYMBOL_GPL(ddcci_register_driver);
+EXPORT_SYMBOL(ddcci_register_driver);
 
 /**
  * ddcci_del_driver - unregister DDC/CI driver
@@ -1065,7 +1131,7 @@ void ddcci_del_driver(struct ddcci_driver *driver)
 	driver_unregister(&driver->driver);
 	pr_debug("driver [%s] unregistered\n", driver->driver.name);
 }
-EXPORT_SYMBOL_GPL(ddcci_del_driver);
+EXPORT_SYMBOL(ddcci_del_driver);
 
 /**
  * ddcci_device_write - Write a message to a DDC/CI device
@@ -1074,22 +1140,22 @@ EXPORT_SYMBOL_GPL(ddcci_del_driver);
  * @data: Data that will be written to the device
  * @length: How many bytes to write
  *
- * Writes the message to the device and sleeps for 'delay' milliseconds
+ * Writes the message to the device and sleeps (see module parameter 'delay')
  */
 int ddcci_device_write(struct ddcci_device *dev, bool p_flag,
 		       unsigned char *data, unsigned char length)
 {
 	int ret;
 
-	if (mutex_lock_interruptible(&dev->bus_drv_data->mut))
+	if (down_interruptible(&dev->bus_drv_data->sem))
 		return -EAGAIN;
 
 	ret = ddcci_write(dev->bus_drv_data->i2c_dev, dev->inner_addr, p_flag, data, length);
 	msleep(delay);
-	mutex_unlock(&dev->bus_drv_data->mut);
+	up(&dev->bus_drv_data->sem);
 	return ret;
 }
-EXPORT_SYMBOL_GPL(ddcci_device_write);
+EXPORT_SYMBOL(ddcci_device_write);
 
 /**
  * ddcci_device_read - Read a response from a DDC/CI device
@@ -1103,14 +1169,14 @@ int ddcci_device_read(struct ddcci_device *dev, bool p_flag,
 {
 	int ret;
 
-	if (mutex_lock_interruptible(&dev->bus_drv_data->mut))
+	if (down_interruptible(&dev->bus_drv_data->sem))
 		return -EAGAIN;
 
 	ret = ddcci_read(dev->bus_drv_data->i2c_dev, dev->inner_addr, p_flag, buffer, length);
-	mutex_unlock(&dev->bus_drv_data->mut);
+	up(&dev->bus_drv_data->sem);
 	return ret;
 }
-EXPORT_SYMBOL_GPL(ddcci_device_read);
+EXPORT_SYMBOL(ddcci_device_read);
 
 /**
  * ddcci_device_writeread - Write a message to a device and read the response
@@ -1129,7 +1195,7 @@ int ddcci_device_writeread(struct ddcci_device *dev, bool p_flag,
 {
 	int ret;
 
-	if (mutex_lock_interruptible(&dev->bus_drv_data->mut))
+	if (down_interruptible(&dev->bus_drv_data->sem))
 		return -EAGAIN;
 
 	ret = ddcci_write(dev->bus_drv_data->i2c_dev, dev->inner_addr, p_flag, buffer, length);
@@ -1138,10 +1204,10 @@ int ddcci_device_writeread(struct ddcci_device *dev, bool p_flag,
 	msleep(delay);
 	ret = ddcci_read(dev->bus_drv_data->i2c_dev, dev->inner_addr, p_flag, buffer, maxlength);
 err:
-	mutex_unlock(&dev->bus_drv_data->mut);
+	up(&dev->bus_drv_data->sem);
 	return ret;
 }
-EXPORT_SYMBOL_GPL(ddcci_device_writeread);
+EXPORT_SYMBOL(ddcci_device_writeread);
 
 #define IS_ANY_ID(x) (((x)[0] == '\xFF') && ((x)[7] == '\xFF'))
 
@@ -1199,20 +1265,29 @@ static int ddcci_device_probe(struct device *dev)
 	return ret;
 }
 
-static void ddcci_device_remove(struct device *dev)
+static int ddcci_device_remove(struct device *dev)
 {
 	struct ddcci_device	*device = ddcci_verify_device(dev);
 	struct ddcci_driver	*driver;
 	int ret = 0;
 
 	if (!device)
-		return;
+		return -EINVAL;
 	driver = to_ddcci_driver(dev->driver);
 
 	if (driver->remove)
 		ret = driver->remove(device);
+
+	return ret;
 }
 
+#if LINUX_VERSION_CODE >= KERNEL_VERSION(5, 15, 0)
+static void ddcci_device_remove_void(struct device *dev)
+{
+	ddcci_device_remove(dev);
+}
+#endif
+
 /**
  * DDCCI bus type structure
  */
@@ -1220,7 +1295,11 @@ struct bus_type ddcci_bus_type = {
 	.name		= "ddcci",
 	.match		= ddcci_device_match,
 	.probe		= ddcci_device_probe,
+#if LINUX_VERSION_CODE >= KERNEL_VERSION(5, 15, 0)
+	.remove		= ddcci_device_remove_void
+#else
 	.remove		= ddcci_device_remove
+#endif
 };
 
 /* Main I2C driver */
@@ -1243,7 +1322,7 @@ static char *ddcci_capstr_tok(const char *s, int depth)
 			depth--;
 		else
 			break;
-		ptr = end + 1;
+		ptr = end+1;
 	}
 	return end;
 }
@@ -1260,8 +1339,8 @@ static char *ddcci_capstr_tok(const char *s, int depth)
  * If the tag is not found or another error occurs, an ERR_PTR is returned
  * and `length` stays untouched.
  */
-const char *ddcci_find_capstr_item(const char *capabilities,
-				   const char *__restrict tag,
+const char *ddcci_find_capstr_item(const char * capabilities,
+				   const char * __restrict tag,
 				   size_t *length)
 {
 	const char *src = capabilities, *ptr;
@@ -1269,44 +1348,45 @@ const char *ddcci_find_capstr_item(const char *capabilities,
 	int taglen = strnlen(tag, 1024);
 
 	/* Check length of requested tag */
-	if (taglen <= 0 || taglen > 1023)
+	if (unlikely(taglen <= 0 || taglen > 1023))
 		return ERR_PTR(-EINVAL);
 
 	/* Find tag */
-	while (src && (strncmp(src + 1, tag, taglen) != 0 || src[1 + taglen] != '('))
-		src = ddcci_capstr_tok(src + 1, -1);
+	while (src && (strncmp(src+1, tag, taglen) != 0 || src[1+taglen] != '('))
+		src = ddcci_capstr_tok(src+1, -1);
 	if (!src || src[0] == '\0')
 		return ERR_PTR(-ENOENT);
 
 	/* Locate end of value */
-	src += taglen + 2;
+	src += taglen+2;
 	ptr = ddcci_capstr_tok(src, 0);
-	if (!ptr)
+	if (unlikely(!ptr))
 		return ERR_PTR(-EOVERFLOW);
 
 	/* Check length of tag data */
 	len = ptr-src;
-	if (len < 0 || len > 65535)
+	if (unlikely(len < 0 || len > 65535))
 		return ERR_PTR(-EMSGSIZE);
 
 	/* Return pointer and length */
-	if (length != NULL)
+	if (likely(length != NULL))
 		*length = (size_t)len;
 	return src;
 }
-EXPORT_SYMBOL_GPL(ddcci_find_capstr_item);
+EXPORT_SYMBOL(ddcci_find_capstr_item);
 
 /* Search the capability string for a tag and copy the value to dest */
 static int ddcci_cpy_capstr_item(char *dest, const char *src,
-				  const char *__restrict tag, size_t maxlen)
+				  const char * __restrict tag, size_t maxlen)
 {
 	const char *ptr;
 	size_t len;
 
 	/* Find tag */
 	ptr = ddcci_find_capstr_item(src, tag, &len);
-	if (IS_ERR(ptr))
+	if (IS_ERR(ptr)) {
 		return PTR_ERR(ptr);
+	}
 
 	/* Copy value */
 	memcpy(dest, ptr, min(len, maxlen));
@@ -1387,7 +1467,7 @@ static int ddcci_detect_device(struct i2c_client *client, unsigned char addr,
 	struct ddcci_bus_drv_data *drv_data = i2c_get_clientdata(client);
 	struct ddcci_device *device = NULL;
 
-	mutex_lock(&drv_data->mut);
+	down(&drv_data->sem);
 
 	/* Allocate buffer big enough for any capability string */
 	buffer = kmalloc(16384, GFP_KERNEL);
@@ -1426,7 +1506,8 @@ static int ddcci_detect_device(struct i2c_client *client, unsigned char addr,
 		device->flags = DDCCI_FLAG_DEPENDENT | DDCCI_FLAG_EXTERNAL;
 		ret = dev_set_name(&device->dev, "ddcci%de%02x", client->adapter->nr, addr);
 	} else {
-		/* Dependent device of external dependent device Just in case something like this exists */
+		/* Dependent device of external dependent device
+		   Just in case something like this exists */
 		device->dev.type = &ddcci_dependent_type;
 		device->flags = DDCCI_FLAG_DEPENDENT | DDCCI_FLAG_EXTERNAL;
 		ret = dev_set_name(&device->dev, "ddcci%de%02x%02x", client->adapter->nr, outer_addr, addr);
@@ -1438,10 +1519,11 @@ static int ddcci_detect_device(struct i2c_client *client, unsigned char addr,
 	/* Read identification and check for quirks */
 	ret = ddcci_identify_device(client, addr, buffer, 29);
 	if (ret < 0) {
-		if (!dependent && (ret == -EBADMSG || ret == -EMSGSIZE))
+		if (!dependent && (ret == -EBADMSG || ret == -EMSGSIZE)) {
 			dev_warn(&device->dev, "DDC/CI main device sent broken response on identification. Trying to detect solely based on capability information.\n");
-		else
+		} else {
 			goto err_free;
+		}
 	}
 
 	if (ret == 29 && buffer[0] == DDCCI_REPLY_ID) {
@@ -1453,28 +1535,26 @@ static int ddcci_detect_device(struct i2c_client *client, unsigned char addr,
 	/* Read capabilities */
 	ret = ddcci_get_caps(client, addr, buffer, 16384);
 	if (ret > 0) {
-		/*
-		 *	Fixup unparenthesized capability strings, but only if the first
-		 *	character is an ascii lower case letter.
-		 *	This should still allow an early exit for completely garbled
-		 *	data but helps detecting devices where only the parentheses are
-		 *	missing, as the second char must be the first character of a
-		 *	keyword.
-		 */
+		/* Fixup unparenthesized capability strings, but only if the first
+		   character is an ascii lower case letter.
+		   This should still allow an early exit for completely garbled
+		   data but helps detecting devices where only the parentheses are
+		   missing, as the second char must be the first character of a
+		   keyword. */
 		if (ret > 2 && buffer[0] >= 'a' && buffer[0] <= 'z') {
 			dev_err(&device->dev, "DDC/CI device quirk detected: unparenthesized capability string\n");
-			device->capabilities = kzalloc(ret + 3, GFP_KERNEL);
+			device->capabilities = kzalloc(ret+3, GFP_KERNEL);
 			if (!device->capabilities) {
 				ret = -ENOMEM;
 				goto err_free;
 			}
-			device->capabilities_len = ret + 2;
+			device->capabilities_len = ret+2;
 			memcpy(&(device->capabilities[1]), buffer, ret);
 			device->capabilities[0] = '(';
-			device->capabilities[ret + 1] = ')';
+			device->capabilities[ret+1] = ')';
 		} else {
 			/* Standard case: simply copy the received string */
-			device->capabilities = kzalloc(ret + 1, GFP_KERNEL);
+			device->capabilities = kzalloc(ret+1, GFP_KERNEL);
 			if (!device->capabilities) {
 				ret = -ENOMEM;
 				goto err_free;
@@ -1501,14 +1581,14 @@ static int ddcci_detect_device(struct i2c_client *client, unsigned char addr,
 	}
 
 	/* Setup chardev */
-	mutex_lock(&core_lock);
+	down(&core_lock);
 	ret = ddcci_setup_char_device(device);
-	mutex_unlock(&core_lock);
+	up(&core_lock);
 	if (ret)
 		goto err_free;
 
-	/* Release mutex and add device to the tree */
-	mutex_unlock(&drv_data->mut);
+	/* Release semaphore and add device to the tree */
+	up(&drv_data->sem);
 	pr_debug("found device at %d:%02x:%02x\n", client->adapter->nr, outer_addr, addr);
 	ret = device_add(&device->dev);
 	if (ret)
@@ -1518,7 +1598,7 @@ static int ddcci_detect_device(struct i2c_client *client, unsigned char addr,
 err_free:
 	put_device(&device->dev);
 err_end:
-	mutex_unlock(&drv_data->mut);
+	up(&drv_data->sem);
 end:
 	kfree(buffer);
 	return ret;
@@ -1603,7 +1683,7 @@ static int ddcci_probe(struct i2c_client *client, const struct i2c_device_id *id
 	if (!drv_data)
 		return -ENOMEM;
 	drv_data->i2c_dev = client;
-	mutex_init(&drv_data->mut);
+	sema_init(&drv_data->sem, 1);
 
 	/* Set i2c client data */
 	i2c_set_clientdata(client, drv_data);
@@ -1665,7 +1745,11 @@ static int ddcci_probe(struct i2c_client *client, const struct i2c_device_id *id
  * Find next device on i2c_client not flagged with
  * DDCCI_FLAG_REMOVED and flag it.
  */
+#if LINUX_VERSION_CODE >= KERNEL_VERSION(5,3,0)
 static int ddcci_remove_helper(struct device *dev, const void *p)
+#else
+static int ddcci_remove_helper(struct device *dev, void *p)
+#endif
 {
 	struct ddcci_device *device;
 
@@ -1675,7 +1759,6 @@ static int ddcci_remove_helper(struct device *dev, const void *p)
 
 	if (!p || (dev->parent == p)) {
 		device->flags |= DDCCI_FLAG_REMOVED;
-		/* Memory Barrier */
 		wmb();
 		return 1;
 	}
@@ -1689,7 +1772,7 @@ static int ddcci_remove(struct i2c_client *client)
 	struct ddcci_bus_drv_data *drv_data = i2c_get_clientdata(client);
 	struct device *dev;
 
-	mutex_lock(&drv_data->mut);
+	down(&drv_data->sem);
 	while (1) {
 		dev = bus_find_device(&ddcci_bus_type, NULL, client,
 				      ddcci_remove_helper);
@@ -1698,10 +1781,17 @@ static int ddcci_remove(struct i2c_client *client)
 		device_unregister(dev);
 		put_device(dev);
 	}
-	mutex_unlock(&drv_data->mut);
+	up(&drv_data->sem);
 	return 0;
 }
 
+#if LINUX_VERSION_CODE >= KERNEL_VERSION(6, 1, 0)
+static void ddcci_remove_void(struct i2c_client *client)
+{
+	ddcci_remove(client);
+}
+#endif
+
 /*
  * I2C driver device identification table.
  */
@@ -1723,7 +1813,11 @@ static struct i2c_driver ddcci_driver = {
 
 	.id_table	= ddcci_idtable,
 	.probe		= ddcci_probe,
+#if LINUX_VERSION_CODE >= KERNEL_VERSION(6, 1, 0)
+	.remove		= ddcci_remove_void,
+#else
 	.remove		= ddcci_remove,
+#endif
 	.class		= I2C_CLASS_DDC,
 	.detect		= ddcci_detect,
 	.address_list	= I2C_ADDRS(
@@ -1747,7 +1841,7 @@ static int __init ddcci_module_init(void)
 		goto err_chrdevreg;
 	}
 	ddcci_cdev_next = ddcci_cdev_first;
-	ddcci_cdev_end = MKDEV(MAJOR(ddcci_cdev_first), MINOR(ddcci_cdev_first) + 128);
+	ddcci_cdev_end = MKDEV(MAJOR(ddcci_cdev_first), MINOR(ddcci_cdev_first)+128);
 
 	/* Register bus */
 	ret = bus_register(&ddcci_bus_type);
@@ -1799,7 +1893,14 @@ static void __exit ddcci_module_exit(void)
 module_init(ddcci_module_init);
 module_exit(ddcci_module_exit);
 
+/* Module parameter description */
+module_param(delay, uint, S_IRUGO|S_IWUSR);
+MODULE_PARM_DESC(delay, "default delay after bus writes (in ms, default 60)");
+module_param_array(autoprobe_addrs, ushort, &autoprobe_addr_count, S_IRUGO|S_IWUSR);
+MODULE_PARM_DESC(autoprobe_addrs, "internal dependent device addresses to autoprobe");
+
 /* Module description */
-MODULE_AUTHOR("Christoph Grenz <christophg+lkml@grenz-bonn.de>");
+MODULE_AUTHOR("Christoph Grenz");
 MODULE_DESCRIPTION("DDC/CI bus driver");
+MODULE_VERSION("0.4.2");
 MODULE_LICENSE("GPL");
diff --git a/drivers/video/backlight/ddcci-backlight.c b/drivers/video/backlight/ddcci-backlight.c
index d37eb1423..7a9852207 100644
--- a/drivers/video/backlight/ddcci-backlight.c
+++ b/drivers/video/backlight/ddcci-backlight.c
@@ -1,4 +1,3 @@
-// SPDX-License-Identifier: GPL-2.0-or-later
 /*
  *  DDC/CI monitor backlight driver
  *
@@ -142,12 +141,12 @@ static const struct backlight_ops ddcci_backlight_ops = {
 static const char *ddcci_monitor_vcp_name(unsigned char vcp)
 {
 	switch (vcp) {
-	case DDCCI_MONITOR_BL_WHITE:
-		return "backlight";
-	case DDCCI_MONITOR_LUMINANCE:
-		return "luminance";
-	default:
-		return "???";
+		case DDCCI_MONITOR_BL_WHITE:
+			return "backlight";
+		case DDCCI_MONITOR_LUMINANCE:
+			return "luminance";
+		default:
+			return "???";
 	}
 }
 
@@ -156,20 +155,21 @@ static const char *ddcci_monitor_next_vcp_item(const char *ptr)
 	int depth = 0;
 
 	/* Sanity check */
-	if (ptr == NULL || ptr[0] == '\0')
+	if (unlikely(ptr == NULL || ptr[0] == '\0'))
 		return NULL;
 
 	/* Find next white space outside of parentheses */
 	while ((ptr = strpbrk(ptr, " ()"))) {
-		if (!ptr || depth == INT_MAX)
+		if (!ptr || depth == INT_MAX) {
 			return NULL;
-		else if (*ptr == '(')
+		} else if (*ptr == '(') {
 			depth++;
-		else if (depth > 0) {
+		} else if (depth > 0) {
 			if (*ptr == ')')
 				depth--;
-		} else
+		} else {
 			break;
+		}
 		++ptr;
 	}
 
@@ -177,7 +177,7 @@ static const char *ddcci_monitor_next_vcp_item(const char *ptr)
 	ptr = skip_spaces(ptr);
 
 	/* Check if we're now at the end of the list */
-	if (*ptr == '\0' || *ptr == ')')
+	if (unlikely(*ptr == '\0' || *ptr == ')'))
 		return NULL;
 
 	return ptr;
@@ -189,11 +189,11 @@ static bool ddcci_monitor_find_vcp(unsigned char vcp, const char *s)
 	char vcp_hex[3];
 
 	/* Sanity check */
-	if (s == NULL || s[0] == '\0')
+	if (unlikely(s == NULL || s[0] == '\0'))
 		return false;
 
 	/* Create hex representation of VCP */
-	if (snprintf(vcp_hex, 3, "%02hhX", vcp) != 2) {
+	if (unlikely(snprintf(vcp_hex, 3, "%02hhX", vcp) != 2)) {
 		pr_err("snprintf failed to convert to hex. This should not happen.\n");
 		return false;
 	}
@@ -201,8 +201,9 @@ static bool ddcci_monitor_find_vcp(unsigned char vcp, const char *s)
 	/* Search for it */
 	do {
 		if (strncasecmp(vcp_hex, ptr, 2) == 0) {
-			if (ptr[2] == ' ' || ptr[2] == '(' || ptr[2] == ')')
+			if (ptr[2] == ' ' || ptr[2] == '(' || ptr[2] == ')') {
 				return true;
+			}
 		}
 	} while ((ptr = ddcci_monitor_next_vcp_item(ptr)));
 
@@ -214,7 +215,6 @@ static int ddcci_backlight_create_symlink(struct ddcci_device *ddcci_dev)
 	int i, result;
 	struct device *dev = &ddcci_dev->dev;
 	struct kernfs_node *dirent;
-
 	for (i = 0; i < 3; ++i) {
 		dev = dev->parent;
 		if (!dev) {
@@ -230,10 +230,11 @@ static int ddcci_backlight_create_symlink(struct ddcci_device *ddcci_dev)
 	}
 
 	result = sysfs_create_link(&dev->kobj, &ddcci_dev->dev.kobj, "ddcci_backlight");
-	if (result == 0)
+	if (result == 0) {
 		dev_dbg(&ddcci_dev->dev, "created symlink %s/ddcci_backlight\n", dev_name(dev));
-	else
+	} else {
 		dev_info(&ddcci_dev->dev, "failed to create convenience symlink: %d\n", result);
+	}
 	return result;
 }
 
@@ -242,15 +243,15 @@ static int ddcci_backlight_remove_symlink(struct ddcci_device *ddcci_dev)
 	int i;
 	struct device *dev = &ddcci_dev->dev;
 	struct kernfs_node *dirent;
-
 	for (i = 0; i < 3; ++i) {
 		dev = dev->parent;
 		if (!dev)
 			return -ENOENT;
 	}
 	dirent = sysfs_get_dirent(dev->kobj.sd, "ddcci_backlight");
-	if (!dirent)
+	if (!dirent) {
 		return -ENOENT;
+	}
 
 	if ((dirent->flags & KERNFS_LINK) == 0) {
 		sysfs_put(dirent);
@@ -364,8 +365,9 @@ static int ddcci_monitor_probe(struct ddcci_device *dev,
 		 ddcci_monitor_vcp_name(drv_data->used_vcp),
 		 dev_name(&dev->dev));
 
-	if (convenience_symlink)
+	if (convenience_symlink) {
 		ddcci_backlight_create_symlink(dev);
+	}
 
 	goto end;
 err_free:
@@ -400,10 +402,10 @@ static struct ddcci_driver ddcci_backlight_driver = {
 module_ddcci_driver(ddcci_backlight_driver);
 
 /* Module parameter description */
-module_param(convenience_symlink, bool, 0644);
+module_param(convenience_symlink, bool, S_IRUGO|S_IWUSR);
 MODULE_PARM_DESC(convenience_symlink, "add convenience symlink \"ddcci_backlight\" to ancestor device in sysfs (default true)");
 
-MODULE_AUTHOR("Christoph Grenz <christophg+lkml@grenz-bonn.de>");
+MODULE_AUTHOR("Christoph Grenz");
 MODULE_DESCRIPTION("DDC/CI generic monitor backlight driver");
 MODULE_VERSION("0.4.2");
 MODULE_LICENSE("GPL");
diff --git a/include/linux/ddcci.h b/include/linux/ddcci.h
index 690a9ff85..a219f031e 100644
--- a/include/linux/ddcci.h
+++ b/include/linux/ddcci.h
@@ -1,4 +1,3 @@
-/* SPDX-License-Identifier: GPL-2.0-or-later */
 /*
  *  DDC/CI bus driver
  *
@@ -82,6 +81,7 @@ struct ddcci_device_id {
  * @bus_drv_data: Driver internal data structure.
  * @dev: Driver model device node for the slave.
  * @cdev: Character device structure
+ * @cdev_sem: RW semaphore for exclusive access on character device.
  * @prot: Device class ("protocol", from capability string)
  * @type: Device subclass ("type", from capability string)
  * @model: Device model (from capability string)
@@ -99,6 +99,7 @@ struct ddcci_device {
 	struct ddcci_bus_drv_data *bus_drv_data;
 	struct device dev;
 	struct cdev cdev;
+	struct rw_semaphore cdev_sem;
 	char prot[9];
 	char type[9];
 	char model[9];
-- 
2.39.0.rc2.1.gbd5df96b79

