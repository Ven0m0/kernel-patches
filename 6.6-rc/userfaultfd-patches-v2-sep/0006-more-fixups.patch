From ec985a79cc4c01cc4a2006033ce2e7b97951aa29 Mon Sep 17 00:00:00 2001
From: Suren Baghdasaryan <surenb@google.com>
Date: Wed, 20 Sep 2023 12:41:59 -0700
Subject: [PATCH 6/8] more fixups

Signed-off-by: Suren Baghdasaryan <surenb@google.com>
---
 mm/huge_memory.c |  4 +--
 mm/userfaultfd.c | 92 ++++++++++++++++++++++--------------------------
 2 files changed, 44 insertions(+), 52 deletions(-)

diff --git a/mm/huge_memory.c b/mm/huge_memory.c
index c7a9880a1..bdfeaa178 100644
--- a/mm/huge_memory.c
+++ b/mm/huge_memory.c
@@ -2024,9 +2024,7 @@ int remap_pages_huge_pmd(struct mm_struct *dst_mm,
 	WRITE_ONCE(src_page->mapping, (struct address_space *) dst_anon_vma);
 	WRITE_ONCE(src_page->index, linear_page_index(dst_vma, dst_addr));
 
-	if (!pmd_same(pmdp_huge_clear_flush(src_vma, src_addr, src_pmd),
-		      src_pmdval))
-		BUG_ON(1);
+	src_pmdval = pmdp_huge_clear_flush(src_vma, src_addr, src_pmd);
 	_dst_pmd = mk_huge_pmd(src_page, dst_vma->vm_page_prot);
 	_dst_pmd = maybe_pmd_mkwrite(pmd_mkdirty(_dst_pmd), dst_vma);
 	set_pmd_at(dst_mm, dst_addr, dst_pmd, _dst_pmd);
diff --git a/mm/userfaultfd.c b/mm/userfaultfd.c
index 7fa35b73c..716867a9e 100644
--- a/mm/userfaultfd.c
+++ b/mm/userfaultfd.c
@@ -1254,12 +1254,13 @@ ssize_t remap_pages(struct mm_struct *dst_mm, struct mm_struct *src_mm,
 	    dst_start + len > dst_vma->vm_end)
 		goto out;
 
-	if (pgprot_val(src_vma->vm_page_prot) !=
-	    pgprot_val(dst_vma->vm_page_prot))
+	/* Only allow remapping if both have the same access and protection */
+	if ((src_vma->vm_flags & VM_ACCESS_FLAGS) != (dst_vma->vm_flags & VM_ACCESS_FLAGS) ||
+	    pgprot_val(src_vma->vm_page_prot) != pgprot_val(dst_vma->vm_page_prot))
 		goto out;
 
-	/* only allow remapping if both are mlocked or both aren't */
-	if ((src_vma->vm_flags & VM_LOCKED) ^ (dst_vma->vm_flags & VM_LOCKED))
+	/* Only allow remapping if both are mlocked or both aren't */
+	if ((src_vma->vm_flags & VM_LOCKED) != (dst_vma->vm_flags & VM_LOCKED))
 		goto out;
 
 	/*
@@ -1301,8 +1302,14 @@ ssize_t remap_pages(struct mm_struct *dst_mm, struct mm_struct *src_mm,
 	     src_addr < src_start + len;) {
 		spinlock_t *ptl;
 		pmd_t dst_pmdval;
+		unsigned long step_size;
 
 		BUG_ON(dst_addr >= dst_start + len);
+		/*
+		 * Below works because anonymous area would not have a
+		 * transparent huge PUD. If file-backed support is added,
+		 * that case would need to be handled here.
+		 */
 		src_pmd = mm_find_pmd(src_mm, src_addr);
 		if (unlikely(!src_pmd)) {
 			if (!(mode & UFFDIO_REMAP_MODE_ALLOW_SRC_HOLES)) {
@@ -1334,6 +1341,11 @@ ssize_t remap_pages(struct mm_struct *dst_mm, struct mm_struct *src_mm,
 		}
 
 		ptl = pmd_trans_huge_lock(src_pmd, src_vma);
+		if (ptl && !pmd_trans_huge(*src_pmd)) {
+			spin_unlock(ptl);
+			ptl = NULL;
+		}
+
 		if (ptl) {
 			/*
 			 * Check if we can move the pmd without
@@ -1347,65 +1359,47 @@ ssize_t remap_pages(struct mm_struct *dst_mm, struct mm_struct *src_mm,
 			if ((src_addr & ~HPAGE_PMD_MASK) || (dst_addr & ~HPAGE_PMD_MASK) ||
 			    src_start + len - src_addr < HPAGE_PMD_SIZE || !pmd_none(dst_pmdval)) {
 				spin_unlock(ptl);
-				/* Fall through */
 				split_huge_pmd(src_vma, src_pmd, src_addr);
-			} else {
-				err = remap_pages_huge_pmd(dst_mm,
-							   src_mm,
-							   dst_pmd,
-							   src_pmd,
-							   dst_pmdval,
-							   dst_vma,
-							   src_vma,
-							   dst_addr,
-							   src_addr);
-				cond_resched();
-
-				if (!err) {
-					dst_addr += HPAGE_PMD_SIZE;
-					src_addr += HPAGE_PMD_SIZE;
-					moved += HPAGE_PMD_SIZE;
-				}
-
-				if ((!err || err == -EAGAIN) &&
-				    fatal_signal_pending(current))
-					err = -EINTR;
-
-				if (err && err != -EAGAIN)
-					break;
-
 				continue;
 			}
-		}
 
-		if (pmd_none(*src_pmd)) {
-			if (!(mode & UFFDIO_REMAP_MODE_ALLOW_SRC_HOLES)) {
-				err = -ENOENT;
-				break;
+			err = remap_pages_huge_pmd(dst_mm, src_mm,
+						   dst_pmd, src_pmd,
+						   dst_pmdval,
+						   dst_vma, src_vma,
+						   dst_addr, src_addr);
+			step_size = HPAGE_PMD_SIZE;
+		} else {
+			if (pmd_none(*src_pmd)) {
+				if (!(mode & UFFDIO_REMAP_MODE_ALLOW_SRC_HOLES)) {
+					err = -ENOENT;
+					break;
+				}
+				if (unlikely(__pte_alloc(src_mm, src_pmd))) {
+					err = -ENOMEM;
+					break;
+				}
 			}
-			if (unlikely(__pte_alloc(src_mm, src_pmd))) {
+
+			if (unlikely(pte_alloc(dst_mm, dst_pmd))) {
 				err = -ENOMEM;
 				break;
 			}
-		}
 
-		if (unlikely(pte_alloc(dst_mm, dst_pmd))) {
-			err = -ENOMEM;
-			break;
+			err = remap_pages_pte(dst_mm, src_mm,
+					      dst_pmd, src_pmd,
+					      dst_vma, src_vma,
+					      dst_addr, src_addr,
+					      mode);
+			step_size = PAGE_SIZE;
 		}
 
-		err = remap_pages_pte(dst_mm, src_mm,
-				      dst_pmd, src_pmd,
-				      dst_vma, src_vma,
-				      dst_addr, src_addr,
-				      mode);
-
 		cond_resched();
 
 		if (!err) {
-			dst_addr += PAGE_SIZE;
-			src_addr += PAGE_SIZE;
-			moved += PAGE_SIZE;
+			dst_addr += step_size;
+			src_addr += step_size;
+			moved += step_size;
 		}
 
 		if ((!err || err == -EAGAIN) &&
-- 
2.42.0

