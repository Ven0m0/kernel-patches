From 7730e38bd6c438c2bb9a42a001dd7e85b1130582 Mon Sep 17 00:00:00 2001
From: Suren Baghdasaryan <surenb@google.com>
Date: Tue, 19 Sep 2023 12:58:50 -0700
Subject: [PATCH 5/8] FIXUPS: Jann's comments 1

Signed-off-by: Suren Baghdasaryan <surenb@google.com>
---
 fs/userfaultfd.c | 20 +++++++++++++++++---
 mm/userfaultfd.c | 21 +++++++++------------
 2 files changed, 26 insertions(+), 15 deletions(-)

diff --git a/fs/userfaultfd.c b/fs/userfaultfd.c
index 7bf64e754..5b6bb20f4 100644
--- a/fs/userfaultfd.c
+++ b/fs/userfaultfd.c
@@ -2037,6 +2037,10 @@ static int userfaultfd_remap(struct userfaultfd_ctx *ctx,
 
 	user_uffdio_remap = (struct uffdio_remap __user *) arg;
 
+	ret = -EAGAIN;
+	if (atomic_read(&ctx->mmap_changing))
+		goto out;
+
 	ret = -EFAULT;
 	if (copy_from_user(&uffdio_remap, user_uffdio_remap,
 			   /* don't copy "remap" last field */
@@ -2046,21 +2050,30 @@ static int userfaultfd_remap(struct userfaultfd_ctx *ctx,
 	ret = validate_range(ctx->mm, uffdio_remap.dst, uffdio_remap.len);
 	if (ret)
 		goto out;
+
 	ret = validate_range(current->mm, uffdio_remap.src, uffdio_remap.len);
 	if (ret)
 		goto out;
+
 	ret = -EINVAL;
 	if (uffdio_remap.mode & ~(UFFDIO_REMAP_MODE_ALLOW_SRC_HOLES|
 				  UFFDIO_REMAP_MODE_DONTWAKE))
 		goto out;
 
-	ret = remap_pages(ctx->mm, current->mm,
-			  uffdio_remap.dst, uffdio_remap.src,
-			  uffdio_remap.len, uffdio_remap.mode);
+	if (mmget_not_zero(ctx->mm)) {
+		ret = remap_pages(ctx->mm, current->mm,
+				  uffdio_remap.dst, uffdio_remap.src,
+				  uffdio_remap.len, uffdio_remap.mode);
+		mmput(ctx->mm);
+	} else {
+		return -ESRCH;
+	}
+
 	if (unlikely(put_user(ret, &user_uffdio_remap->remap)))
 		return -EFAULT;
 	if (ret < 0)
 		goto out;
+
 	/* len == 0 would wake all */
 	BUG_ON(!ret);
 	range.len = ret;
@@ -2069,6 +2082,7 @@ static int userfaultfd_remap(struct userfaultfd_ctx *ctx,
 		wake_userfault(ctx, &range);
 	}
 	ret = range.len == uffdio_remap.len ? 0 : -EAGAIN;
+
 out:
 	return ret;
 }
diff --git a/mm/userfaultfd.c b/mm/userfaultfd.c
index 0cca60dfa..7fa35b73c 100644
--- a/mm/userfaultfd.c
+++ b/mm/userfaultfd.c
@@ -1214,7 +1214,6 @@ ssize_t remap_pages(struct mm_struct *dst_mm, struct mm_struct *src_mm,
 	long err = -EINVAL;
 	pmd_t *src_pmd, *dst_pmd;
 	unsigned long src_addr, dst_addr;
-	int thp_aligned = -1;
 	ssize_t moved = 0;
 
 	/*
@@ -1286,7 +1285,7 @@ ssize_t remap_pages(struct mm_struct *dst_mm, struct mm_struct *src_mm,
 	 * FIXME: only allow remapping across anonymous vmas,
 	 * tmpfs should be added.
 	 */
-	if (src_vma->vm_ops || dst_vma->vm_ops)
+	if (!vma_is_anonymous(src_vma) || !vma_is_anonymous(dst_vma))
 		goto out;
 
 	/*
@@ -1324,13 +1323,16 @@ ssize_t remap_pages(struct mm_struct *dst_mm, struct mm_struct *src_mm,
 
 		dst_pmdval = pmdp_get_lockless(dst_pmd);
 		/*
-		 * If the dst_pmd is mapped as THP don't
-		 * override it and just be strict.
+		 * If the dst_pmd is mapped as THP don't override it and just
+		 * be strict. If dst_pmd changes into TPH after this check, the
+		 * remap_pages_huge_pmd() will detect the change and retry
+		 * while remap_pages_pte() will detect the change and fail.
 		 */
 		if (unlikely(pmd_trans_huge(dst_pmdval))) {
 			err = -EEXIST;
 			break;
 		}
+
 		ptl = pmd_trans_huge_lock(src_pmd, src_vma);
 		if (ptl) {
 			/*
@@ -1342,12 +1344,8 @@ ssize_t remap_pages(struct mm_struct *dst_mm, struct mm_struct *src_mm,
 			 * block away at build time if
 			 * CONFIG_TRANSPARENT_HUGEPAGE is not set.
 			 */
-			if (thp_aligned == -1)
-				thp_aligned = ((src_addr & ~HPAGE_PMD_MASK) ==
-					       (dst_addr & ~HPAGE_PMD_MASK));
-			if (!thp_aligned || (src_addr & ~HPAGE_PMD_MASK) ||
-			    !pmd_none(dst_pmdval) ||
-			    src_start + len - src_addr < HPAGE_PMD_SIZE) {
+			if ((src_addr & ~HPAGE_PMD_MASK) || (dst_addr & ~HPAGE_PMD_MASK) ||
+			    src_start + len - src_addr < HPAGE_PMD_SIZE || !pmd_none(dst_pmdval)) {
 				spin_unlock(ptl);
 				/* Fall through */
 				split_huge_pmd(src_vma, src_pmd, src_addr);
@@ -1391,8 +1389,7 @@ ssize_t remap_pages(struct mm_struct *dst_mm, struct mm_struct *src_mm,
 			}
 		}
 
-		if (unlikely(pmd_none(dst_pmdval)) &&
-		    unlikely(__pte_alloc(dst_mm, dst_pmd))) {
+		if (unlikely(pte_alloc(dst_mm, dst_pmd))) {
 			err = -ENOMEM;
 			break;
 		}
-- 
2.42.0

