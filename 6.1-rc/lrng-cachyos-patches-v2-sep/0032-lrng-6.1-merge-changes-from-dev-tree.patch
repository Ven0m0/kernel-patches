From d111485d4084e6cbea05ee9056ab22b010d69959 Mon Sep 17 00:00:00 2001
From: Piotr Gorski <lucjan.lucjanov@gmail.com>
Date: Wed, 19 Oct 2022 18:38:12 +0200
Subject: [PATCH 32/32] lrng-6.1: merge changes from dev tree

Signed-off-by: Piotr Gorski <lucjan.lucjanov@gmail.com>
---
 drivers/char/lrng/Kconfig                     |  6 +++
 drivers/char/lrng/lrng_es_mgr.c               | 37 +++++++-------
 drivers/char/lrng/lrng_es_mgr.h               |  3 +-
 drivers/char/lrng/lrng_interface_aux.c        | 50 +++++++++++++++++++
 .../char/lrng/lrng_interface_random_kernel.c  | 11 ++--
 5 files changed, 83 insertions(+), 24 deletions(-)

diff --git a/drivers/char/lrng/Kconfig b/drivers/char/lrng/Kconfig
index 9d74117bc..08ab921a1 100644
--- a/drivers/char/lrng/Kconfig
+++ b/drivers/char/lrng/Kconfig
@@ -10,6 +10,12 @@ config RANDOM_DEFAULT_IMPL
 	  The default random number generator as provided with
 	  drivers/char/random.c is selected with this option.
 
+config LRNG_AUTO_SELECTED
+	bool
+	default y if !RANDOM_DEFAULT_IMPL
+	default n if RANDOM_DEFAULT_IMPL
+	select LRNG
+
 config LRNG
 	bool "Linux Random Number Generator"
 	default n
diff --git a/drivers/char/lrng/lrng_es_mgr.c b/drivers/char/lrng/lrng_es_mgr.c
index 5625d5734..3eda5fe19 100644
--- a/drivers/char/lrng/lrng_es_mgr.c
+++ b/drivers/char/lrng/lrng_es_mgr.c
@@ -367,10 +367,9 @@ void lrng_init_ops(struct entropy_buf *eb)
 	}
 }
 
-int __init lrng_rand_initialize(void)
+void __init lrng_rand_initialize_early(void)
 {
 	struct seed {
-		ktime_t time;
 		unsigned long data[((LRNG_MAX_DIGESTSIZE +
 				     sizeof(unsigned long) - 1) /
 				    sizeof(unsigned long))];
@@ -379,19 +378,7 @@ int __init lrng_rand_initialize(void)
 	size_t longs = 0;
 	unsigned int i;
 
-	seed.time = ktime_get_real();
-
 	for (i = 0; i < ARRAY_SIZE(seed.data); i += longs) {
-#ifdef CONFIG_LRNG_RANDOM_IF
-		longs = arch_get_random_seed_longs_early(
-			seed.data + i, ARRAY_SIZE(seed.data) - i);
-		if (longs)
-			continue;
-		longs = arch_get_random_longs_early(seed.data + i,
-						    ARRAY_SIZE(seed.data) - i);
-		if (longs)
-			continue;
-#else
 		longs = arch_get_random_seed_longs(seed.data + i,
 						   ARRAY_SIZE(seed.data) - i);
 		if (longs)
@@ -400,14 +387,21 @@ int __init lrng_rand_initialize(void)
 					      ARRAY_SIZE(seed.data) - i);
 		if (longs)
 			continue;
-#endif
-		seed.data[i] = random_get_entropy();
 		longs = 1;
 	}
-	memcpy(&seed.utsname, utsname(), sizeof(*(utsname())));
+	memcpy(&seed.utsname, init_utsname(), sizeof(*(init_utsname())));
 
 	lrng_pool_insert_aux((u8 *)&seed, sizeof(seed), 0);
 	memzero_explicit(&seed, sizeof(seed));
+}
+
+void __init lrng_rand_initialize(void)
+{
+	unsigned long entropy = random_get_entropy();
+	ktime_t time = ktime_get_real();
+
+	lrng_pool_insert_aux((u8 *)&entropy, sizeof(entropy), 0);
+	lrng_pool_insert_aux((u8 *)&time, sizeof(time), 0);
 
 	/* Initialize the seed work queue */
 	INIT_WORK(&lrng_state.lrng_seed_work, lrng_drng_seed_work);
@@ -416,12 +410,17 @@ int __init lrng_rand_initialize(void)
 	invalidate_batched_entropy();
 
 	lrng_state.can_invalidate = true;
+}
 
+#ifndef CONFIG_LRNG_RANDOM_IF
+static int __init lrng_rand_initialize_call(void)
+{
+	lrng_rand_initialize_early();
+	lrng_rand_initialize();
 	return 0;
 }
 
-#ifndef CONFIG_LRNG_RANDOM_IF
-early_initcall(lrng_rand_initialize);
+early_initcall(lrng_rand_initialize_call);
 #endif
 
 /* Interface requesting a reseed of the DRNG */
diff --git a/drivers/char/lrng/lrng_es_mgr.h b/drivers/char/lrng/lrng_es_mgr.h
index 9d4a5599f..cc24f2390 100644
--- a/drivers/char/lrng/lrng_es_mgr.h
+++ b/drivers/char/lrng/lrng_es_mgr.h
@@ -27,7 +27,8 @@ bool lrng_ntg1_2022_compliant(void);
 bool lrng_pool_all_numa_nodes_seeded_get(void);
 bool lrng_state_min_seeded(void);
 void lrng_debug_report_seedlevel(const char *name);
-int lrng_rand_initialize(void);
+void lrng_rand_initialize_early(void);
+void lrng_rand_initialize(void);
 bool lrng_state_operational(void);
 
 extern u32 lrng_write_wakeup_bits;
diff --git a/drivers/char/lrng/lrng_interface_aux.c b/drivers/char/lrng/lrng_interface_aux.c
index 0eb49bd6b..36b8a32f2 100644
--- a/drivers/char/lrng/lrng_interface_aux.c
+++ b/drivers/char/lrng/lrng_interface_aux.c
@@ -19,6 +19,8 @@ struct batched_entropy {
 	union {
 		u64 entropy_u64[LRNG_DRNG_BLOCKSIZE / sizeof(u64)];
 		u32 entropy_u32[LRNG_DRNG_BLOCKSIZE / sizeof(u32)];
+		u16 entropy_u16[LRNG_DRNG_BLOCKSIZE / sizeof(u16)];
+		u8 entropy_u8[LRNG_DRNG_BLOCKSIZE / sizeof(u8)];
 	};
 	unsigned int position;
 	spinlock_t batch_lock;
@@ -77,6 +79,54 @@ u32 get_random_u32(void)
 }
 EXPORT_SYMBOL(get_random_u32);
 
+static DEFINE_PER_CPU(struct batched_entropy, batched_entropy_u16) = {
+	.batch_lock	= __SPIN_LOCK_UNLOCKED(batched_entropy_u16.lock),
+};
+
+u16 get_random_u16(void)
+{
+	u16 ret;
+	unsigned long flags;
+	struct batched_entropy *batch;
+
+	lrng_debug_report_seedlevel("get_random_u16");
+
+	batch = raw_cpu_ptr(&batched_entropy_u16);
+	spin_lock_irqsave(&batch->batch_lock, flags);
+	if (batch->position % ARRAY_SIZE(batch->entropy_u16) == 0) {
+		lrng_get_random_bytes(batch->entropy_u16, LRNG_DRNG_BLOCKSIZE);
+		batch->position = 0;
+	}
+	ret = batch->entropy_u16[batch->position++];
+	spin_unlock_irqrestore(&batch->batch_lock, flags);
+	return ret;
+}
+EXPORT_SYMBOL(get_random_u16);
+
+static DEFINE_PER_CPU(struct batched_entropy, batched_entropy_u8) = {
+	.batch_lock	= __SPIN_LOCK_UNLOCKED(batched_entropy_u8.lock),
+};
+
+u8 get_random_u8(void)
+{
+	u8 ret;
+	unsigned long flags;
+	struct batched_entropy *batch;
+
+	lrng_debug_report_seedlevel("get_random_u8");
+
+	batch = raw_cpu_ptr(&batched_entropy_u8);
+	spin_lock_irqsave(&batch->batch_lock, flags);
+	if (batch->position % ARRAY_SIZE(batch->entropy_u8) == 0) {
+		lrng_get_random_bytes(batch->entropy_u8, LRNG_DRNG_BLOCKSIZE);
+		batch->position = 0;
+	}
+	ret = batch->entropy_u8[batch->position++];
+	spin_unlock_irqrestore(&batch->batch_lock, flags);
+	return ret;
+}
+EXPORT_SYMBOL(get_random_u8);
+
 #ifdef CONFIG_SMP
 /*
  * This function is called when the CPU is coming up, with entry
diff --git a/drivers/char/lrng/lrng_interface_random_kernel.c b/drivers/char/lrng/lrng_interface_random_kernel.c
index 471390bfd..cf2250112 100644
--- a/drivers/char/lrng/lrng_interface_random_kernel.c
+++ b/drivers/char/lrng/lrng_interface_random_kernel.c
@@ -30,12 +30,15 @@ static int __init lrng_parse_trust_bootloader(char *arg)
 }
 early_param("random.trust_bootloader", lrng_parse_trust_bootloader);
 
-int __init random_init(const char *command_line)
+void __init random_init_early(const char *command_line)
 {
-	int ret = lrng_rand_initialize();
-
+	lrng_rand_initialize_early();
 	lrng_pool_insert_aux(command_line, strlen(command_line), 0);
-	return ret;
+}
+
+void __init random_init(void)
+{
+	lrng_rand_initialize();
 }
 
 /************************ LRNG kernel input interfaces ************************/
-- 
2.38.0.rc1.6.g4fd6c5e444

