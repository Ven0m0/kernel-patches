From aa7ca97028e5ddaf5deffc9f29da2b5d1ef20df0 Mon Sep 17 00:00:00 2001
From: Hector Martin <marcan@marcan.st>
Date: Sun, 3 Dec 2023 23:10:21 +0900
Subject: [PATCH 45/54] HID: transport: spi: Implement GET FEATURE

This is used for fetching trackpad dimensions.

Signed-off-by: Hector Martin <marcan@marcan.st>
---
 drivers/hid/spi-hid/spi-hid-apple-core.c | 51 ++++++++++++++++++++++--
 1 file changed, 48 insertions(+), 3 deletions(-)

diff --git a/drivers/hid/spi-hid/spi-hid-apple-core.c b/drivers/hid/spi-hid/spi-hid-apple-core.c
index d48cb559a..f4a1042f0 100644
--- a/drivers/hid/spi-hid/spi-hid-apple-core.c
+++ b/drivers/hid/spi-hid/spi-hid-apple-core.c
@@ -65,6 +65,8 @@ struct spihid_interface {
 	u32 max_input_report_len;
 	u32 max_output_report_len;
 	u8 name[32];
+	u8 reply_buf[SPIHID_DESC_MAX];
+	u32 reply_len;
 	bool ready;
 };
 
@@ -327,6 +329,7 @@ static int apple_ll_raw_request(struct hid_device *hdev,
 {
 	struct spihid_interface *idev = hdev->driver_data;
 	struct spihid_apple *spihid = spihid_get_data(idev);
+	int ret;
 
 	dev_dbg(&spihid->spidev->dev,
 		"apple_ll_raw_request: device:%u reportnum:%hhu rtype:%hhu",
@@ -334,7 +337,25 @@ static int apple_ll_raw_request(struct hid_device *hdev,
 
 	switch (reqtype) {
 	case HID_REQ_GET_REPORT:
-		return -EINVAL; // spihid_get_raw_report();
+		if (rtype != HID_FEATURE_REPORT)
+			return -EINVAL;
+
+		idev->reply_len = 0;
+		ret = spihid_apple_request(spihid, idev->id, 0x32, reportnum, 0x00, len, NULL, 0);
+		if (ret < 0)
+			return ret;
+
+		ret = wait_event_interruptible_timeout(spihid->wait, idev->reply_len,
+						       SPIHID_DEF_WAIT);
+		if (ret == 0)
+			ret = -ETIMEDOUT;
+		if (ret < 0) {
+			dev_err(&spihid->spidev->dev, "waiting for get report failed: %d", ret);
+			return ret;
+		}
+		memcpy(buf, idev->reply_buf, max_t(size_t, len, idev->reply_len));
+		return idev->reply_len;
+
 	case HID_REQ_SET_REPORT:
 		if (buf[0] != reportnum)
 			return -EINVAL;
@@ -606,7 +627,27 @@ static bool spihid_process_iface_hid_report_desc(struct spihid_apple *spihid,
 	return true;
 }
 
-static bool spihid_process_response(struct spihid_apple *spihid,
+static bool spihid_process_iface_get_report(struct spihid_apple *spihid,
+					    u32 device, u8 report,
+					    u8 *payload, size_t len)
+{
+	struct spihid_interface *iface = spihid_get_iface(spihid, device);
+
+	if (!iface)
+		return false;
+
+	if (len > sizeof(iface->reply_buf) || len < 1)
+		return false;
+
+	memcpy(iface->reply_buf, payload, len);
+	iface->reply_len = len;
+
+	wake_up_interruptible(&spihid->wait);
+
+	return true;
+}
+
+static bool spihid_process_response(struct spihid_apple *spihid, u32 device,
 				    struct spihid_msg_hdr *hdr, u8 *payload,
 				    size_t len)
 {
@@ -626,6 +667,10 @@ static bool spihid_process_response(struct spihid_apple *spihid,
 		}
 	}
 
+	if (hdr->unknown0 == 0x32) {
+		return spihid_process_iface_get_report(spihid, device, hdr->unknown1, payload, len);
+	}
+
 	return false;
 }
 
@@ -656,7 +701,7 @@ static void spihid_process_message(struct spihid_apple *spihid, u8 *data,
 						      payload, payload_len);
 		break;
 	case SPIHID_WRITE_PACKET:
-		handled = spihid_process_response(spihid, hdr, payload,
+		handled = spihid_process_response(spihid, device, hdr, payload,
 						  payload_len);
 		break;
 	default:
-- 
2.49.0

