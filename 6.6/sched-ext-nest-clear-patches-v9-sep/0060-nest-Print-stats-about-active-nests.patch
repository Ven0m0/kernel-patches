From d5f6f6d10cd064c95801a073c4a494972f1bfbf5 Mon Sep 17 00:00:00 2001
From: David Vernet <void@manifault.com>
Date: Fri, 1 Dec 2023 10:36:06 -0600
Subject: [PATCH 60/68] nest: Print stats about active nests

It would be useful to see which cores are currently in which nests.
Let's print some real-time statistics for that. We'll probably also
implement logic for seeing which cores are and aren't idle in a
follow-on commit.

Signed-off-by: David Vernet <void@manifault.com>
---
 tools/sched_ext/scx_nest.bpf.c | 69 +++++++++++++++++++++++++++++++++-
 tools/sched_ext/scx_nest.c     | 60 +++++++++++++++++++++++++----
 2 files changed, 120 insertions(+), 9 deletions(-)

diff --git a/tools/sched_ext/scx_nest.bpf.c b/tools/sched_ext/scx_nest.bpf.c
index b99a5172a..1366b78f4 100644
--- a/tools/sched_ext/scx_nest.bpf.c
+++ b/tools/sched_ext/scx_nest.bpf.c
@@ -36,6 +36,7 @@ enum {
 	NSEC_PER_USEC		= 1000LLU,
 	NSEC_PER_MSEC		= USEC_PER_MSEC * NSEC_PER_USEC,
 	USEC_PER_SEC		= USEC_PER_MSEC * MSEC_PER_SEC,
+	NSEC_PER_SEC		= NSEC_PER_USEC * USEC_PER_SEC,
 };
 
 #define CLOCK_BOOTTIME 7
@@ -46,8 +47,13 @@ const volatile u64 r_max = 5;
 const volatile u64 r_impatient = 2;
 const volatile u64 slice_ns = SCX_SLICE_DFL;
 const volatile bool find_fully_idle = false;
+const volatile u64 sampling_cadence_ns = 1 * NSEC_PER_SEC;
 
-s32 nr_reserved, nr_primary;
+// Used for stats tracking. May be stale at any given time.
+u64 stats_primary_mask, stats_reserved_mask, stats_other_mask;
+
+// Used for internal tracking.
+static s32 nr_reserved;
 
 static u64 vtime_now;
 struct user_exit_info uei;
@@ -96,6 +102,17 @@ struct {
 	__type(value, struct pcpu_ctx);
 } pcpu_ctxs SEC(".maps");
 
+struct stats_timer {
+	struct bpf_timer timer;
+};
+
+struct {
+	__uint(type, BPF_MAP_TYPE_ARRAY);
+	__uint(max_entries, 1);
+	__type(key, u32);
+	__type(value, struct stats_timer);
+} stats_timer SEC(".maps");
+
 const volatile u32 nr_cpus = 1; /* !0 for veristat, set during init. */
 
 private(NESTS) struct bpf_cpumask __kptr *primary_cpumask;
@@ -457,11 +474,48 @@ static int compact_primary_core(void *map, int *key, struct bpf_timer *timer)
 	return 0;
 }
 
+static int stats_timerfn(void *map, int *key, struct bpf_timer *timer)
+{
+	s32 cpu;
+	struct bpf_cpumask *primary, *reserve;
+	stats_primary_mask = 0;
+	stats_reserved_mask = 0;
+	stats_other_mask = 0;
+	long err;
+
+	bpf_rcu_read_lock();
+	primary = primary_cpumask;
+	reserve = reserve_cpumask;
+	if (!primary || !reserve) {
+		bpf_rcu_read_unlock();
+		scx_bpf_error("Failed to lookup primary or reserve");
+		return 0;
+	}
+
+	bpf_for(cpu, 0, nr_cpus) {
+		if (bpf_cpumask_test_cpu(cpu, cast_mask(primary)))
+			stats_primary_mask |= (1ULL << cpu);
+		else if (bpf_cpumask_test_cpu(cpu, cast_mask(reserve)))
+			stats_reserved_mask |= (1ULL << cpu);
+		else
+			stats_other_mask |= (1ULL << cpu);
+	}
+	bpf_rcu_read_unlock();
+
+	err = bpf_timer_start(timer, sampling_cadence_ns - 5000, 0);
+	if (err)
+		scx_bpf_error("Failed to arm stats timer");
+
+	return 0;
+}
+
 s32 BPF_STRUCT_OPS_SLEEPABLE(nest_init)
 {
 	struct bpf_cpumask *cpumask;
 	s32 cpu;
 	int err;
+	struct bpf_timer *timer;
+	u32 key = 0;
 
 	scx_bpf_switch_all();
 
@@ -504,7 +558,18 @@ s32 BPF_STRUCT_OPS_SLEEPABLE(nest_init)
 		bpf_timer_set_callback(&ctx->timer, compact_primary_core);
 	}
 
-	return 0;
+	timer = bpf_map_lookup_elem(&stats_timer, &key);
+	if (!timer) {
+		scx_bpf_error("Failed to lookup central timer");
+		return -ESRCH;
+	}
+	bpf_timer_init(timer, &stats_timer, CLOCK_BOOTTIME);
+	bpf_timer_set_callback(timer, stats_timerfn);
+	err = bpf_timer_start(timer, sampling_cadence_ns - 5000, 0);
+	if (err)
+		scx_bpf_error("Failed to arm stats timer");
+
+	return err;
 }
 
 void BPF_STRUCT_OPS(nest_exit, struct scx_exit_info *ei)
diff --git a/tools/sched_ext/scx_nest.c b/tools/sched_ext/scx_nest.c
index 8fd950e02..e4fe24d5b 100644
--- a/tools/sched_ext/scx_nest.c
+++ b/tools/sched_ext/scx_nest.c
@@ -14,6 +14,8 @@
 #include "scx_common.h"
 #include "scx_nest.h"
 
+#define SAMPLING_CADENCE_S 2
+
 const char help_fmt[] =
 "A Nest sched_ext scheduler.\n"
 "\n"
@@ -71,12 +73,21 @@ static void read_stats(struct scx_nest *skel, u64 *stats)
 	}
 }
 
-static void print_stat_grp(enum nest_stat_group grp)
+static void print_underline(const char *str)
 {
-	const char *group;
 	char buf[64];
 	size_t len;
 
+	len = strlen(str);
+	memset(buf, '-', len);
+	buf[len] = '\0';
+	printf("\n\n%s\n%s\n", str, buf);
+}
+
+static void print_stat_grp(enum nest_stat_group grp)
+{
+	const char *group;
+
 	switch (grp) {
 		case STAT_GRP_WAKEUP:
 			group = "Wakeup stats";
@@ -92,10 +103,43 @@ static void print_stat_grp(enum nest_stat_group grp)
 			break;
 	}
 
-	len = strlen(group);
-	memset(buf, '-', len);
-	buf[len] = '\0';
-	printf("\n\n%s\n%s\n", group, buf);
+	print_underline(group);
+}
+
+static void print_active_nests(const struct scx_nest *skel)
+{
+	u64 primary = skel->bss->stats_primary_mask;
+	u64 reserved = skel->bss->stats_reserved_mask;
+	u64 other = skel->bss->stats_other_mask;
+	u32 nr_cpus = skel->rodata->nr_cpus, cpu;
+	int idx;
+
+	print_underline("Masks");
+	for (idx = 0; idx < 3; idx++) {
+		const char *mask_str;
+		u64 mask, total = 0;
+		char cpus[nr_cpus + 1];
+
+		memset(cpus, '-', nr_cpus);
+		cpus[nr_cpus + 1] = '\0';
+		if (idx == 0) {
+			mask_str = "PRIMARY";
+			mask = primary;
+		} else if (idx == 1) {
+			mask_str = "RESERVED";
+			mask = reserved;
+		} else {
+			mask_str = "OTHER";
+			mask = other;
+		}
+		for (cpu = 0; cpu < nr_cpus; cpu++) {
+			if (mask & (1ULL << cpu)) {
+				cpus[cpu] = '*';
+				total++;
+			}
+		}
+		printf("%-9s(%2lu): | %s |\n", mask_str, total, cpus);
+	}
 }
 
 int main(int argc, char **argv)
@@ -113,6 +157,7 @@ int main(int argc, char **argv)
 	SCX_BUG_ON(!skel, "Failed to open skel");
 
 	skel->rodata->nr_cpus = libbpf_num_possible_cpus();
+	skel->rodata->sampling_cadence_ns = SAMPLING_CADENCE_S * 1000 * 1000 * 1000;
 
 	while ((opt = getopt(argc, argv, "hId:m:i:s:")) != -1) {
 		switch (opt) {
@@ -159,11 +204,12 @@ int main(int argc, char **argv)
 			printf("%s=%lu\n", nest_stat->label, stats[nest_stat->idx]);
 		}
 		printf("\n");
+		print_active_nests(skel);
 		printf("\n");
 		printf("\n");
 		printf("\n");
 		fflush(stdout);
-		sleep(2);
+		sleep(SAMPLING_CADENCE_S);
 	}
 
 	bpf_link__destroy(link);
-- 
2.43.0.rc2

