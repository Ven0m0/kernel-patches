From 495eb56f3b0307bf4fe7bc7524c41b3924a46b90 Mon Sep 17 00:00:00 2001
From: David Vernet <void@manifault.com>
Date: Tue, 28 Nov 2023 17:18:38 -0600
Subject: [PATCH 42/63] scx_nest: Rebase onto latest and add -I flag for
 checking hypertwins

The default behavior of the original Inria Nest scheduler is to ignore
hypertwins and select any idle core in a Nest. Let's make the default
behavior match the original Nest scheduler by making the default
behavior to ignore hypertwins. If the -I flag is passed, the scheduler
will first check for fully idle cores.

Signed-off-by: David Vernet <void@manifault.com>
---
 tools/sched_ext/scx_nest.bpf.c | 33 ++++++++++++++++++---------------
 tools/sched_ext/scx_nest.c     |  8 ++++++--
 2 files changed, 24 insertions(+), 17 deletions(-)

diff --git a/tools/sched_ext/scx_nest.bpf.c b/tools/sched_ext/scx_nest.bpf.c
index 9b929c039..9badf3a00 100644
--- a/tools/sched_ext/scx_nest.bpf.c
+++ b/tools/sched_ext/scx_nest.bpf.c
@@ -45,6 +45,7 @@ const volatile u64 p_remove_ns = 2 * NSEC_PER_MSEC;
 const volatile u64 r_max = 5;
 const volatile u64 r_impatient = 2;
 const volatile u64 slice_ns = SCX_SLICE_DFL;
+const volatile bool find_fully_idle = false;
 
 static s32 nr_reserved;
 
@@ -180,7 +181,7 @@ s32 BPF_STRUCT_OPS(nest_select_cpu, struct task_struct *p, s32 prev_cpu,
 	s32 cpu;
 	struct task_ctx *tctx;
 	struct pcpu_ctx *pcpu_ctx;
-	bool prev_fully_idle, prev_in_primary;
+	bool prev_in_primary;
 	bool direct_to_primary = false;
 
 	tctx = bpf_task_storage_get(&task_ctx_stor, p, 0, 0);
@@ -199,10 +200,6 @@ s32 BPF_STRUCT_OPS(nest_select_cpu, struct task_struct *p, s32 prev_cpu,
 	// Unset below if we can't find a core to migrate to.
 	tctx->force_local = true;
 
-	idle_smtmask = scx_bpf_get_idle_smtmask();
-	prev_fully_idle = bpf_cpumask_test_cpu(prev_cpu, idle_smtmask);
-	scx_bpf_put_idle_cpumask(idle_smtmask);
-
 	bpf_cpumask_and(p_mask, p->cpus_ptr, cast_mask(primary));
 	prev_in_primary = bpf_cpumask_test_cpu(prev_cpu, cast_mask(p_mask));
 
@@ -210,7 +207,7 @@ s32 BPF_STRUCT_OPS(nest_select_cpu, struct task_struct *p, s32 prev_cpu,
 	 * First try to stay on current core if it's in the primary set, and
 	 * there's no hypertwin.
 	 */
-	if (prev_in_primary && prev_fully_idle &&
+	if (prev_in_primary &&
 	    scx_bpf_test_and_clear_cpu_idle(prev_cpu)) {
 		cpu = prev_cpu;
 		tctx->prev_misses = 0;
@@ -224,11 +221,14 @@ s32 BPF_STRUCT_OPS(nest_select_cpu, struct task_struct *p, s32 prev_cpu,
 		goto search_reserved;
 	}
 
-	/* Then try any fully idle core in primary. */
-	cpu = scx_bpf_pick_idle_cpu(cast_mask(p_mask), SCX_PICK_IDLE_CORE);
-	if (cpu >= 0) {
-		stat_inc(NEST_STAT(WAKEUP_FULLY_IDLE_PRIMARY));
-		goto migrate_primary;
+	if (find_fully_idle) {
+		/* Then try any fully idle core in primary. */
+		cpu = scx_bpf_pick_idle_cpu(cast_mask(p_mask),
+					    SCX_PICK_IDLE_CORE);
+		if (cpu >= 0) {
+			stat_inc(NEST_STAT(WAKEUP_FULLY_IDLE_PRIMARY));
+			goto migrate_primary;
+		}
 	}
 
 	/* Then try _any_ idle core in primary, even if its hypertwin is active. */
@@ -241,10 +241,13 @@ s32 BPF_STRUCT_OPS(nest_select_cpu, struct task_struct *p, s32 prev_cpu,
 search_reserved:
 	/* Then try any fully idle core in reserve. */
 	bpf_cpumask_and(p_mask, p->cpus_ptr, cast_mask(reserve));
-	cpu = scx_bpf_pick_idle_cpu(cast_mask(p_mask), SCX_PICK_IDLE_CORE);
-	if (cpu >= 0) {
-		stat_inc(NEST_STAT(WAKEUP_FULLY_IDLE_RESERVE));
-		goto promote_to_primary;
+	if (find_fully_idle) {
+		cpu = scx_bpf_pick_idle_cpu(cast_mask(p_mask),
+					    SCX_PICK_IDLE_CORE);
+		if (cpu >= 0) {
+			stat_inc(NEST_STAT(WAKEUP_FULLY_IDLE_RESERVE));
+			goto promote_to_primary;
+		}
 	}
 
 	/* Then try _any_ idle core in reserve, even if its hypertwin is active. */
diff --git a/tools/sched_ext/scx_nest.c b/tools/sched_ext/scx_nest.c
index 218555825..8fd950e02 100644
--- a/tools/sched_ext/scx_nest.c
+++ b/tools/sched_ext/scx_nest.c
@@ -11,7 +11,7 @@
 #include <bpf/bpf.h>
 #include "user_exit_info.h"
 #include "scx_nest.skel.h"
-#include "scx_user_common.h"
+#include "scx_common.h"
 #include "scx_nest.h"
 
 const char help_fmt[] =
@@ -25,6 +25,7 @@ const char help_fmt[] =
 "  -m R_MAX      Maximum number of cores in the reserve nest (default 5)\n"
 "  -i ITERS      Number of successive placement failures tolerated before trying to aggressively expand primary nest (default 2), or 0 to disable\n"
 "  -s SLICE_US   Override slice duration in us (default 20000us / 20ms)\n"
+"  -I            First try to find a fully idle core, and then any idle core, when searching nests. Default behavior is to ignore hypertwins and check for any idle core.\n"
 "  -h            Display this help and exit\n";
 
 static volatile int exit_req;
@@ -113,7 +114,7 @@ int main(int argc, char **argv)
 
 	skel->rodata->nr_cpus = libbpf_num_possible_cpus();
 
-	while ((opt = getopt(argc, argv, "hd:m:i:s:")) != -1) {
+	while ((opt = getopt(argc, argv, "hId:m:i:s:")) != -1) {
 		switch (opt) {
 		case 'd':
 			skel->rodata->p_remove_ns = strtoull(optarg, NULL, 0) * 1000;
@@ -124,6 +125,9 @@ int main(int argc, char **argv)
 		case 'i':
 			skel->rodata->r_impatient = strtoull(optarg, NULL, 0);
 			break;
+		case 'I':
+			skel->rodata->find_fully_idle = true;
+			break;
 		case 's':
 			skel->rodata->slice_ns = strtoull(optarg, NULL, 0) * 1000;
 			break;
-- 
2.43.0.rc2

