From b39d74bf715074063ec024931c03d1174a26f31d Mon Sep 17 00:00:00 2001
From: Piotr Gorski <lucjan.lucjanov@gmail.com>
Date: Sun, 9 Oct 2022 12:51:13 +0200
Subject: [PATCH 30/31] lrng-6.0: merge changes from dev tree

Signed-off-by: Piotr Gorski <lucjan.lucjanov@gmail.com>
---
 drivers/char/lrng/Kconfig            | 30 ++++++++++-
 drivers/char/lrng/lrng_definitions.h |  3 ++
 drivers/char/lrng/lrng_drng_atomic.c |  3 +-
 drivers/char/lrng/lrng_drng_mgr.c    |  8 +--
 drivers/char/lrng/lrng_drng_mgr.h    |  1 -
 drivers/char/lrng/lrng_es_mgr.c      | 71 ++++++++++++++++++--------
 drivers/char/lrng/lrng_es_mgr.h      |  4 +-
 drivers/char/lrng/lrng_proc.c        |  6 +--
 include/linux/lrng.h                 | 74 ----------------------------
 9 files changed, 90 insertions(+), 110 deletions(-)

diff --git a/drivers/char/lrng/Kconfig b/drivers/char/lrng/Kconfig
index bfd6b3ea4..508dc8f48 100644
--- a/drivers/char/lrng/Kconfig
+++ b/drivers/char/lrng/Kconfig
@@ -57,6 +57,32 @@ config LRNG_RANDOM_IF
 	select LRNG_DRNG_ATOMIC
 	select LRNG_SYSCTL
 
+menu "Specific DRNG seeding strategies"
+
+config LRNG_AIS2031_NTG1_SEEDING_STRATEGY
+	bool "AIS 20/31 NTG.1 seeding strategy"
+	default n
+	help
+	  When enabling this option, two entropy sources must
+	  deliver 220 bits of entropy each to consider a DRNG
+	  as fully seeded. Any two entropy sources can be used
+	  to fulfill this requirement. If specific entropy sources
+	  shall not be capable of contributing to this seeding
+	  strategy, the respective entropy source must be configured
+	  to provide less than 220 bits of entropy.
+
+	  The strategy is consistent with the requirements for
+	  NTG.1 compliance in German AIS 20/31 draft from 2022
+	  and is only enforced with lrng_es_mgr.ntg1=1.
+
+	  Compliance with German AIS 20/31 from 2011 is always
+	  present when using /dev/random with the flag O_SYNC or
+	  getrandom(2) with GRND_RANDOM.
+
+	  If unsure, say N.
+
+endmenu # "Specific DRNG seeding strategies"
+
 menu "LRNG Interfaces"
 
 config LRNG_KCAPI_IF
@@ -163,11 +189,11 @@ choice
 	config LRNG_COLLECTION_SIZE_32
 	depends on LRNG_CONTINUOUS_COMPRESSION_ENABLED
 	depends on !LRNG_SWITCHABLE_CONTINUOUS_COMPRESSION
-	depends on !LRNG_OVERSAMPLE_ENTROPY_SOURCES
+	depends on !CRYPTO_FIPS
 		bool "32 interrupt events"
 
 	config LRNG_COLLECTION_SIZE_256
-	depends on !LRNG_OVERSAMPLE_ENTROPY_SOURCES
+	depends on !CRYPTO_FIPS
 		bool "256 interrupt events"
 
 	config LRNG_COLLECTION_SIZE_512
diff --git a/drivers/char/lrng/lrng_definitions.h b/drivers/char/lrng/lrng_definitions.h
index 50f87c40f..c0d2fcff8 100644
--- a/drivers/char/lrng/lrng_definitions.h
+++ b/drivers/char/lrng/lrng_definitions.h
@@ -72,6 +72,9 @@
 #define LRNG_MIN_SEED_ENTROPY_BITS	128
 #define LRNG_INIT_ENTROPY_BITS		32
 
+/* AIS20/31: NTG.1.4 minimum entropy rate for one entropy source*/
+#define LRNG_AIS2031_NPTRNG_MIN_ENTROPY	220
+
 /*
  * Wakeup value
  *
diff --git a/drivers/char/lrng/lrng_drng_atomic.c b/drivers/char/lrng/lrng_drng_atomic.c
index c11236667..b58a32017 100644
--- a/drivers/char/lrng/lrng_drng_atomic.c
+++ b/drivers/char/lrng/lrng_drng_atomic.c
@@ -122,7 +122,8 @@ void lrng_drng_atomic_seed_es(void)
 	spin_lock_irqsave(&drng->spin_lock, flags);
 	lrng_drng_inject(&lrng_drng_atomic, (u8 *)&seedbuf, sizeof(seedbuf),
 			 lrng_fully_seeded(drng->fully_seeded,
-					   lrng_entropy_rate_eb(&seedbuf)),
+					   lrng_entropy_rate_eb(&seedbuf),
+					   &seedbuf),
 			 "atomic");
 	spin_unlock_irqrestore(&drng->spin_lock, flags);
 	lrng_init_ops(&seedbuf);
diff --git a/drivers/char/lrng/lrng_drng_mgr.c b/drivers/char/lrng/lrng_drng_mgr.c
index e9e08c186..7ac03fc07 100644
--- a/drivers/char/lrng/lrng_drng_mgr.c
+++ b/drivers/char/lrng/lrng_drng_mgr.c
@@ -201,12 +201,6 @@ bool lrng_sp80090c_compliant(void)
 	return fips_enabled;
 }
 
-bool lrng_ntg1_compliant(void)
-{
-	/* Implies using of /dev/random with O_SYNC */
-	return true;
-}
-
 /************************* Random Number Generation ***************************/
 
 /* Inject a data buffer into the DRNG - caller must hold its lock */
@@ -259,7 +253,7 @@ static u32 lrng_drng_seed_es_nolock(struct lrng_drng *drng)
 	collected_entropy = lrng_entropy_rate_eb(&seedbuf);
 	lrng_drng_inject(drng, (u8 *)&seedbuf, sizeof(seedbuf),
 			 lrng_fully_seeded(drng->fully_seeded,
-					   collected_entropy),
+					   collected_entropy, &seedbuf),
 			 "regular");
 
 	/* Set the seeding state of the LRNG */
diff --git a/drivers/char/lrng/lrng_drng_mgr.h b/drivers/char/lrng/lrng_drng_mgr.h
index ec120e498..b15ec880b 100644
--- a/drivers/char/lrng/lrng_drng_mgr.h
+++ b/drivers/char/lrng/lrng_drng_mgr.h
@@ -59,7 +59,6 @@ int lrng_drng_alloc_common(struct lrng_drng *drng,
 			   const struct lrng_drng_cb *crypto_cb);
 int lrng_drng_initalize(void);
 bool lrng_sp80090c_compliant(void);
-bool lrng_ntg1_compliant(void);
 bool lrng_get_available(void);
 void lrng_drng_reset(struct lrng_drng *drng);
 void lrng_drng_inject(struct lrng_drng *drng, const u8 *inbuf, u32 inbuflen,
diff --git a/drivers/char/lrng/lrng_es_mgr.c b/drivers/char/lrng/lrng_es_mgr.c
index 23eba26b9..9bfcae617 100644
--- a/drivers/char/lrng/lrng_es_mgr.c
+++ b/drivers/char/lrng/lrng_es_mgr.c
@@ -7,6 +7,7 @@
 
 #define pr_fmt(fmt) KBUILD_MODNAME ": " fmt
 
+#include <linux/module.h>
 #include <linux/random.h>
 #include <linux/utsname.h>
 #include <linux/workqueue.h>
@@ -81,8 +82,20 @@ struct lrng_es_cb *lrng_es[] = {
 	&lrng_es_aux
 };
 
+static bool ntg1 = false;
+#ifdef CONFIG_LRNG_AIS2031_NTG1_SEEDING_STRATEGY
+module_param(ntg1, bool, 0444);
+MODULE_PARM_DESC(ntg1, "Enable AIS20/31 NTG.1 compliant seeding strategy\n");
+#endif
+
 /********************************** Helper ***********************************/
 
+bool lrng_ntg1_compliant(void)
+{
+	/* Implies use of /dev/random w/ O_SYNC / getrandom w/ GRND_RANDOM */
+	return ntg1;
+}
+
 void lrng_debug_report_seedlevel(const char *name)
 {
 #ifdef CONFIG_WARN_ALL_UNSEEDED_RANDOM
@@ -183,8 +196,37 @@ static void lrng_init_wakeup(void)
 	lrng_init_wakeup_dev();
 }
 
-bool lrng_fully_seeded(bool fully_seeded, u32 collected_entropy)
+static u32 lrng_avail_entropy_thresh(void)
+{
+	u32 ent_thresh = lrng_security_strength();
+
+	/*
+	 * Apply oversampling during initialization according to SP800-90C as
+	 * we request a larger buffer from the ES.
+	 */
+	if (lrng_sp80090c_compliant() &&
+	    !lrng_state.all_online_numa_node_seeded)
+		ent_thresh += LRNG_SEED_BUFFER_INIT_ADD_BITS;
+
+	return ent_thresh;
+}
+
+bool lrng_fully_seeded(bool fully_seeded, u32 collected_entropy,
+		       struct entropy_buf *eb)
 {
+	/* AIS20/31 NTG.1: two entropy sources with each delivering 220 bits */
+	if (ntg1) {
+		u32 i, result = 0, ent_thresh = lrng_avail_entropy_thresh();
+
+		for_each_lrng_es(i) {
+			result += (eb ? eb->e_bits[i] :
+				        lrng_es[i]->curr_entropy(ent_thresh)) >=
+				  LRNG_AIS2031_NPTRNG_MIN_ENTROPY;
+		}
+
+		return (result >= 2);
+	}
+
 	return (collected_entropy >= lrng_get_seed_entropy_osr(fully_seeded));
 }
 
@@ -236,21 +278,6 @@ static void lrng_set_operational(void)
 	}
 }
 
-static u32 lrng_avail_entropy_thresh(void)
-{
-	u32 ent_thresh = lrng_security_strength();
-
-	/*
-	 * Apply oversampling during initialization according to SP800-90C as
-	 * we request a larger buffer from the ES.
-	 */
-	if (lrng_sp80090c_compliant() &&
-	    !lrng_state.all_online_numa_node_seeded)
-		ent_thresh += LRNG_SEED_BUFFER_INIT_ADD_BITS;
-
-	return ent_thresh;
-}
-
 /* Available entropy in the entire LRNG considering all entropy sources */
 u32 lrng_avail_entropy(void)
 {
@@ -288,12 +315,14 @@ void lrng_init_ops(struct entropy_buf *eb)
 	if (state->lrng_operational)
 		return;
 
-	requested_bits = lrng_get_seed_entropy_osr(
-					state->all_online_numa_node_seeded);
+	requested_bits = ntg1 ?
+		/* Approximation so that two ES should deliver 220 bits each */
+		(lrng_avail_entropy() + LRNG_AIS2031_NPTRNG_MIN_ENTROPY) :
+		/* Apply SP800-90C oversampling if applicable */
+		lrng_get_seed_entropy_osr(state->all_online_numa_node_seeded);
 
 	if (eb) {
-		for_each_lrng_es(i)
-			seed_bits += eb->e_bits[i];
+		seed_bits = lrng_entropy_rate_eb(eb);
 	} else {
 		u32 ent_thresh = lrng_avail_entropy_thresh();
 
@@ -306,7 +335,7 @@ void lrng_init_ops(struct entropy_buf *eb)
 		lrng_set_operational();
 		lrng_set_entropy_thresh(requested_bits);
 	} else if (lrng_fully_seeded(state->all_online_numa_node_seeded,
-				     seed_bits)) {
+				     seed_bits, eb)) {
 		if (state->can_invalidate)
 			invalidate_batched_entropy();
 
diff --git a/drivers/char/lrng/lrng_es_mgr.h b/drivers/char/lrng/lrng_es_mgr.h
index f9bbd4863..8fa24ebbd 100644
--- a/drivers/char/lrng/lrng_es_mgr.h
+++ b/drivers/char/lrng/lrng_es_mgr.h
@@ -23,6 +23,7 @@ extern struct lrng_es_cb *lrng_es[];
 #define for_each_lrng_es(ctr)		\
 	for ((ctr) = 0; (ctr) < lrng_ext_es_last; (ctr)++)
 
+bool lrng_ntg1_compliant(void);
 bool lrng_pool_all_numa_nodes_seeded_get(void);
 bool lrng_state_min_seeded(void);
 void lrng_debug_report_seedlevel(const char *name);
@@ -42,7 +43,8 @@ void lrng_pool_lock(void);
 void lrng_pool_unlock(void);
 void lrng_pool_all_numa_nodes_seeded(bool set);
 
-bool lrng_fully_seeded(bool fully_seeded, u32 collected_entropy);
+bool lrng_fully_seeded(bool fully_seeded, u32 collected_entropy,
+		       struct entropy_buf *eb);
 u32 lrng_entropy_rate_eb(struct entropy_buf *eb);
 void lrng_unset_fully_seeded(struct lrng_drng *drng);
 void lrng_fill_seed_buffer(struct entropy_buf *eb, u32 requested_bits);
diff --git a/drivers/char/lrng/lrng_proc.c b/drivers/char/lrng/lrng_proc.c
index 92329cc6e..2818591be 100644
--- a/drivers/char/lrng/lrng_proc.c
+++ b/drivers/char/lrng/lrng_proc.c
@@ -34,15 +34,15 @@ static int lrng_proc_type_show(struct seq_file *m, void *v)
 		 "DRNG name: %s\n"
 		 "LRNG security strength in bits: %d\n"
 		 "Number of DRNG instances: %u\n"
-		 "Standards compliance: %s%s\n"
+		 "Standards compliance: %sNTG.1 (2011%s)\n"
 		 "LRNG minimally seeded: %s\n"
 		 "LRNG fully seeded: %s\n"
 		 "LRNG entropy level: %u\n",
 		 lrng_drng_init->drng_cb->drng_name(),
 		 lrng_security_strength(),
 		 numa_drngs,
-		 lrng_sp80090c_compliant() ? "SP800-90C " : "",
-		 lrng_ntg1_compliant() ? "NTG.1 " : "",
+		 lrng_sp80090c_compliant() ? "SP800-90C, " : "",
+		 lrng_ntg1_compliant() ? " / 2022" : "",
 		 lrng_state_min_seeded() ? "true" : "false",
 		 lrng_state_fully_seeded() ? "true" : "false",
 		 lrng_avail_entropy());
diff --git a/include/linux/lrng.h b/include/linux/lrng.h
index c0d31a03d..8ec50ac7d 100644
--- a/include/linux/lrng.h
+++ b/include/linux/lrng.h
@@ -174,78 +174,4 @@ void lrng_get_random_bytes_min(void *buf, int nbytes);
 int lrng_get_random_bytes_pr(void *buf, int nbytes);
 #endif
 
-/*
- * lrng_get_seed() - Fill buffer with data from entropy sources
- *
- * This call allows accessing the entropy sources directly and fill the buffer
- * with data from all available entropy sources. This filled buffer is
- * identical to the temporary seed buffer used by the LRNG to seed its DRNGs.
- *
- * The call is to allows users to seed their DRNG directly from the entropy
- * sources in case the caller does not want to use the LRNG's DRNGs. This
- * buffer can be directly used to seed the caller's DRNG from.
- *
- * The call blocks as long as one LRNG DRNG is not yet fully seeded. If
- * LRNG_GET_SEED_NONBLOCK is specified, it does not block in this case, but
- * returns with an error.
- *
- * Considering SP800-90C, there is a differentiation between the seeding
- * requirements during instantiating a DRNG and at runtime of the DRNG. When
- * specifying LRNG_GET_SEED_FULLY_SEEDED the caller indicates the DRNG was
- * already fully seeded and the regular amount of entropy is requested.
- * Otherwise, the LRNG will obtain the entropy rate required for initial
- * seeding. The following minimum entropy rates will be obtained:
- *
- * * FIPS mode:
- *	* Initial seeding: 384 bits of entropy
- *	* Runtime seeding: 256 bits of entropy
- * * Non-FIPS mode:
- *	* 128 bits of entropy in any case
- *
- * Albeit these are minimum entropy rates, the LRNG tries to request the
- * given amount of entropy from each entropy source individually. If the
- * minimum amount of entropy cannot be obtained collectively by all entropy
- * sources, the LRNG will not fill the buffer.
- *
- * The return data in buf is structurally equivalent to the following
- * definition:
- *
- * struct {
- *	u64 seedlen;
- *	u64 entropy_rate;
- *	struct entropy_buf seed;
- * } __attribute((__packed__));
- *
- * As struct entropy_buf is not known outsize of the LRNG, the LRNG fills
- * seedlen first with the size of struct entropy_buf. If the caller-provided
- * buffer buf is smaller than u64, then -EINVAL is returned
- * and buf is not touched. If it is u64 or larger but smaller
- * than the size of the structure above, -EMSGSIZE is returned and seedlen
- * is filled with the size of the buffer. Finally, if buf is large
- * enough to hold all data, it is filled with the seed data and the seedlen
- * is set to sizeof(struct entropy_buf). The entropy rate is returned with
- * the variable entropy_rate and provides the value in bits.
- *
- * The seed buffer is the data that should be handed to the caller's DRNG as
- * seed data.
- *
- * @buf [out] Buffer to be filled with data from the entropy sources - note, the
- *	      buffer is marked as u64 to ensure it is aligned to 64 bits.
- * @nbytes [in] Size of the buffer allocated by the caller - this value
- *		provides size of @param buf in bytes.
- * @flags [in] Flags field to adjust the behavior
- *
- * @return -EINVAL or -EMSGSIZE indicating the buffer is too small, -EAGAIN when
- *	   the call would block, but NONBLOCK is specified, > 0 the size of
- *	   the filled buffer.
- */
-#ifdef CONFIG_LRNG
-enum lrng_get_seed_flags {
-	LRNG_GET_SEED_NONBLOCK = 0x0001, /**< Do not block the call */
-	LRNG_GET_SEED_FULLY_SEEDED = 0x0002, /**< DRNG is fully seeded */
-};
-
-ssize_t lrng_get_seed(u64 *buf, size_t nbytes, unsigned int flags);
-#endif
-
 #endif /* _LRNG_H */
-- 
2.38.0.rc1.6.g4fd6c5e444

