From 77ae0acfe65c3a28ee4cfe896ba2d5fff5b1e8dc Mon Sep 17 00:00:00 2001
From: Masahito S <firelzrd@gmail.com>
Date: Mon, 13 Mar 2023 21:50:37 +0900
Subject: [PATCH 13/14] sched: Merge latency_offset into slice

---
 include/linux/sched.h |  2 --
 kernel/sched/core.c   | 17 +++++++----------
 kernel/sched/fair.c   | 24 ++++++++++++------------
 kernel/sched/sched.h  |  2 +-
 4 files changed, 20 insertions(+), 25 deletions(-)

diff --git a/include/linux/sched.h b/include/linux/sched.h
index d338861fe..d73904afe 100644
--- a/include/linux/sched.h
+++ b/include/linux/sched.h
@@ -573,8 +573,6 @@ struct sched_entity {
 	/* cached value of my_q->h_nr_running */
 	unsigned long			runnable_weight;
 #endif
-	/* preemption offset in ns */
-	long				latency_offset;
 
 #ifdef CONFIG_SMP
 	/*
diff --git a/kernel/sched/core.c b/kernel/sched/core.c
index 2c8c071bf..68ec12bc6 100644
--- a/kernel/sched/core.c
+++ b/kernel/sched/core.c
@@ -1285,9 +1285,10 @@ static void set_load_weight(struct task_struct *p, bool update_load)
 	}
 }
 
-static void set_latency_offset(struct task_struct *p)
+static inline void set_latency_prio(struct task_struct *p, int prio)
 {
-	p->se.latency_offset = calc_latency_offset(p->latency_prio - MAX_RT_PRIO);
+	p->latency_prio = prio;
+	p->se.slice = calc_latency_request(prio - MAX_RT_PRIO);
 }
 
 #ifdef CONFIG_UCLAMP_TASK
@@ -4439,7 +4440,7 @@ static void __sched_fork(unsigned long clone_flags, struct task_struct *p)
 	p->se.lag			= 0;
 	INIT_LIST_HEAD(&p->se.group_node);
 
-	set_latency_offset(p);
+	set_latency_prio(p, p->latency_prio);
 
 #ifdef CONFIG_FAIR_GROUP_SCHED
 	p->se.cfs_rq			= NULL;
@@ -4691,9 +4692,7 @@ int sched_fork(unsigned long clone_flags, struct task_struct *p)
 
 		p->prio = p->normal_prio = p->static_prio;
 		set_load_weight(p, false);
-
-		p->latency_prio = NICE_TO_PRIO(0);
-		set_latency_offset(p);
+		set_latency_prio(p, NICE_TO_PRIO(0));
 
 		/*
 		 * We don't need the reset flag anymore after the fork. It has
@@ -7466,10 +7465,8 @@ static void __setscheduler_params(struct task_struct *p,
 static void __setscheduler_latency(struct task_struct *p,
 				   const struct sched_attr *attr)
 {
-	if (attr->sched_flags & SCHED_FLAG_LATENCY_NICE) {
-		p->latency_prio = NICE_TO_PRIO(attr->sched_latency_nice);
-		set_latency_offset(p);
-	}
+	if (attr->sched_flags & SCHED_FLAG_LATENCY_NICE)
+		set_latency_prio(p, NICE_TO_PRIO(attr->sched_latency_nice));
 }
 
 /*
diff --git a/kernel/sched/fair.c b/kernel/sched/fair.c
index 0e288c51e..98c29fc32 100644
--- a/kernel/sched/fair.c
+++ b/kernel/sched/fair.c
@@ -889,11 +889,18 @@ int sched_update_scaling(void)
 }
 #endif
 
-long calc_latency_offset(int prio)
+long calc_latency_request(int prio)
 {
 	u32 weight = sched_prio_to_weight[prio];
 	u64 base = sysctl_sched_base_slice;
 
+	/*
+	 * For EEVDF the virtual time slope is determined by w_i (iow.
+	 * nice) while the request time r_i is determined by
+	 * latency-nice.
+	 *
+	 * Smaller request gets better latency.
+	 */
 	return div_u64(base << SCHED_FIXEDPOINT_SHIFT, weight);
 }
 
@@ -913,13 +920,6 @@ static void update_deadline(struct cfs_rq *cfs_rq, struct sched_entity *se, bool
 	if (!force && (s64)(se->vruntime - se->deadline) < 0)
 		return;
 
-	/*
-	 * For EEVDF the virtual time slope is determined by w_i (iow.
-	 * nice) while the request time r_i is determined by
-	 * latency-nice.
-	 */
-	se->slice = se->latency_offset;
-
 	/*
 	 * vd_i = ve_i + r_i / w_i
 	 */
@@ -12171,7 +12171,7 @@ void init_tg_cfs_entry(struct task_group *tg, struct cfs_rq *cfs_rq,
 
 	se->my_q = cfs_rq;
 
-	se->latency_offset = calc_latency_offset(tg->latency_prio - MAX_RT_PRIO);
+	se->slice = calc_latency_request(tg->latency_prio - MAX_RT_PRIO);
 
 	/* guarantee group entities always have weight */
 	update_load_set(&se->load, NICE_0_LOAD);
@@ -12305,7 +12305,7 @@ int sched_group_set_idle(struct task_group *tg, long idle)
 
 int sched_group_set_latency(struct task_group *tg, int prio)
 {
-	long latency_offset;
+	long slice;
 	int i;
 
 	if (tg == &root_task_group)
@@ -12319,12 +12319,12 @@ int sched_group_set_latency(struct task_group *tg, int prio)
 	}
 
 	tg->latency_prio = prio;
-	latency_offset = calc_latency_offset(prio - MAX_RT_PRIO);
+	slice = calc_latency_request(prio - MAX_RT_PRIO);
 
 	for_each_possible_cpu(i) {
 		struct sched_entity *se = tg->se[i];
 
-		WRITE_ONCE(se->latency_offset, latency_offset);
+		WRITE_ONCE(se->slice, slice);
 	}
 
 	mutex_unlock(&shares_mutex);
diff --git a/kernel/sched/sched.h b/kernel/sched/sched.h
index 7d61bcdf7..44996482c 100644
--- a/kernel/sched/sched.h
+++ b/kernel/sched/sched.h
@@ -2477,7 +2477,7 @@ extern unsigned int sysctl_numa_balancing_scan_size;
 extern unsigned int sysctl_numa_balancing_hot_threshold;
 #endif
 
-extern long calc_latency_offset(int prio);
+extern long calc_latency_request(int prio);
 
 #ifdef CONFIG_SCHED_HRTICK
 
-- 
2.39.2.501.gd9d677b2d8

