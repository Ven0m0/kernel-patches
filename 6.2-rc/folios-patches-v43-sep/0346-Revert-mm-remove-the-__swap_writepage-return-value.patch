From d02a2a7e78135f43ed0b746a3da2198a3b033603 Mon Sep 17 00:00:00 2001
From: Piotr Gorski <lucjan.lucjanov@gmail.com>
Date: Thu, 26 Jan 2023 21:27:51 +0100
Subject: [PATCH 346/353] Revert "mm: remove the __swap_writepage return value"

This reverts commit efd177e856c3fa554a88f0748e2236310dfad89b.

Signed-off-by: Piotr Gorski <lucjan.lucjanov@gmail.com>
---
 mm/page_io.c | 23 ++++++++++++++---------
 mm/swap.h    |  2 +-
 2 files changed, 15 insertions(+), 10 deletions(-)

diff --git a/mm/page_io.c b/mm/page_io.c
index 3ba5a6e99..d47def70e 100644
--- a/mm/page_io.c
+++ b/mm/page_io.c
@@ -177,11 +177,11 @@ int generic_swapfile_activate(struct swap_info_struct *sis,
 int swap_writepage(struct page *page, struct writeback_control *wbc)
 {
 	struct folio *folio = page_folio(page);
-	int ret;
+	int ret = 0;
 
 	if (folio_free_swap(folio)) {
 		folio_unlock(folio);
-		return 0;
+		goto out;
 	}
 	/*
 	 * Arch code may have to preserve more data than just the page
@@ -191,16 +191,17 @@ int swap_writepage(struct page *page, struct writeback_control *wbc)
 	if (ret) {
 		folio_mark_dirty(folio);
 		folio_unlock(folio);
-		return ret;
+		goto out;
 	}
 	if (frontswap_store(&folio->page) == 0) {
 		folio_start_writeback(folio);
 		folio_unlock(folio);
 		folio_end_writeback(folio);
-		return 0;
+		goto out;
 	}
-	__swap_writepage(&folio->page, wbc);
-	return 0;
+	ret = __swap_writepage(&folio->page, wbc);
+out:
+	return ret;
 }
 
 static inline void count_swpout_vm_event(struct page *page)
@@ -287,7 +288,7 @@ static void sio_write_complete(struct kiocb *iocb, long ret)
 	mempool_free(sio, sio_pool);
 }
 
-static void swap_writepage_fs(struct page *page, struct writeback_control *wbc)
+static int swap_writepage_fs(struct page *page, struct writeback_control *wbc)
 {
 	struct swap_iocb *sio = NULL;
 	struct swap_info_struct *sis = page_swap_info(page);
@@ -324,9 +325,11 @@ static void swap_writepage_fs(struct page *page, struct writeback_control *wbc)
 	}
 	if (wbc->swap_plug)
 		*wbc->swap_plug = sio;
+
+	return 0;
 }
 
-void __swap_writepage(struct page *page, struct writeback_control *wbc)
+int __swap_writepage(struct page *page, struct writeback_control *wbc)
 {
 	struct bio *bio;
 	int ret;
@@ -344,7 +347,7 @@ void __swap_writepage(struct page *page, struct writeback_control *wbc)
 	ret = bdev_write_page(sis->bdev, swap_page_sector(page), page, wbc);
 	if (!ret) {
 		count_swpout_vm_event(page);
-		return;
+		return 0;
 	}
 
 	bio = bio_alloc(sis->bdev, 1,
@@ -359,6 +362,8 @@ void __swap_writepage(struct page *page, struct writeback_control *wbc)
 	set_page_writeback(page);
 	unlock_page(page);
 	submit_bio(bio);
+
+	return 0;
 }
 
 void swap_write_unplug(struct swap_iocb *sio)
diff --git a/mm/swap.h b/mm/swap.h
index 28be6cb32..f5eb5069d 100644
--- a/mm/swap.h
+++ b/mm/swap.h
@@ -17,7 +17,7 @@ static inline void swap_read_unplug(struct swap_iocb *plug)
 }
 void swap_write_unplug(struct swap_iocb *sio);
 int swap_writepage(struct page *page, struct writeback_control *wbc);
-void __swap_writepage(struct page *page, struct writeback_control *wbc);
+int __swap_writepage(struct page *page, struct writeback_control *wbc);
 
 /* linux/mm/swap_state.c */
 /* One swap address space for each 64M swap space */
-- 
2.39.0.rc2.1.gbd5df96b79

