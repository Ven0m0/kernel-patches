From d511e7d63455effd4c9af1c5df409064f2b8fc74 Mon Sep 17 00:00:00 2001
From: Piotr Gorski <lucjan.lucjanov@gmail.com>
Date: Thu, 26 Jan 2023 21:27:52 +0100
Subject: [PATCH 347/353] Revert "mm: use an on-stack bio for synchronous
 swapin"

This reverts commit 3569bce20aedec28bf24fe8f7fc2dc759eaa572a.

Signed-off-by: Piotr Gorski <lucjan.lucjanov@gmail.com>
---
 mm/page_io.c | 69 +++++++++++++++++++++++-----------------------------
 1 file changed, 31 insertions(+), 38 deletions(-)

diff --git a/mm/page_io.c b/mm/page_io.c
index d47def70e..872a226d1 100644
--- a/mm/page_io.c
+++ b/mm/page_io.c
@@ -51,9 +51,10 @@ static void end_swap_bio_write(struct bio *bio)
 	bio_put(bio);
 }
 
-static void __end_swap_bio_read(struct bio *bio)
+static void end_swap_bio_read(struct bio *bio)
 {
 	struct page *page = bio_first_page_all(bio);
+	struct task_struct *waiter = bio->bi_private;
 
 	if (bio->bi_status) {
 		SetPageError(page);
@@ -61,16 +62,18 @@ static void __end_swap_bio_read(struct bio *bio)
 		pr_alert_ratelimited("Read-error on swap-device (%u:%u:%llu)\n",
 				     MAJOR(bio_dev(bio)), MINOR(bio_dev(bio)),
 				     (unsigned long long)bio->bi_iter.bi_sector);
-	} else {
-		SetPageUptodate(page);
+		goto out;
 	}
-	unlock_page(page);
-}
 
-static void end_swap_bio_read(struct bio *bio)
-{
-	__end_swap_bio_read(bio);
+	SetPageUptodate(page);
+out:
+	unlock_page(page);
+	WRITE_ONCE(bio->bi_private, NULL);
 	bio_put(bio);
+	if (waiter) {
+		blk_wake_io_task(waiter);
+		put_task_struct(waiter);
+	}
 }
 
 int generic_swapfile_activate(struct swap_info_struct *sis,
@@ -441,33 +444,7 @@ static void swap_readpage_fs(struct page *page,
 		*plug = sio;
 }
 
-static void swap_readpage_bdev_sync(struct page *page,
-		struct swap_info_struct *sis)
-{
-	struct bio_vec bv;
-	struct bio bio;
-
-	if ((sis->flags & SWP_SYNCHRONOUS_IO) &&
-	    !bdev_read_page(sis->bdev, swap_page_sector(page), page)) {
-		count_vm_event(PSWPIN);
-		return;
-	}
-
-	bio_init(&bio, sis->bdev, &bv, 1, REQ_OP_READ);
-	bio.bi_iter.bi_sector = swap_page_sector(page);
-	bio_add_page(&bio, page, thp_size(page), 0);
-	/*
-	 * Keep this task valid during swap readpage because the oom killer may
-	 * attempt to access it in the page fault retry time check.
-	 */
-	get_task_struct(current);
-	count_vm_event(PSWPIN);
-	submit_bio_wait(&bio);
-	__end_swap_bio_read(&bio);
-	put_task_struct(current);
-}
-
-static void swap_readpage_bdev_async(struct page *page,
+static void swap_readpage_bdev(struct page *page, bool synchronous,
 		struct swap_info_struct *sis)
 {
 	struct bio *bio;
@@ -482,8 +459,26 @@ static void swap_readpage_bdev_async(struct page *page,
 	bio->bi_iter.bi_sector = swap_page_sector(page);
 	bio->bi_end_io = end_swap_bio_read;
 	bio_add_page(bio, page, thp_size(page), 0);
+	/*
+	 * Keep this task valid during swap readpage because the oom killer may
+	 * attempt to access it in the page fault retry time check.
+	 */
+	if (synchronous) {
+		get_task_struct(current);
+		bio->bi_private = current;
+	}
 	count_vm_event(PSWPIN);
+	bio_get(bio);
 	submit_bio(bio);
+	while (synchronous) {
+		set_current_state(TASK_UNINTERRUPTIBLE);
+		if (!READ_ONCE(bio->bi_private))
+			break;
+
+		blk_io_schedule();
+	}
+	__set_current_state(TASK_RUNNING);
+	bio_put(bio);
 }
 
 void swap_readpage(struct page *page, bool synchronous, struct swap_iocb **plug)
@@ -513,10 +508,8 @@ void swap_readpage(struct page *page, bool synchronous, struct swap_iocb **plug)
 		unlock_page(page);
 	} else if (data_race(sis->flags & SWP_FS_OPS)) {
 		swap_readpage_fs(page, plug);
-	} else if (synchronous) {
-		swap_readpage_bdev_sync(page, sis);
 	} else {
-		swap_readpage_bdev_async(page, sis);
+		swap_readpage_bdev(page, synchronous, sis);
 	}
 
 	if (workingset) {
-- 
2.39.0.rc2.1.gbd5df96b79

