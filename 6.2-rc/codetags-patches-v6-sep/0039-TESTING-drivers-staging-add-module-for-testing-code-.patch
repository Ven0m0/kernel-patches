From de6a1f54ac55365090acd501f589c396a68aec7a Mon Sep 17 00:00:00 2001
From: Suren Baghdasaryan <surenb@google.com>
Date: Sun, 31 Jul 2022 09:15:12 -0700
Subject: [PATCH 39/45] TESTING: drivers/staging: add module for testing code
 tagging module support

Signed-off-by: Suren Baghdasaryan <surenb@google.com>
---
 drivers/staging/Kconfig           |  2 +
 drivers/staging/Makefile          |  1 +
 drivers/staging/ctagmod/Kconfig   |  9 +++++
 drivers/staging/ctagmod/Makefile  |  2 +
 drivers/staging/ctagmod/ctagmod.c | 61 +++++++++++++++++++++++++++++++
 5 files changed, 75 insertions(+)
 create mode 100644 drivers/staging/ctagmod/Kconfig
 create mode 100644 drivers/staging/ctagmod/Makefile
 create mode 100644 drivers/staging/ctagmod/ctagmod.c

diff --git a/drivers/staging/Kconfig b/drivers/staging/Kconfig
index 5cfabd537..d8032d72a 100644
--- a/drivers/staging/Kconfig
+++ b/drivers/staging/Kconfig
@@ -80,4 +80,6 @@ source "drivers/staging/qlge/Kconfig"
 
 source "drivers/staging/vme_user/Kconfig"
 
+source "drivers/staging/ctagmod/Kconfig"
+
 endif # STAGING
diff --git a/drivers/staging/Makefile b/drivers/staging/Makefile
index f8c3aa9c2..c87eba322 100644
--- a/drivers/staging/Makefile
+++ b/drivers/staging/Makefile
@@ -29,3 +29,4 @@ obj-$(CONFIG_PI433)		+= pi433/
 obj-$(CONFIG_XIL_AXIS_FIFO)	+= axis-fifo/
 obj-$(CONFIG_FIELDBUS_DEV)     += fieldbus/
 obj-$(CONFIG_QLGE)		+= qlge/
+obj-$(CONFIG_CTAGMOD)		+= ctagmod/
diff --git a/drivers/staging/ctagmod/Kconfig b/drivers/staging/ctagmod/Kconfig
new file mode 100644
index 000000000..f267ffc6a
--- /dev/null
+++ b/drivers/staging/ctagmod/Kconfig
@@ -0,0 +1,9 @@
+# SPDX-License-Identifier: GPL-2.0
+config CTAGMOD
+	tristate "Code tagging test module"
+	depends on CODE_TAGGING
+	help
+	  Code tagging test module.
+
+	  To compile this driver as a module, choose M here: the module
+	  will be called ctagmod.
diff --git a/drivers/staging/ctagmod/Makefile b/drivers/staging/ctagmod/Makefile
new file mode 100644
index 000000000..63342b42d
--- /dev/null
+++ b/drivers/staging/ctagmod/Makefile
@@ -0,0 +1,2 @@
+# SPDX-License-Identifier: GPL-2.0
+obj-$(CONFIG_CTAGMOD) += ctagmod.o
diff --git a/drivers/staging/ctagmod/ctagmod.c b/drivers/staging/ctagmod/ctagmod.c
new file mode 100644
index 000000000..edc81bb20
--- /dev/null
+++ b/drivers/staging/ctagmod/ctagmod.c
@@ -0,0 +1,61 @@
+#include <linux/init.h>
+#include <linux/kernel.h>
+#include <linux/mm.h>
+#include <linux/module.h>
+#include <linux/slab.h>
+
+MODULE_LICENSE("GPL");
+
+static struct page *pg_data;
+static void *slab_data;
+
+static int __init ctagmod_start(void)
+{
+#ifdef CONFIG_ALLOC_TAGGING
+	struct page *pg_tmp;
+	void *slab_tmp;
+
+	printk(KERN_INFO "Loading ctagmod module...\n");
+
+	pg_data = alloc_pages(GFP_KERNEL, 0);
+	if (unlikely(!pg_data)) {
+		printk(KERN_ERR "Failed to allocate a page!\n");
+		return -ENOMEM;
+	}
+	pg_tmp = alloc_pages(GFP_KERNEL, 0);
+	if (unlikely(!pg_tmp)) {
+		printk(KERN_ERR "Failed to allocate a page!\n");
+		return -ENOMEM;
+	}
+	free_pages((unsigned long)page_address(pg_tmp), 0);
+	printk(KERN_INFO "Page is allocated\n");
+
+	slab_data = kmalloc(10, GFP_KERNEL);
+	if (unlikely(!slab_data)) {
+		printk(KERN_ERR "Failed to allocate a slab object!\n");
+		return -ENOMEM;
+	}
+	slab_tmp = kmalloc(10, GFP_KERNEL);
+	if (unlikely(!slab_tmp)) {
+		printk(KERN_ERR "Failed to allocate a slab object!\n");
+		return -ENOMEM;
+	}
+	kfree(slab_tmp);
+	printk(KERN_INFO "Slab object is allocated\n");
+#else
+	printk(KERN_INFO "CONFIG_ALLOC_TAGGING is undefined\n");
+#endif
+	return 0;
+}
+
+static void __exit ctagmod_end(void)
+{
+	if (slab_data)
+		kfree(slab_data);
+	if (pg_data)
+		free_pages((unsigned long)page_address(pg_data), 0);
+	printk(KERN_INFO "Unloading ctagmod\n");
+}
+
+module_init(ctagmod_start);
+module_exit(ctagmod_end);
-- 
2.39.0.rc2.1.gbd5df96b79

