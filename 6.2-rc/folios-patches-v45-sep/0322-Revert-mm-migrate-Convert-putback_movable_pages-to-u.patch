From d0aacc3092ded73648d031b131877ce1ee5fe197 Mon Sep 17 00:00:00 2001
From: Piotr Gorski <lucjan.lucjanov@gmail.com>
Date: Wed, 25 Jan 2023 19:18:56 +0100
Subject: [PATCH 322/356] Revert "mm/migrate: Convert putback_movable_pages()
 to use folios"

This reverts commit 54cdb470bcee8c17bd06c0171fba2a429d48d139.

Signed-off-by: Piotr Gorski <lucjan.lucjanov@gmail.com>
---
 mm/migrate.c | 46 +++++++++++++++++++++++-----------------------
 1 file changed, 23 insertions(+), 23 deletions(-)

diff --git a/mm/migrate.c b/mm/migrate.c
index f252ca226..10677aba8 100644
--- a/mm/migrate.c
+++ b/mm/migrate.c
@@ -129,12 +129,12 @@ int isolate_movable_page(struct page *page, isolate_mode_t mode)
 	return -EBUSY;
 }
 
-static void putback_movable_folio(struct folio *folio)
+static void putback_movable_page(struct page *page)
 {
-	const struct movable_operations *mops = folio_movable_ops(folio);
+	const struct movable_operations *mops = page_movable_ops(page);
 
-	mops->putback_page(&folio->page);
-	folio_clear_isolated(folio);
+	mops->putback_page(page);
+	ClearPageIsolated(page);
 }
 
 /*
@@ -147,33 +147,33 @@ static void putback_movable_folio(struct folio *folio)
  */
 void putback_movable_pages(struct list_head *l)
 {
-	struct folio *folio;
-	struct folio *folio2;
+	struct page *page;
+	struct page *page2;
 
-	list_for_each_entry_safe(folio, folio2, l, lru) {
-		if (unlikely(folio_test_hugetlb(folio))) {
-			putback_active_hugepage(&folio->page);
+	list_for_each_entry_safe(page, page2, l, lru) {
+		if (unlikely(PageHuge(page))) {
+			putback_active_hugepage(page);
 			continue;
 		}
-		list_del(&folio->lru);
+		list_del(&page->lru);
 		/*
-		 * We isolated non-lru movable folio so here we can use
-		 * __PageMovable because LRU folio's mapping cannot have
+		 * We isolated non-lru movable page so here we can use
+		 * __PageMovable because LRU page's mapping cannot have
 		 * PAGE_MAPPING_MOVABLE.
 		 */
-		if (unlikely(__folio_test_movable(folio))) {
-			VM_BUG_ON_FOLIO(!folio_test_isolated(folio), folio);
-			folio_lock(folio);
-			if (folio_test_movable(folio))
-				putback_movable_folio(folio);
+		if (unlikely(__PageMovable(page))) {
+			VM_BUG_ON_PAGE(!PageIsolated(page), page);
+			lock_page(page);
+			if (PageMovable(page))
+				putback_movable_page(page);
 			else
-				folio_clear_isolated(folio);
-			folio_unlock(folio);
-			folio_put(folio);
+				ClearPageIsolated(page);
+			unlock_page(page);
+			put_page(page);
 		} else {
-			node_stat_mod_folio(folio, NR_ISOLATED_ANON +
-					folio_is_file_lru(folio), -folio_nr_pages(folio));
-			folio_putback_lru(folio);
+			mod_node_page_state(page_pgdat(page), NR_ISOLATED_ANON +
+					page_is_file_lru(page), -thp_nr_pages(page));
+			putback_lru_page(page);
 		}
 	}
 }
-- 
2.39.0.rc2.1.gbd5df96b79

