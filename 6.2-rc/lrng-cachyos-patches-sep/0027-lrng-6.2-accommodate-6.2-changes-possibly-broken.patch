From 7a1f0dbdaae83c57a6038e67752ab909d51579f5 Mon Sep 17 00:00:00 2001
From: Oleksandr Natalenko <oleksandr@natalenko.name>
Date: Tue, 27 Dec 2022 00:23:06 +0100
Subject: [PATCH 27/28] lrng-6.2: accommodate 6.2 changes, possibly broken

Signed-off-by: Oleksandr Natalenko <oleksandr@natalenko.name>
---
 drivers/char/lrng/lrng_es_cpu.c                  | 1 +
 drivers/char/lrng/lrng_es_mgr.c                  | 5 +++--
 drivers/char/lrng/lrng_interface_random_kernel.c | 3 ++-
 3 files changed, 6 insertions(+), 3 deletions(-)

diff --git a/drivers/char/lrng/lrng_es_cpu.c b/drivers/char/lrng/lrng_es_cpu.c
index f982cc31d..670dae821 100644
--- a/drivers/char/lrng/lrng_es_cpu.c
+++ b/drivers/char/lrng/lrng_es_cpu.c
@@ -11,6 +11,7 @@
 #include <crypto/hash.h>
 #include <linux/module.h>
 #include <linux/random.h>
+#include <asm/archrandom.h>
 
 #include "lrng_definitions.h"
 #include "lrng_es_aux.h"
diff --git a/drivers/char/lrng/lrng_es_mgr.c b/drivers/char/lrng/lrng_es_mgr.c
index 5d1ab84c9..5728fc0d4 100644
--- a/drivers/char/lrng/lrng_es_mgr.c
+++ b/drivers/char/lrng/lrng_es_mgr.c
@@ -11,6 +11,7 @@
 #include <linux/random.h>
 #include <linux/utsname.h>
 #include <linux/workqueue.h>
+#include <asm/archrandom.h>
 
 #include "lrng_drng_mgr.h"
 #include "lrng_es_aux.h"
@@ -379,11 +380,11 @@ void __init lrng_rand_initialize_early(void)
 	unsigned int i;
 
 	for (i = 0; i < ARRAY_SIZE(seed.data); i += longs) {
-		longs = arch_get_random_seed_longs_early(seed.data + i,
+		longs = arch_get_random_seed_longs(seed.data + i,
 						ARRAY_SIZE(seed.data) - i);
 		if (longs)
 			continue;
-		longs = arch_get_random_longs_early(seed.data + i,
+		longs = arch_get_random_longs(seed.data + i,
 						    ARRAY_SIZE(seed.data) - i);
 		if (longs)
 			continue;
diff --git a/drivers/char/lrng/lrng_interface_random_kernel.c b/drivers/char/lrng/lrng_interface_random_kernel.c
index 4c6c7a490..0998358fe 100644
--- a/drivers/char/lrng/lrng_interface_random_kernel.c
+++ b/drivers/char/lrng/lrng_interface_random_kernel.c
@@ -56,8 +56,9 @@ void __init random_init(void)
  * @entropy_bits: amount of entropy in buffer (value is in bits)
  */
 void add_hwgenerator_randomness(const void *buffer, size_t count,
-				size_t entropy_bits)
+				size_t entropy_bits, bool sleep_after)
 {
+	(void)sleep_after;
 	/*
 	 * Suspend writing if we are fully loaded with entropy or if caller
 	 * did not provide any entropy. We'll be woken up again once below
-- 
2.39.0.rc2.1.gbd5df96b79

