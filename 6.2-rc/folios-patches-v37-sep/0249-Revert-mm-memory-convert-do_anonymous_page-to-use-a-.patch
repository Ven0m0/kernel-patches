From fc7f34d8292d11ef4db9d8a8d5714a1bed925df4 Mon Sep 17 00:00:00 2001
From: Piotr Gorski <lucjan.lucjanov@gmail.com>
Date: Mon, 16 Jan 2023 22:00:14 +0100
Subject: [PATCH 249/291] Revert "mm: memory: convert do_anonymous_page() to
 use a folio"

This reverts commit 1cc5589e344950b53de1614f6744538e7b6fbc8a.

Signed-off-by: Piotr Gorski <lucjan.lucjanov@gmail.com>
---
 mm/memory.c | 18 ++++++++----------
 1 file changed, 8 insertions(+), 10 deletions(-)

diff --git a/mm/memory.c b/mm/memory.c
index 06cef8295..d4953b10a 100644
--- a/mm/memory.c
+++ b/mm/memory.c
@@ -4032,7 +4032,6 @@ static vm_fault_t do_anonymous_page(struct vm_fault *vmf)
 {
 	struct vm_area_struct *vma = vmf->vma;
 	struct page *page;
-	struct folio *folio;
 	vm_fault_t ret = 0;
 	pte_t entry;
 
@@ -4086,17 +4085,16 @@ static vm_fault_t do_anonymous_page(struct vm_fault *vmf)
 	if (!page)
 		goto oom;
 
-	folio = page_folio(page);
-	if (mem_cgroup_charge(folio, vma->vm_mm, GFP_KERNEL))
+	if (mem_cgroup_charge(page_folio(page), vma->vm_mm, GFP_KERNEL))
 		goto oom_free_page;
-	folio_throttle_swaprate(folio, GFP_KERNEL);
+	cgroup_throttle_swaprate(page, GFP_KERNEL);
 
 	/*
-	 * The memory barrier inside __folio_mark_uptodate makes sure that
+	 * The memory barrier inside __SetPageUptodate makes sure that
 	 * preceding stores to the page contents become visible before
 	 * the set_pte_at() write.
 	 */
-	__folio_mark_uptodate(folio);
+	__SetPageUptodate(page);
 
 	entry = mk_pte(page, vma->vm_page_prot);
 	entry = pte_sw_mkyoung(entry);
@@ -4117,13 +4115,13 @@ static vm_fault_t do_anonymous_page(struct vm_fault *vmf)
 	/* Deliver the page fault to userland, check inside PT lock */
 	if (userfaultfd_missing(vma)) {
 		pte_unmap_unlock(vmf->pte, vmf->ptl);
-		folio_put(folio);
+		put_page(page);
 		return handle_userfault(vmf, VM_UFFD_MISSING);
 	}
 
 	inc_mm_counter(vma->vm_mm, MM_ANONPAGES);
 	page_add_new_anon_rmap(page, vma, vmf->address);
-	folio_add_lru_vma(folio, vma);
+	lru_cache_add_inactive_or_unevictable(page, vma);
 setpte:
 	set_pte_at(vma->vm_mm, vmf->address, vmf->pte, entry);
 
@@ -4133,10 +4131,10 @@ static vm_fault_t do_anonymous_page(struct vm_fault *vmf)
 	pte_unmap_unlock(vmf->pte, vmf->ptl);
 	return ret;
 release:
-	folio_put(folio);
+	put_page(page);
 	goto unlock;
 oom_free_page:
-	folio_put(folio);
+	put_page(page);
 oom:
 	return VM_FAULT_OOM;
 }
-- 
2.39.0.rc2.1.gbd5df96b79

