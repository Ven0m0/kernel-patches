From ef10761f49a05f74cb7df9d5f57d451e44dabb0d Mon Sep 17 00:00:00 2001
From: Stephan Mueller <smueller@chronox.de>
Date: Sun, 8 Jan 2023 09:50:09 +0100
Subject: [PATCH 30/34] lrng: adopt upstream patch
 bbc7e1bed1f5297581325e739f0e47f650a386fa

Signed-off-by: Stephan Mueller <smueller@chronox.de>
---
 drivers/char/lrng/lrng_es_mgr.c               |  1 +
 .../char/lrng/lrng_interface_random_kernel.c  | 29 +++++++++++++++++++
 .../char/lrng/lrng_interface_random_kernel.h  |  2 ++
 3 files changed, 32 insertions(+)

diff --git a/drivers/char/lrng/lrng_es_mgr.c b/drivers/char/lrng/lrng_es_mgr.c
index 6c3f2f3d8..3d6a179fe 100644
--- a/drivers/char/lrng/lrng_es_mgr.c
+++ b/drivers/char/lrng/lrng_es_mgr.c
@@ -195,6 +195,7 @@ static void lrng_init_wakeup(void)
 {
 	wake_up_all(&lrng_init_wait);
 	lrng_init_wakeup_dev();
+	lrng_kick_random_ready();
 }
 
 static u32 lrng_avail_entropy_thresh(void)
diff --git a/drivers/char/lrng/lrng_interface_random_kernel.c b/drivers/char/lrng/lrng_interface_random_kernel.c
index 3341b313c..fabf2109c 100644
--- a/drivers/char/lrng/lrng_interface_random_kernel.c
+++ b/drivers/char/lrng/lrng_interface_random_kernel.c
@@ -19,6 +19,8 @@
 #include "lrng_interface_dev_common.h"
 #include "lrng_interface_random_kernel.h"
 
+static ATOMIC_NOTIFIER_HEAD(random_ready_notifier);
+
 /********************************** Helper ***********************************/
 
 static bool lrng_trust_bootloader __initdata =
@@ -41,6 +43,33 @@ void __init random_init(void)
 	lrng_rand_initialize();
 }
 
+/*
+ * Add a callback function that will be invoked when the LRNG is initialised,
+ * or immediately if it already has been. Only use this is you are absolutely
+ * sure it is required. Most users should instead be able to test
+ * `rng_is_initialized()` on demand, or make use of `get_random_bytes_wait()`.
+ */
+int __cold execute_with_initialized_rng(struct notifier_block *nb)
+{
+	unsigned long flags;
+	int ret = 0;
+
+	spin_lock_irqsave(&random_ready_notifier.lock, flags);
+	if (rng_is_initialized())
+		nb->notifier_call(nb, 0, NULL);
+	else
+		ret = raw_notifier_chain_register(
+			(struct raw_notifier_head *)&random_ready_notifier.head,
+			nb);
+	spin_unlock_irqrestore(&random_ready_notifier.lock, flags);
+	return ret;
+}
+
+void lrng_kick_random_ready(void)
+{
+	atomic_notifier_call_chain(&random_ready_notifier, 0, NULL);
+}
+
 /************************ LRNG kernel input interfaces ************************/
 
 /*
diff --git a/drivers/char/lrng/lrng_interface_random_kernel.h b/drivers/char/lrng/lrng_interface_random_kernel.h
index f4d09d1fb..ea2b5be8d 100644
--- a/drivers/char/lrng/lrng_interface_random_kernel.h
+++ b/drivers/char/lrng/lrng_interface_random_kernel.h
@@ -8,8 +8,10 @@
 
 #ifdef CONFIG_LRNG_RANDOM_IF
 void invalidate_batched_entropy(void);
+void lrng_kick_random_ready(void);
 #else /* CONFIG_LRNG_RANDOM_IF */
 static inline void invalidate_batched_entropy(void) { }
+static inline void lrng_kick_random_ready(void) { }
 #endif /* CONFIG_LRNG_RANDOM_IF */
 
 #endif /* _LRNG_INTERFACE_RANDOM_H */
-- 
2.39.0.rc2.1.gbd5df96b79

